import React, {
  DetailedHTMLProps,
  HTMLAttributes,
  PropsWithChildren,
} from "react";
import { MarkdownToJSX } from "markdown-to-jsx";
import { Text } from "../Text";
import { Emphasis } from "../Emphasis";
import { Heading } from "../Heading";

type HTMLProps = DetailedHTMLProps<HTMLAttributes<HTMLElement>, HTMLElement>;

// Reusable component to enforce no wrapping span tags as generated by markdown-to-jsx
// This behavior is to mimic react-markdown as closely as possible for compatability purposes.
// By default markdown-to-jsx wraps all text in span tags while react-markdown did not.
const NoSpan = {
  component: ({ children }: PropsWithChildren) => <>{children}</>,
  props: {},
};

// Basic overrides remove any tags aside from inline/style tags (code,strong,em,a)
const basicOverrides = (externalLink?: boolean) =>
  ({
    p: NoSpan,
    h1: NoSpan,
    div: NoSpan,
    h2: NoSpan,
    h3: NoSpan,
    h4: NoSpan,
    h5: NoSpan,
    h6: NoSpan,
    table: NoSpan,
    ul: NoSpan,
    li: NoSpan,
    code: ({ children, ...args }: PropsWithChildren) => (
      <code {...args}>{children}</code>
    ),
    strong: renderStrong,
    em: renderEmphasis,
    image: NoSpan,
    a: {
      component: ({ children, ...rest }: PropsWithChildren) => (
        <a {...rest}>{children}</a>
      ),
      props: { target: externalLink ? "_blank" : undefined },
    },
  } as MarkdownToJSX.Overrides);

// This is setup to mimic the output of react-markdown for compatibility purposes.
const defaultOverrides = (externalLink?: boolean) =>
  ({
    code: ({ children, ...args }: PropsWithChildren) => (
      <code {...args}>{children}</code>
    ),
    p: renderParagraph,
    strong: renderStrong,
    span: NoSpan,
    div: NoSpan,
    em: renderEmphasis,
    h1: renderHeading(1),
    h2: renderHeading(2),
    h3: renderHeading(3),
    h4: renderHeading(4),
    h5: renderHeading(5),
    h6: {
      component: ({ children }: PropsWithChildren) => <h6>{children}</h6>,
    },
    a: {
      component: ({ children, ...rest }: PropsWithChildren) => (
        <a {...rest}>{children}</a>
      ),
      props: { target: externalLink ? "_blank" : undefined },
    },
  } as MarkdownToJSX.Overrides);

function renderParagraph({ children }: HTMLProps) {
  return <Text>{children}</Text>;
}

function renderStrong({ children }: HTMLProps) {
  return <Emphasis variation="bold">{children}</Emphasis>;
}

function renderEmphasis({ children }: HTMLProps) {
  return <Emphasis variation="italic">{children}</Emphasis>;
}

function renderHeading(level: 1 | 2 | 3 | 4 | 5) {
  function buildHeading({ children }: HTMLProps) {
    return <Heading level={level}>{children}</Heading>;
  }

  return buildHeading;
}

export const useMarkdownOverrides = (
  externalLink?: boolean,
  basicUsage?: boolean,
) => {
  return basicUsage
    ? basicOverrides(externalLink)
    : defaultOverrides(externalLink);
};

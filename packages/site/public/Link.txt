# Link

# Link

The Link will render an `<a>` tag with the appropriate `href` and `target`
attributes, when/as applicable.

## Design & usage guidelines

A Link marked external will always open in a new tab. Set this when linking away
from Jobber or to other applications or sites across Jobber where this behaviour
is appropriate (e.g. linking from Jobber Online to the Jobber Help Center).

Link should not be used to submit form data, trigger actions, or alter the state
of the page. Use a [Button](/components/Button) for these purposes.

## Content guidelines

Contents of the link should be textual, and may include some formatting features
(e.g. italic text for emphasis may be appropriate, changing the inherited
underline probably isn't). The text can be plain, from a
[Typography](/components/Typography) component, a `format`(`Date|Time|Email`)
component or similar. Don't use this component to wrap other kinds of UI
elements to make them clickable.

## Accessibility

Try to ensure the text of the Link is descriptive of the destination. Avoid
using "click here" or "learn more" as the text of the link, and instead use the
title of the destination page or a short description of the content.

If it's not possible to make the visible text sufficiently descriptive without
additional context, set the `ariaLabel` prop to a descriptive string for
screenreaders. Do _not_ set this prop if it will be redundant to the link text.

## Web Component Code

```tsx
Link Anchor URL Web React import type { PropsWithChildren } from "react";
import React from "react";
import styles from "./Link.module.css";

export interface LinkProps {
  readonly url: string;
  readonly ariaLabel?: string;
  readonly ariaExpanded?: boolean;
  readonly external?: boolean;
}

export function Link({
  url,
  children,
  ariaLabel,
  ariaExpanded,
  external = false,
}: PropsWithChildren<LinkProps>) {
  return (
    <a
      href={url}
      {...(external && {
        target: "_blank",
        rel: "noopener noreferrer",
      })}
      {...(ariaLabel && { "aria-label": ariaLabel })}
      {...(ariaExpanded && { "aria-expanded": ariaExpanded })}
      className={styles.link}
    >
      {children}
    </a>
  );
}

```

## Props

### Web Props

| Prop | Type | Required | Default | Description |
|------|------|----------|---------|-------------|
| `url` | `string` | ✅ | `_none_` | _No description_ |
| `ariaLabel` | `string` | ❌ | `_none_` | _No description_ |
| `ariaExpanded` | `boolean` | ❌ | `_none_` | _No description_ |
| `external` | `boolean` | ❌ | `[object Object]` | _No description_ |


## Categories

- Text & Typography

## Web Test Code

```typescript
Link Anchor URL Web React Test Testing Jest import React from "react";
import { render } from "@testing-library/react";
import { Link } from ".";

const testUrl = "https://getjobber.com";
const testText = "This is a link";

describe("when a Link is rendered", () => {
  it("opens the link in the same tab if external is left at default value of false", () => {
    const { getByText } = render(<Link url={testUrl}>{testText}</Link>);
    const link = getByText(testText);
    expect(link.getAttribute("target")).toBeNull();
  });
  it("opens in a new tab if external is set to true", () => {
    const { getByText } = render(
      <Link url={testUrl} external={true}>
        {testText}
      </Link>,
    );
    const link = getByText(testText);
    expect(link.getAttribute("target")).toBe("_blank");
  });
  it("links to the correct url provided", () => {
    const { getByText } = render(<Link url={testUrl}>{testText}</Link>);
    const link = getByText(testText);
    expect(link.getAttribute("href")).toBe(testUrl);
  });
});

```

## Component Path

`/components/Link`

---

_Generated on 2025-08-21T17:35:16.368Z_

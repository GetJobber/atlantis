# Button

# Button

{<a href="https://atlantis.getjobber.com/components/Button">Button docs</a>} have moved to the new site.

## Web Component Code

```tsx
Button Action Web React import React, { useState } from "react";
import type { Meta, StoryObj } from "@storybook/react-vite";
import { Link, Route, BrowserRouter as Router, Switch } from "react-router-dom";
import classnames from "classnames";
import { fn } from "storybook/test";
import type { ButtonType, ButtonVariation } from "@jobber/components/Button";
import { Button, useButtonStyles } from "@jobber/components/Button";
import { Form } from "@jobber/components/Form";
import { InputNumber } from "@jobber/components/InputNumber";
import { Content } from "@jobber/components/Content";
import { Grid } from "@jobber/components/Grid";
import { Heading } from "@jobber/components/Heading";

const meta = {
  title: "Components/Actions/Button",
  component: Button,
  args: {
    label: "New Job",
    onClick: fn(),
  },
} satisfies Meta<typeof Button>;
export default meta;
type Story = StoryObj<typeof meta>;

export const Basic: Story = {
  args: {
    type: "primary",
  },
};

const RoutingTemplate = () => (
  <Router basename="/components/button">
    <Button label="Home" to="/" />
    <Button label="Office" to="/office" />
    <Button label="Dentist" to="/dentist" />
    <hr />
    <Switch>
      <Route exact path="/">
        This is my home, time to get cozy.
      </Route>
      <Route exact path="/office">
        This is my office, time to get to work.
      </Route>
      <Route exact path="/dentist">
        This is the dentist, time to get my teeth fixed.
      </Route>
    </Switch>
  </Router>
);

export const ClientSideRouting: Story = {
  render: RoutingTemplate,
};

const FormTemplate = () => (
  <Form onSubmit={() => alert("Wow, what a number")}>
    <Content>
      <InputNumber placeholder="Pick a number" />
      <Button label="Submit" submit={true} />
    </Content>
  </Form>
);

const ComparisonTemplate = () => {
  const [type, setType] = useState<ButtonType>("primary");
  const [variation, setVariation] = useState<ButtonVariation>("work");

  return (
    <Grid>
      <Grid.Cell size={{ xs: 3 }}>
        <Button label="Set type primary" onClick={() => setType("primary")} />
      </Grid.Cell>
      <Grid.Cell size={{ xs: 3 }}>
        <Button
          label="Set type secondary"
          onClick={() => setType("secondary")}
        />
      </Grid.Cell>
      <Grid.Cell size={{ xs: 3 }}>
        <Button label="Set type tertiary" onClick={() => setType("tertiary")} />
      </Grid.Cell>
      <Grid.Cell size={{ xs: 3 }}></Grid.Cell>
      <Grid.Cell size={{ xs: 3 }}>
        <Button
          label="Set variation work"
          onClick={() => setVariation("work")}
        />
      </Grid.Cell>
      <Grid.Cell size={{ xs: 3 }}>
        <Button
          label="Set variation learning"
          onClick={() => setVariation("learning")}
        />
      </Grid.Cell>
      <Grid.Cell size={{ xs: 3 }}>
        <Button
          label="Set variation subtle"
          onClick={() => setVariation("subtle")}
        />
      </Grid.Cell>
      <Grid.Cell size={{ xs: 3 }}>
        <Button
          label="Set variation destructive"
          onClick={() => setVariation("destructive")}
        />
      </Grid.Cell>
      <Grid.Cell size={{ xs: 6 }}>
        <Heading level={3}>Non-composed</Heading>
      </Grid.Cell>
      <Grid.Cell size={{ xs: 6 }}>
        <Heading level={3}>Composed</Heading>
      </Grid.Cell>
      <Grid.Cell size={{ xs: 6 }}>
        <Button
          label={`${type} ${variation} Button`}
          type={type}
          variation={variation}
        />
      </Grid.Cell>
      <Grid.Cell size={{ xs: 6 }}>
        <Button type={type} variation={variation}>
          <Button.Label>{`${type} ${variation} Button`}</Button.Label>
        </Button>
      </Grid.Cell>
      <Grid.Cell size={{ xs: 6 }}>
        <Button
          label={`${type} ${variation} with Icon`}
          type={type}
          variation={variation}
          icon="add"
        />
      </Grid.Cell>
      <Grid.Cell size={{ xs: 6 }}>
        <Button type={type} variation={variation}>
          <Button.Icon name="add" />
          <Button.Label>{`${type} ${variation} with Icon`}</Button.Label>
        </Button>
      </Grid.Cell>
      <Grid.Cell size={{ xs: 6 }}>
        <Button
          label={`${type} ${variation} with Right Icon`}
          type={type}
          variation={variation}
          icon="arrowRight"
          iconOnRight={true}
        />
      </Grid.Cell>
      <Grid.Cell size={{ xs: 6 }}>
        <Button type={type} variation={variation}>
          <Button.Label>{`${type} ${variation} with Right Icon`}</Button.Label>
          <Button.Icon name="arrowRight" />
        </Button>
      </Grid.Cell>
      <Grid.Cell size={{ xs: 6 }}>
        <Button
          icon="cog"
          ariaLabel="Settings"
          type={type}
          variation={variation}
        />
      </Grid.Cell>
      <Grid.Cell size={{ xs: 6 }}>
        <Button type={type} variation={variation}>
          <Button.Icon name="cog" />
        </Button>
      </Grid.Cell>
      <Grid.Cell size={{ xs: 6 }}>
        <Button
          label={`${type} ${variation} Small Button`}
          type={type}
          variation={variation}
          size="small"
        />
      </Grid.Cell>
      <Grid.Cell size={{ xs: 6 }}>
        <Button type={type} variation={variation} size="small">
          <Button.Label>{`${type} ${variation} Small Button`}</Button.Label>
        </Button>
      </Grid.Cell>
      <Grid.Cell size={{ xs: 6 }}>
        <Button
          label={`${type} ${variation} Base Button`}
          type={type}
          variation={variation}
          size="base"
        />
      </Grid.Cell>
      <Grid.Cell size={{ xs: 6 }}>
        <Button type={type} variation={variation} size="base">
          <Button.Label>{`${type} ${variation} Base Button`}</Button.Label>
        </Button>
      </Grid.Cell>
      <Grid.Cell size={{ xs: 6 }}>
        <Button
          label={`${type} ${variation} Large Button`}
          type={type}
          variation={variation}
          size="large"
        />
      </Grid.Cell>

      <Grid.Cell size={{ xs: 6 }}>
        <Button type={type} variation={variation} size="large">
          <Button.Label>{`${type} ${variation} Large Button`}</Button.Label>
        </Button>
      </Grid.Cell>
      <Grid.Cell size={{ xs: 6 }}>
        <Button
          label={`${type} ${variation} Loading Button`}
          type={type}
          variation={variation}
          loading={true}
        />
      </Grid.Cell>
      <Grid.Cell size={{ xs: 6 }}>
        <Button type={type} variation={variation} loading={true}>
          <Button.Label>{`${type} ${variation} Loading Button`}</Button.Label>
        </Button>
      </Grid.Cell>
      <Grid.Cell size={{ xs: 6 }}>
        <Button
          label={`${type} ${variation} Disabled Button`}
          type={type}
          variation={variation}
          disabled={true}
        />
      </Grid.Cell>
      <Grid.Cell size={{ xs: 6 }}>
        <Button type={type} variation={variation} disabled={true}>
          <Button.Label>{`${type} ${variation} Disabled Button`}</Button.Label>
        </Button>
      </Grid.Cell>
      <Grid.Cell size={{ xs: 6 }}>
        <Button
          label={`${type} ${variation} Combined Small Props`}
          type={type}
          variation={variation}
          icon="note"
          size="small"
        />
      </Grid.Cell>
      <Grid.Cell size={{ xs: 6 }}>
        <Button type={type} variation={variation} size="small">
          <Button.Icon name="note" />
          <Button.Label>{`${type} ${variation} Combined Small Props`}</Button.Label>
        </Button>
      </Grid.Cell>
      <Grid.Cell size={{ xs: 6 }}>
        <Button
          label={`${type} ${variation} Combined Small Props on Right`}
          type={type}
          iconOnRight={true}
          variation={variation}
          icon="note"
          size="small"
        />
      </Grid.Cell>
      <Grid.Cell size={{ xs: 6 }}>
        <Button type={type} variation={variation} size="small">
          <Button.Label>{`${type} ${variation} Combined Small Props on Right`}</Button.Label>
          <Button.Icon name="note" />
        </Button>
      </Grid.Cell>
      <Grid.Cell size={{ xs: 6 }}>
        <Button
          label={`${type} ${variation} Combined Large Props`}
          type={type}
          variation={variation}
          icon="note"
          size="large"
        />
      </Grid.Cell>
      <Grid.Cell size={{ xs: 6 }}>
        <Button type={type} variation={variation} size="large">
          <Button.Icon name="note" />
          <Button.Label>{`${type} ${variation} Combined Large Props`}</Button.Label>
        </Button>
      </Grid.Cell>
      <Grid.Cell size={{ xs: 6 }}>
        <Button
          label={`${type} ${variation} Combined Large Props on Right`}
          type={type}
          variation={variation}
          icon="note"
          size="large"
          iconOnRight={true}
        />
      </Grid.Cell>
      <Grid.Cell size={{ xs: 6 }}>
        <Button type={type} variation={variation} size="large">
          <Button.Label>{`${type} ${variation} Combined Large Props on Right`}</Button.Label>
          <Button.Icon name="note" />
        </Button>
      </Grid.Cell>
    </Grid>
  );
};

const ComposedLinksTemplate = () => {
  const buttonStyles = useButtonStyles({});

  return (
    <Router basename="/components/composed-links">
      <Link
        to="/"
        className={classnames(buttonStyles.wrapper, buttonStyles.children)}
      >
        <Button.Label>Home</Button.Label>
        <Button.Icon name="home" />
      </Link>
      <Link
        to="/office"
        className={classnames(buttonStyles.wrapper, buttonStyles.children)}
      >
        <Button.Label>Office</Button.Label>
        <Button.Icon name="address" />
      </Link>
      <Link
        to="/dentist"
        className={classnames(buttonStyles.wrapper, buttonStyles.children)}
      >
        <Button.Label>Dentist</Button.Label>
      </Link>
      <hr />
      <Switch>
        <Route exact path="/">
          This is my home, time to get cozy.
        </Route>
        <Route exact path="/office">
          This is my office, time to get to work.
        </Route>
        <Route exact path="/dentist">
          This is the dentist, time to get my teeth fixed.
        </Route>
      </Switch>
    </Router>
  );
};

export const ComposedLinks: Story = {
  render: ComposedLinksTemplate,
};

export const Comparison: Story = {
  render: ComparisonTemplate,
};

export const FormSubmit: Story = {
  render: FormTemplate,
};
import React from "react";
import { Link } from "react-router-dom";
import classnames from "classnames";
import { type ButtonProps, type HTMLButtonType } from "./Button.types";
import { useButtonStyles } from "./useButtonStyles";
// eslint-disable-next-line import/no-deprecated
import { ButtonContent, ButtonIcon, ButtonLabel } from "./ButtonInternals";
import { ButtonProvider } from "./ButtonProvider";

function Button(props: ButtonProps) {
  const { size } = props;

  return (
    <ButtonProvider size={size}>
      <ButtonWrapper {...props} />
    </ButtonProvider>
  );
}

function ButtonWrapper(props: ButtonProps) {
  const {
    ariaControls,
    ariaHaspopup,
    ariaExpanded,
    ariaLabel,
    disabled = false,
    external,
    id,
    name,
    onClick,
    onMouseDown,
    role,
    value,
    submit,
    to,
    url,
    UNSAFE_className = {},
    UNSAFE_style = {},
    children,
  } = props;

  const { combined } = useButtonStyles(props);

  const buttonType: HTMLButtonType = submit ? "submit" : "button";

  const buttonClassNames = classnames(combined, UNSAFE_className.container);

  const tagProps = {
    className: buttonClassNames,
    disabled,
    id,
    style: UNSAFE_style.container,
    ...(submit && { name, value }),
    ...(!disabled && { href: url }),
    ...(!disabled && { onClick: onClick }),
    ...(!disabled && { onMouseDown: onMouseDown }),
    ...(external && {
      target: "_blank",
      rel: "noopener noreferrer",
    }),
    ...(url === undefined && to === undefined && { type: buttonType }),
    "aria-controls": ariaControls,
    "aria-haspopup": ariaHaspopup,
    "aria-expanded": ariaExpanded,
    "aria-label": ariaLabel,
    role: role,
  };

  const buttonInternals = children || <ButtonContent {...props} />;

  if (to) {
    return (
      <Link {...tagProps} to={to}>
        {buttonInternals}
      </Link>
    );
  }

  const Tag = url ? "a" : "button";

  return <Tag {...tagProps}>{buttonInternals}</Tag>;
}

Button.Label = ButtonLabel;
Button.Icon = ButtonIcon;
export type { ButtonProps };
export { Button };
import React from "react";
import { type ButtonProps } from "./Button.types";
import { useButtonContext } from "./ButtonProvider";
import { Icon, type IconProps } from "../Icon";
import { Typography, type TypographyProps } from "../Typography";

/**
 * For backwards compatibility with the legacy button
 * @deprecated Used composed solution instead
 */
export function ButtonContent({
  label,
  icon,
  size = "base",
  iconOnRight = false,
  UNSAFE_className,
  UNSAFE_style,
}: Pick<
  ButtonProps,
  | "label"
  | "icon"
  | "size"
  | "iconOnRight"
  | "UNSAFE_className"
  | "UNSAFE_style"
>) {
  return (
    <>
      {icon && !iconOnRight && (
        <ButtonIcon
          name={icon}
          size={size}
          UNSAFE_className={UNSAFE_className?.buttonIcon}
          UNSAFE_style={UNSAFE_style?.buttonIcon}
        />
      )}
      {label && (
        <ButtonLabel
          size={size}
          UNSAFE_className={UNSAFE_className?.buttonLabel}
          UNSAFE_style={UNSAFE_style?.buttonLabel}
        >
          {label}
        </ButtonLabel>
      )}
      {icon && iconOnRight && (
        <ButtonIcon
          name={icon}
          size={size}
          UNSAFE_className={UNSAFE_className?.buttonIcon}
          UNSAFE_style={UNSAFE_style?.buttonIcon}
        />
      )}
    </>
  );
}

function getTypeSizes(size: string) {
  switch (size) {
    case "small":
      return "base";
    case "large":
      return "large";
    default:
      return "base";
  }
}

export function ButtonIcon({
  size: sizeProp,
  ...props
}: Pick<
  IconProps,
  "size" | "name" | "testID" | "UNSAFE_className" | "UNSAFE_style"
>) {
  const { size: contextSize } = useButtonContext();
  const size = sizeProp || contextSize;

  return <Icon {...props} size={size} />;
}

export function ButtonLabel({
  element = "span",
  fontWeight = "semiBold",
  fontFamily = "base",
  size: sizeProp,
  ...props
}: Omit<TypographyProps, "textColor">) {
  const { size: contextSize } = useButtonContext();
  const size = sizeProp || contextSize;

  return (
    <Typography
      element={element}
      fontWeight={fontWeight}
      fontFamily={fontFamily}
      size={getTypeSizes(size)}
      {...props}
    />
  );
}
import type { PropsWithChildren } from "react";
import React, { createContext, useContext } from "react";
import type { ButtonSize } from "./Button.types";

interface ButtonContextProps {
  size: ButtonSize;
}

const ButtonContext = createContext<ButtonContextProps>({
  size: "base",
});

export function ButtonProvider({
  children,
  size = "base",
}: PropsWithChildren<{
  readonly size?: ButtonSize;
}>) {
  return (
    <ButtonContext.Provider value={{ size }}>{children}</ButtonContext.Provider>
  );
}

export function useButtonContext() {
  return useContext(ButtonContext);
}

```

## Props

### Web Props

| Prop | Type | Required | Default | Description |
|------|------|----------|---------|-------------|
| `external` | `boolean` | ❌ | `_none_` | _No description_ |
| `onClick` | `(event: MouseEvent<HTMLAnchorElement | HTMLButtonElement, MouseEvent>) => void` | ❌ | `_none_` | _No description_ |
| `name` | `string` | ❌ | `_none_` | _No description_ |
| `submit` | `boolean` | ❌ | `_none_` | Allows the button to submit a form |
| `type` | `ButtonType` | ❌ | `_none_` | _No description_ |
| `value` | `string` | ❌ | `_none_` | _No description_ |
| `variation` | `ButtonVariation` | ❌ | `_none_` | _No description_ |
| `ariaControls` | `string` | ❌ | `_none_` | Used for screen readers. Will override label on screen
reader if present. |
| `ariaHaspopup` | `boolean` | ❌ | `_none_` | _No description_ |
| `ariaExpanded` | `boolean` | ❌ | `_none_` | _No description_ |
| `disabled` | `boolean` | ❌ | `_none_` | _No description_ |
| `fullWidth` | `boolean` | ❌ | `_none_` | _No description_ |
| `id` | `string` | ❌ | `_none_` | _No description_ |
| `loading` | `boolean` | ❌ | `_none_` | _No description_ |
| `size` | `ButtonSize` | ❌ | `_none_` | _No description_ |
| `ariaLabel` | `string` | ❌ | `_none_` | _No description_ |
| `onMouseDown` | `(event: MouseEvent<HTMLAnchorElement | HTMLButtonElement, MouseEvent>) => void` | ❌ | `_none_` | _No description_ |
| `UNSAFE_className` | `{ container?: string; buttonLabel?: { textStyle?: string; }; buttonIcon?: { svg?: string; path?: string; }; }` | ❌ | `_none_` | **Use at your own risk:** Custom class names for specific elements. This should only be used as a
**last resort**. Using this may result in unexpected side effects.
**Note:** If you are applying fill override to buttonIcon.path, you will need to add !important due
to Button's children element css inheritance.
More information in the [Customizing components Guide](https://atlantis.getjobber.com/guides/customizing-components). |
| `UNSAFE_style` | `{ container?: CSSProperties; buttonLabel?: { textStyle?: CSSProperties; }; buttonIcon?: { svg?: CSSProperties; path?: CSSProperties; }; }` | ❌ | `_none_` | **Use at your own risk:** Custom style for specific elements. This should only be used as a
**last resort**. Using this may result in unexpected side effects.
**Note:** If you are applying fill override to buttonIcon.path, you will need to add !important due
to Button's children element css inheritance.
More information in the [Customizing components Guide](https://atlantis.getjobber.com/guides/customizing-components). |
| `role` | `string` | ❌ | `_none_` | Used to override the default button role. |
| `to` | `LocationDescriptor<unknown> | ((location: Location<unknown>) => LocationDescriptor<unknown>)` | ❌ | `_none_` | **Deprecated**: to will be removed in the next major version
@deprecated |
| `url` | `string` | ❌ | `_none_` | Used to create an 'href' on an anchor tag. |
| `label` | `string` | ❌ | `_none_` | _No description_ |
| `icon` | `IconNames` | ❌ | `_none_` | _No description_ |
| `iconOnRight` | `boolean` | ❌ | `_none_` | _No description_ |


### Mobile Props

| Prop | Type | Required | Default | Description |
|------|------|----------|---------|-------------|
| `label` | `string` | ❌ | `_none_` | Text to be displayed on the button |
| `icon` | `IconNames` | ❌ | `_none_` | Adds an leading icon beside the label. |
| `accessibilityLabel` | `string` | ❌ | `_none_` | Accessibility label for the component. This is required for components that
have an `icon` but not a `label`.

If the string is the same as the `label` prop, you don't need to add an
`accessibilityLabel`. **Don't use this for testing purposes.** |
| `onPress` | `() => void` | ❌ | `_none_` | Press handler |
| `variation` | `ButtonVariation` | ❌ | `work` | Themes the button to the type of action it performs |
| `type` | `ButtonType` | ❌ | `primary` | Sets the visual hierarchy |
| `size` | `ButtonSize` | ❌ | `base` | Defines the size of the button |
| `fullHeight` | `boolean` | ❌ | `[object Object]` | Will make the button scale to take up all the available height |
| `fullWidth` | `boolean` | ❌ | `true` | Will make the button scale to take up all of the available width |
| `disabled` | `boolean` | ❌ | `[object Object]` | Makes the button un-clickable |
| `accessibilityHint` | `string` | ❌ | `_none_` | Accessibility hint to help users understand what will happen when they press the button |
| `loading` | `boolean` | ❌ | `[object Object]` | Changes the button interface to imply loading and prevents the press callback |
| `testID` | `string` | ❌ | `_none_` | Used to locate this view in end-to-end tests. |
| `UNSAFE_style` | `ButtonUnsafeStyle` | ❌ | `_none_` | **Use at your own risk:** Custom style for specific elements. This should only be used as a
**last resort**. Using this may result in unexpected side effects.
More information in the [Customizing components Guide](https://atlantis.getjobber.com/guides/customizing-components). |


## Categories

- Actions

## Web Test Code

```typescript
Button Action Web React Test Testing Jest import React from "react";
import { fireEvent, render, screen } from "@testing-library/react";
import type { RouteChildrenProps } from "react-router-dom";
import { Route, BrowserRouter as Router, Switch } from "react-router-dom";
import userEvent from "@testing-library/user-event";
import { Button } from "./Button";

it("renders a Button", () => {
  const { container } = render(<Button label="Submit" />);
  expect(container).toMatchSnapshot();
});

it("renders a secondary Button", () => {
  const { container } = render(<Button label="Submit" type="secondary" />);
  expect(container).toMatchSnapshot();
});

it("renders a tertiary Button", () => {
  const { container } = render(<Button label="Submit" type="tertiary" />);
  expect(container).toMatchSnapshot();
});

it("renders a destructuve Button", () => {
  const { container } = render(
    <Button label="Submit" variation="destructive" />,
  );
  expect(container).toMatchSnapshot();
});

it("renders a learning Button", () => {
  const { container } = render(<Button label="Submit" variation="learning" />);
  expect(container).toMatchSnapshot();
});

it("renders a subtle Button", () => {
  const { container } = render(<Button label="Submit" variation="subtle" />);
  expect(container).toMatchSnapshot();
});

it("renders a disabled Button", () => {
  const { container } = render(<Button label="Submit" disabled={true} />);
  expect(container).toMatchSnapshot();
});

it("renders a Button with a link and opens in new tab", () => {
  const { container } = render(
    <Button label="Submit" url="💩.com" external={true} />,
  );
  expect(container).toMatchSnapshot();
});

it("renders a Button with an icon", () => {
  const { container } = render(<Button label="Add" icon="add" />);
  expect(container).toMatchSnapshot();
});

it("renders a Button with an icon on the right", () => {
  const { container } = render(
    <Button label="Add" icon="add" iconOnRight={true} />,
  );
  expect(container).toMatchSnapshot();
});

it("renders a Button that is just an icon", () => {
  const { container } = render(<Button icon="user" ariaLabel="Person" />);
  expect(container).toMatchSnapshot();
});

it("renders a small Button", () => {
  const { container } = render(<Button label="Add" size="small" />);
  expect(container).toMatchSnapshot();
});

it("renders a large Button", () => {
  const { container } = render(<Button label="Add" size="large" />);
  expect(container).toMatchSnapshot();
});

it("renders a Button with a loading state", () => {
  const { container } = render(<Button label="Adding" loading={true} />);
  expect(container).toMatchSnapshot();
});

test("it should call the handler on click", () => {
  const label = "Click Me";
  const clickHandler = jest.fn();
  const { getByText } = render(<Button label={label} onClick={clickHandler} />);

  fireEvent.click(getByText(label));
  expect(clickHandler).toHaveBeenCalledTimes(1);
});

test("it shouldn't call the handler on click when disabled", () => {
  const label = "I'm disabled";
  const clickHandler = jest.fn();
  const { getByText } = render(
    <Button label={label} disabled={true} onClick={clickHandler} />,
  );

  fireEvent.click(getByText(label));
  expect(clickHandler).toHaveBeenCalledTimes(0);
});

test("it should call the handler on mouse down", () => {
  const label = "Click Me";
  const mouseDownHandler = jest.fn();
  const { getByText } = render(
    <Button label={label} onMouseDown={mouseDownHandler} />,
  );

  fireEvent.mouseDown(getByText(label));
  expect(mouseDownHandler).toHaveBeenCalledTimes(1);
});

test("it shouldn't call the handler on mouse down when disabled", () => {
  const label = "I'm disabled";
  const mouseDownHandler = jest.fn();
  const { getByText } = render(
    <Button label={label} disabled={true} onMouseDown={mouseDownHandler} />,
  );

  fireEvent.mouseDown(getByText(label));
  expect(mouseDownHandler).toHaveBeenCalledTimes(0);
});

it("renders a Link as a Button for routing", () => {
  const { container } = render(
    <Router>
      <Button label="Adding" to="/jobber" />
    </Router>,
  );
  expect(container).toMatchSnapshot();
});

it("renders button type='button' by default", () => {
  const { container } = render(<Button label="hello" />);
  const button = container.querySelector("button[type='button']");
  expect(button).toBeInstanceOf(HTMLButtonElement);
});

it("renders button type='submit'", () => {
  const { container } = render(<Button label="hello" submit={true} />);
  const button = container.querySelector("button[type='submit']");
  expect(button).toBeInstanceOf(HTMLButtonElement);
});
describe("react router dom", () => {
  it("routes when buttons are clicked", () => {
    const { getByText, queryByText } = render(
      <Router>
        <Button label="One" to="/" />
        <Button label="Two" to="/two" />
        <Button label="Three" to="/three" />
        <Switch>
          <Route exact path="/">
            Uno
          </Route>
          <Route exact path="/two">
            Dos
          </Route>
          <Route exact path="/three">
            Tres
          </Route>
        </Switch>
      </Router>,
    );

    expect(queryByText("Uno")).toBeInstanceOf(HTMLElement);
    expect(queryByText("Dos")).not.toBeInstanceOf(HTMLElement);
    expect(queryByText("Tres")).not.toBeInstanceOf(HTMLElement);

    fireEvent.click(getByText("Two"));

    expect(queryByText("Uno")).not.toBeInstanceOf(HTMLElement);
    expect(queryByText("Dos")).toBeInstanceOf(HTMLElement);
    expect(queryByText("Tres")).not.toBeInstanceOf(HTMLElement);

    fireEvent.click(getByText("Three"));

    expect(queryByText("Uno")).not.toBeInstanceOf(HTMLElement);
    expect(queryByText("Dos")).not.toBeInstanceOf(HTMLElement);
    expect(queryByText("Tres")).toBeInstanceOf(HTMLElement);
  });

  it("routes with when buttons include link state", () => {
    interface LocationStateTest {
      locationStateTest: string;
    }

    function Test2(
      props: RouteChildrenProps<
        Record<string, string | undefined>,
        LocationStateTest
      >,
    ) {
      return <span>{props.location?.state?.locationStateTest}</span>;
    }
    const { getByText } = render(
      <Router>
        <Button label="One" to="/" />
        <Button
          label="Two"
          to={{
            pathname: "/two",
            state: { locationStateTest: "This is state" },
          }}
        />
        <Button label="Three" to="/three" />
        <Switch>
          <Route exact path="/">
            Uno
          </Route>
          <Route path="/two" component={Test2}></Route>
          <Route exact path="/three">
            Tres
          </Route>
        </Switch>
      </Router>,
    );
    fireEvent.click(getByText("Two"));
    expect(getByText("This is state")).toBeDefined();
  });
});

describe("Button role", () => {
  it("should have a role of button when role not provided", () => {
    const { getByRole } = render(<Button label="hello" />);
    expect(getByRole("button")).toBeInstanceOf(HTMLButtonElement);
  });
  it("should not have a role of button when role not provided and it's a link", () => {
    const { queryByRole, getByRole } = render(
      <Button label="hello" url="myspace.com" />,
    );
    expect(queryByRole("button")).not.toBeInTheDocument();
    expect(getByRole("link")).toBeInTheDocument();
  });
  it("should apply provided role when present", () => {
    const { getByRole } = render(<Button label="hello" role="combobox" />);
    expect(getByRole("combobox")).toBeInstanceOf(HTMLButtonElement);
  });
});

describe("Button with children", () => {
  it("renders custom children", () => {
    const { getByText } = render(
      <Button type="primary">
        <Button.Label>Custom Button Content</Button.Label>
      </Button>,
    );

    expect(getByText("Custom Button Content")).toBeInTheDocument();
  });

  it("applies button styles to the wrapper when using children", () => {
    render(
      <Button type="primary" variation="destructive">
        <Button.Label>Custom Content</Button.Label>
      </Button>,
    );
    const button = screen.getByRole("button");

    // The button should have the destructive class
    expect(button).toHaveClass("destructive");
  });

  it("supports children with other button props", async () => {
    const handleClick = jest.fn();
    render(
      <Button onClick={handleClick}>
        <Button.Label>Click Me</Button.Label>
      </Button>,
    );

    await userEvent.click(screen.getByText("Click Me"));
    expect(handleClick).toHaveBeenCalledTimes(1);
  });

  it("allows both rendering of label and icon", () => {
    render(
      <Button type="primary">
        <Button.Label>Click Me</Button.Label>
        <Button.Icon name="add" />
      </Button>,
    );

    expect(screen.getByText("Click Me")).toBeInTheDocument();
    expect(screen.getByTestId("add")).toBeInTheDocument();
  });
});

describe("UNSAFE_ props", () => {
  describe("Non-composable Button", () => {
    describe("UNSAFE_className", () => {
      it("applies to container", () => {
        render(
          <Button
            label="Custom Container ClassName"
            UNSAFE_className={{
              container: "custom-container",
            }}
          />,
        );

        expect(screen.getByRole("button")).toHaveClass("custom-container");
      });

      it("applies to label", () => {
        render(
          <Button
            label="Custom Label ClassName"
            UNSAFE_className={{
              buttonLabel: { textStyle: "custom-label" },
            }}
          />,
        );

        expect(screen.getByText("Custom Label ClassName")).toHaveClass(
          "custom-label",
        );
      });

      it("applies to icon", () => {
        render(
          <Button
            label="Custom Icon ClassName"
            icon="add"
            UNSAFE_className={{
              buttonIcon: {
                svg: "custom-icon-svg",
                path: "custom-icon-path",
              },
            }}
          />,
        );

        expect(screen.getByTestId("add")).toHaveClass("custom-icon-svg");
        expect(screen.getByTestId("add").querySelector("path")).toHaveClass(
          "custom-icon-path",
        );
      });
    });

    describe("UNSAFE_style", () => {
      it("applies to container", () => {
        render(
          <Button
            label="Custom Container Style"
            UNSAFE_style={{
              container: {
                backgroundColor: "var(--color-yellow)",
              },
            }}
          />,
        );
        expect(screen.getByRole("button")).toHaveStyle({
          backgroundColor: "var(--color-yellow)",
        });
      });

      it("applies to label", () => {
        render(
          <Button
            label="Custom Label Style"
            UNSAFE_style={{
              buttonLabel: {
                textStyle: {
                  color: "var(--color-blue)",
                },
              },
            }}
          />,
        );
        expect(screen.getByText("Custom Label Style")).toHaveStyle({
          color: "var(--color-blue)",
        });
      });

      it("applies to icon", () => {
        render(
          <Button
            label="Custom Icon Style"
            icon="add"
            UNSAFE_style={{
              buttonIcon: {
                svg: {
                  width: "var(--space-large)",
                },
                path: {
                  fill: "var(--color-green)",
                },
              },
            }}
          />,
        );

        expect(screen.getByTestId("add")).toHaveStyle({
          width: "var(--space-large)",
        });
        expect(screen.getByTestId("add").querySelector("path")).toHaveStyle({
          fill: "var(--color-green)",
        });
      });
    });
  });

  describe("Composable Button", () => {
    describe("UNSAFE_className", () => {
      it("applies to Button.Icon", () => {
        render(
          <Button>
            <Button.Icon
              name="add"
              UNSAFE_className={{
                svg: "custom-icon-svg",
                path: "custom-icon-path",
              }}
            />
          </Button>,
        );

        expect(screen.getByTestId("add")).toHaveClass("custom-icon-svg");
        expect(screen.getByTestId("add").querySelector("path")).toHaveClass(
          "custom-icon-path",
        );
      });

      it("applies to Button.Label", () => {
        render(
          <Button>
            <Button.Label UNSAFE_className={{ textStyle: "custom-label" }}>
              Custom Composable Label ClassName
            </Button.Label>
          </Button>,
        );

        expect(
          screen.getByText("Custom Composable Label ClassName"),
        ).toHaveClass("custom-label");
      });
    });

    describe("UNSAFE_style", () => {
      it("applies to Button.Icon", () => {
        render(
          <Button>
            <Button.Icon
              name="add"
              UNSAFE_style={{
                svg: {
                  width: "var(--space-large)",
                },
                path: {
                  fill: "var(--color-green)",
                },
              }}
            />
          </Button>,
        );

        expect(screen.getByTestId("add")).toHaveStyle({
          width: "var(--space-large)",
        });
        expect(screen.getByTestId("add").querySelector("path")).toHaveStyle({
          fill: "var(--color-green)",
        });
      });

      it("applies to Button.Label", () => {
        render(
          <Button>
            <Button.Label
              UNSAFE_style={{
                textStyle: {
                  color: "var(--color-blue)",
                },
              }}
            >
              Custom Composable Label Style
            </Button.Label>
          </Button>,
        );

        expect(screen.getByText("Custom Composable Label Style")).toHaveStyle({
          color: "var(--color-blue)",
        });
      });
    });
  });
});

```

## Component Path

`/components/Button`

---

_Generated on 2025-08-21T17:35:16.354Z_

[
  {
    "tags": {},
    "filePath": "packages/components-native/src/FormField/FormField.tsx",
    "description": "",
    "displayName": "FormField",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Children to render.",
        "name": "children",
        "parent": {
          "fileName": "packages/components-native/src/FormField/FormField.tsx",
          "name": "FormFieldProps"
        },
        "required": true,
        "type": {
          "name": "(field: ControllerRenderProps<FieldValues, string>, error?: FieldError | undefined) => ReactNode"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "The initial value of the form field.",
        "name": "defaultValue",
        "parent": {
          "fileName": "packages/components-native/src/FormField/FormField.tsx",
          "name": "FormFieldProps"
        },
        "required": false,
        "type": {
          "name": "T"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "Name of the field.",
        "name": "name",
        "parent": {
          "fileName": "packages/components-native/src/FormField/FormField.tsx",
          "name": "FormFieldProps"
        },
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "validations": {
        "defaultValue": null,
        "description": "Rules for returning an error when validations are violated.\nWARNING: This component needs to be nested inside a FormProvider\n  for validations to work.",
        "name": "validations",
        "parent": {
          "fileName": "packages/components-native/src/FormField/FormField.tsx",
          "name": "FormFieldProps"
        },
        "required": false,
        "type": {
          "name": "RegisterOptions"
        }
      }
    }
  }
]
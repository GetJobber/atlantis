[
  {
    "tags": {},
    "filePath": "../components/src/InputPhoneNumber/InputPhoneNumber.tsx",
    "description": "",
    "displayName": "InputPhoneNumber",
    "methods": [],
    "props": {
      "value": {
        "defaultValue": null,
        "description": "Set the component to the given value.",
        "name": "value",
        "parent": {
          "fileName": "../components/src/InputPhoneNumber/InputPhoneNumber.tsx",
          "name": "InputPhoneNumberProps"
        },
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "onChange handler that provides the new value (or event)",
        "name": "onChange",
        "parent": {
          "fileName": "../components/src/InputPhoneNumber/InputPhoneNumber.tsx",
          "name": "InputPhoneNumberProps"
        },
        "required": true,
        "type": {
          "name": "(value: string) => void"
        }
      },
      "pattern": {
        "defaultValue": {
          "value": "\"(***) ***-****\""
        },
        "description": "A pattern to specify the format to display the phone number in.\nFor example if you want to display the format for [Denmark](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers#Denmark)\nyou could set it to `** ** ** **`",
        "name": "pattern",
        "parent": {
          "fileName": "../components/src/InputPhoneNumber/InputPhoneNumber.tsx",
          "name": "InputPhoneNumberProps"
        },
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Shows a \"required\" validation message when the component is left empty.",
        "name": "required",
        "parent": {
          "fileName": "../components/src/InputPhoneNumber/InputPhoneNumber.tsx",
          "name": "InputPhoneNumberProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Further description of the input, can be used for a hint.",
        "name": "description",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disable the input",
        "name": "disabled",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "invalid": {
        "defaultValue": null,
        "description": "Highlights the field red to indicate an error.",
        "name": "invalid",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "inline": {
        "defaultValue": null,
        "description": "Adjusts the form field to go inline with a content. This also silences the\ngiven `validations` prop. You'd have to used the `onValidate` prop to\ncapture the message and render it somewhere else using the\n`InputValidation` component.",
        "name": "inline",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "Show a spinner to indicate loading",
        "name": "loading",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "Name of the input.",
        "name": "name",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onValidation": {
        "defaultValue": null,
        "description": "Callback to get the the status and message when validating a field\n@param message",
        "name": "onValidation",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "(message: string) => void"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "Hint text that goes above the value once the form is filled out.",
        "name": "placeholder",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Adjusts the interface to either have small or large spacing.",
        "name": "size",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "\"small\" | \"large\""
        }
      },
      "clearable": {
        "defaultValue": null,
        "description": "Add a clear action on the input that clears the value.\n\nYou should always use `while-editing` if you want the input to be\nclearable. if the input value isn't editable (i.e. `InputTime`) you can\nset it to `always`.",
        "name": "clearable",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "Clearable"
        }
      },
      "version": {
        "defaultValue": null,
        "description": "Experimental:\nDetermine which version of the FormField to use.\nRight now this isn't used but it will be used in the future\nto allow us to release new versions of our form inputs without breaking existing functionality",
        "name": "version",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "1"
        }
      },
      "autocomplete": {
        "defaultValue": null,
        "description": "Determines if browser form autocomplete is enabled.\nNote that \"one-time-code\" is experimental and should not be used without\nconsultation. \"address-line1\" and \"address-line2\" are\nused for billing address information.",
        "name": "autocomplete",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "FormFieldProps"
        },
        "required": false,
        "type": {
          "name": "boolean | AutocompleteTypes"
        }
      },
      "onEnter": {
        "defaultValue": null,
        "description": "A callback to handle \"Enter\" keypress. This will only run\nif Enter is the only key. Will not run if Shift or Control\nare being held.",
        "name": "onEnter",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "FormFieldProps"
        },
        "required": false,
        "type": {
          "name": "(event: KeyboardEvent<Element>) => void"
        }
      },
      "onFocus": {
        "defaultValue": null,
        "description": "Focus callback.",
        "name": "onFocus",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "FormFieldProps"
        },
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onBlur": {
        "defaultValue": null,
        "description": "Blur callback.",
        "name": "onBlur",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "FormFieldProps"
        },
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "validations": {
        "defaultValue": null,
        "description": "Show an error message above the field. This also\nhighlights the the field red if an error message shows up.",
        "name": "validations",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "FormFieldProps"
        },
        "required": false,
        "type": {
          "name": "RegisterOptions"
        }
      },
      "readonly": {
        "defaultValue": null,
        "description": "Prevents users from editing the value.",
        "name": "readonly",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "FormFieldProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "prefix": {
        "defaultValue": null,
        "description": "Adds a prefix label and icon to the field",
        "name": "prefix",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "FormFieldProps"
        },
        "required": false,
        "type": {
          "name": "Affix"
        }
      },
      "suffix": {
        "defaultValue": null,
        "description": "Adds a suffix label and icon with an optional action to the field",
        "name": "suffix",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "FormFieldProps"
        },
        "required": false,
        "type": {
          "name": "{ onClick: () => void; readonly ariaLabel: string; readonly icon: IconNames; readonly label?: string; } | { onClick?: never; ariaLabel?: never; readonly label?: string; readonly icon?: IconNames; }"
        }
      }
    }
  }
]
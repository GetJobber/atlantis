[{"tags":{},"filePath":"../components/src/Autocomplete/Autocomplete.tsx","description":"","displayName":"Autocomplete","methods":[],"props":{"inputRef":{"defaultValue":null,"description":"@deprecated Use `ref` instead.","name":"inputRef","parent":{"fileName":"../components/src/Autocomplete/Autocomplete.tsx","name":"AutocompleteProps"},"declarations":[{"fileName":"../components/src/Autocomplete/Autocomplete.tsx","name":"AutocompleteProps"}],"required":false,"type":{"name":"RefObject<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>"}},"initialOptions":{"defaultValue":null,"description":"Initial options to show when user first focuses the Autocomplete","name":"initialOptions","parent":{"fileName":"../components/src/Autocomplete/Autocomplete.tsx","name":"AutocompleteProps"},"declarations":[{"fileName":"../components/src/Autocomplete/Autocomplete.tsx","name":"AutocompleteProps"}],"required":false,"type":{"name":"{ [x: number]: GroupOption; length: number; toString: (() => string) & (() => string); toLocaleString: (() => string) & (() => string); pop: () => GroupOption; push: (...items: GroupOption[]) => number; ... 29 more ...; [Symbol.unscopables]: () => { ...; }; } | { ...; }"}},"value":{"defaultValue":null,"description":"Set Autocomplete value.","name":"value","parent":{"fileName":"../components/src/Autocomplete/Autocomplete.tsx","name":"AutocompleteProps"},"declarations":[{"fileName":"../components/src/Autocomplete/Autocomplete.tsx","name":"AutocompleteProps"}],"required":true,"type":{"name":"Option"}},"allowFreeForm":{"defaultValue":{"value":"true"},"description":"Allow the autocomplete to use values not from the drop down menu.","name":"allowFreeForm","parent":{"fileName":"../components/src/Autocomplete/Autocomplete.tsx","name":"AutocompleteProps"},"declarations":[{"fileName":"../components/src/Autocomplete/Autocomplete.tsx","name":"AutocompleteProps"}],"required":false,"type":{"name":"boolean"}},"debounce":{"defaultValue":{"value":"300"},"description":"Debounce in milliseconds for getOptions","name":"debounce","parent":{"fileName":"../components/src/Autocomplete/Autocomplete.tsx","name":"AutocompleteProps"},"declarations":[{"fileName":"../components/src/Autocomplete/Autocomplete.tsx","name":"AutocompleteProps"}],"required":false,"type":{"name":"number"}},"onChange":{"defaultValue":null,"description":"Simplified onChange handler that only provides the new value.\n@param newValue","name":"onChange","parent":{"fileName":"../components/src/Autocomplete/Autocomplete.tsx","name":"AutocompleteProps"},"declarations":[{"fileName":"../components/src/Autocomplete/Autocomplete.tsx","name":"AutocompleteProps"}],"required":true,"type":{"name":"(newValue?: Option) => void"}},"getOptions":{"defaultValue":null,"description":"Called as the user types in the input. The autocomplete will display what\nis returned from this method to the user as available options.\n@param newInputText","name":"getOptions","parent":{"fileName":"../components/src/Autocomplete/Autocomplete.tsx","name":"AutocompleteProps"},"declarations":[{"fileName":"../components/src/Autocomplete/Autocomplete.tsx","name":"AutocompleteProps"}],"required":true,"type":{"name":"(newInputText: string) => { [x: number]: GroupOption; length: number; toString: (() => string) & (() => string); toLocaleString: (() => string) & (() => string); pop: () => GroupOption; ... 30 more ...; [Symbol.unscopables]: () => { ...; }; } | { ...; } | Promise<...>"}},"placeholder":{"defaultValue":null,"description":"Hint text that goes above the value once the form is filled out.","name":"placeholder","parent":{"fileName":"../components/src/Autocomplete/Autocomplete.tsx","name":"AutocompleteProps"},"declarations":[{"fileName":"../components/src/Autocomplete/Autocomplete.tsx","name":"AutocompleteProps"}],"required":true,"type":{"name":"string"}},"invalid":{"defaultValue":null,"description":"Highlights the field red to indicate an error.","name":"invalid","parent":{"fileName":"packages/components/src/FormField/FormFieldTypes.ts","name":"CommonFormFieldProps"},"declarations":[{"fileName":"packages/components/src/FormField/FormFieldTypes.ts","name":"CommonFormFieldProps"}],"required":false,"type":{"name":"boolean"}},"name":{"defaultValue":null,"description":"Name of the input.","name":"name","parent":{"fileName":"packages/components/src/FormField/FormFieldTypes.ts","name":"CommonFormFieldProps"},"declarations":[{"fileName":"packages/components/src/FormField/FormFieldTypes.ts","name":"CommonFormFieldProps"}],"required":false,"type":{"name":"string"}},"onBlur":{"defaultValue":null,"description":"Blur callback.","name":"onBlur","parent":{"fileName":"packages/components/src/FormField/FormFieldTypes.ts","name":"FormFieldProps"},"declarations":[{"fileName":"packages/components/src/FormField/FormFieldTypes.ts","name":"FormFieldProps"}],"required":false,"type":{"name":"() => void"}},"onFocus":{"defaultValue":null,"description":"Focus callback.","name":"onFocus","parent":{"fileName":"packages/components/src/FormField/FormFieldTypes.ts","name":"FormFieldProps"},"declarations":[{"fileName":"packages/components/src/FormField/FormFieldTypes.ts","name":"FormFieldProps"}],"required":false,"type":{"name":"() => void"}},"prefix":{"defaultValue":null,"description":"Adds a prefix label and icon to the field","name":"prefix","parent":{"fileName":"packages/components/src/FormField/FormFieldTypes.ts","name":"FormFieldProps"},"declarations":[{"fileName":"packages/components/src/FormField/FormFieldTypes.ts","name":"FormFieldProps"}],"required":false,"type":{"name":"Affix"}},"size":{"defaultValue":null,"description":"Adjusts the interface to either have small or large spacing.","name":"size","parent":{"fileName":"packages/components/src/FormField/FormFieldTypes.ts","name":"CommonFormFieldProps"},"declarations":[{"fileName":"packages/components/src/FormField/FormFieldTypes.ts","name":"CommonFormFieldProps"}],"required":false,"type":{"name":"\"small\" | \"large\""}},"suffix":{"defaultValue":null,"description":"Adds a suffix label and icon with an optional action to the field","name":"suffix","parent":{"fileName":"packages/components/src/FormField/FormFieldTypes.ts","name":"FormFieldProps"},"declarations":[{"fileName":"packages/components/src/FormField/FormFieldTypes.ts","name":"FormFieldProps"}],"required":false,"type":{"name":"{ onClick: () => void; readonly ariaLabel: string; readonly icon: IconNames; readonly label?: string; } | { onClick?: never; ariaLabel?: never; readonly label?: string; readonly icon?: IconNames; }"}},"validations":{"defaultValue":null,"description":"Show an error message above the field. This also\nhighlights the the field red if an error message shows up.","name":"validations","parent":{"fileName":"packages/components/src/FormField/FormFieldTypes.ts","name":"FormFieldProps"},"declarations":[{"fileName":"packages/components/src/FormField/FormFieldTypes.ts","name":"FormFieldProps"}],"required":false,"type":{"name":"RegisterOptions<FieldValues, string>"}},"ref":{"defaultValue":null,"description":"","name":"ref","parent":{"fileName":"atlantis/node_modules/@types/react/index.d.ts","name":"RefAttributes"},"declarations":[{"fileName":"atlantis/node_modules/@types/react/index.d.ts","name":"RefAttributes"}],"required":false,"type":{"name":"Ref<InputTextRef>"}},"key":{"defaultValue":null,"description":"","name":"key","parent":{"fileName":"atlantis/node_modules/@types/react/index.d.ts","name":"Attributes"},"declarations":[{"fileName":"atlantis/node_modules/@types/react/index.d.ts","name":"Attributes"}],"required":false,"type":{"name":"Key"}}}}]
[
  {
    "tags": {},
    "filePath": "../components/src/Select/Select.rebuilt.tsx",
    "description": "",
    "displayName": "SelectRebuilt",
    "methods": [],
    "props": {
      "defaultValue": {
        "defaultValue": null,
        "description": "",
        "name": "defaultValue",
        "parent": {
          "fileName": "packages/components/src/Select/Select.types.ts",
          "name": "SelectRebuiltProps"
        },
        "required": false,
        "type": {
          "name": "never"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "parent": {
          "fileName": "packages/components/src/Select/Select.types.ts",
          "name": "SelectRebuiltProps"
        },
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "parent": {
          "fileName": "packages/components/src/Select/Select.types.ts",
          "name": "SelectRebuiltProps"
        },
        "required": false,
        "type": {
          "name": "(newValue?: string | number) => void"
        }
      },
      "version": {
        "defaultValue": null,
        "description": "",
        "name": "version",
        "parent": {
          "fileName": "packages/components/src/Select/Select.types.ts",
          "name": "SelectRebuiltProps"
        },
        "required": true,
        "type": {
          "name": "2"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "",
        "name": "error",
        "parent": {
          "fileName": "packages/components/src/Select/Select.types.ts",
          "name": "SelectRebuiltProps"
        },
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "UNSAFE_experimentalStyles": {
        "defaultValue": null,
        "description": "Opt-in to the customizable select UI (Chromium 123+).\nWhen true, the component will apply the custom select styles\nDefaults to false for native behavior.\nOnly supported by Select version={2}.",
        "name": "UNSAFE_experimentalStyles",
        "parent": {
          "fileName": "packages/components/src/Select/Select.types.ts",
          "name": "SelectRebuiltProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A unique identifier for the input.",
        "name": "id",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "align": {
        "defaultValue": null,
        "description": "Determines the alignment of the text inside the input.",
        "name": "align",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "\"center\" | \"right\""
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Further description of the input, can be used for a hint.",
        "name": "description",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disable the input",
        "name": "disabled",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "invalid": {
        "defaultValue": null,
        "description": "Highlights the field red to indicate an error.",
        "name": "invalid",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "inline": {
        "defaultValue": null,
        "description": "Adjusts the form field to go inline with a content. This also silences the\ngiven `validations` prop. You'd have to used the `onValidate` prop to\ncapture the message and render it somewhere else using the\n`InputValidation` component.",
        "name": "inline",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "Name of the input.",
        "name": "name",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "Text that appears inside the input when empty and floats above the value\nas a mini label once the user enters a value.\nWhen showMiniLabel is false, this text only serves as a standard placeholder and\ndisappears when the user types.",
        "name": "placeholder",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Adjusts the interface to either have small or large spacing.",
        "name": "size",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "\"small\" | \"large\""
        }
      },
      "autofocus": {
        "defaultValue": null,
        "description": "Determines if the input should be auto-focused, using the HTML attribute",
        "name": "autofocus",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "FormFieldProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onEnter": {
        "defaultValue": null,
        "description": "A callback to handle \"Enter\" keypress. This will only run\nif Enter is the only key. Will not run if Shift or Control\nare being held.",
        "name": "onEnter",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "FormFieldProps"
        },
        "required": false,
        "type": {
          "name": "(event: React.KeyboardEvent) => void"
        }
      },
      "onBlur": {
        "defaultValue": null,
        "description": "Blur callback.",
        "name": "onBlur",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "FormFieldProps"
        },
        "required": false,
        "type": {
          "name": "(event?: React.FocusEvent) => void"
        }
      },
      "onFocus": {
        "defaultValue": null,
        "description": "Focus callback.",
        "name": "onFocus",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "FormFieldProps"
        },
        "required": false,
        "type": {
          "name": "(event?: React.FocusEvent) => void"
        }
      },
      "inputRef": {
        "defaultValue": null,
        "description": "",
        "name": "inputRef",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "FormFieldProps"
        },
        "required": false,
        "type": {
          "name": "RefObject<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>"
        }
      },
      "wrapperRef": {
        "defaultValue": null,
        "description": "",
        "name": "wrapperRef",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "FormFieldProps"
        },
        "required": false,
        "type": {
          "name": "RefObject<HTMLDivElement>"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "If you need to pass in a children. For example, `<options>` inside\n`<select>`.",
        "name": "children",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "FormFieldProps"
        },
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "prefix": {
        "defaultValue": null,
        "description": "Adds a prefix label and icon to the field",
        "name": "prefix",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "FormFieldProps"
        },
        "required": false,
        "type": {
          "name": "Affix"
        }
      },
      "suffix": {
        "defaultValue": null,
        "description": "Adds a suffix label and icon with an optional action to the field",
        "name": "suffix",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "FormFieldProps"
        },
        "required": false,
        "type": {
          "name": "{ onClick: () => void; readonly ariaLabel: string; readonly icon: IconNames; readonly label?: string; } | { onClick?: never; ariaLabel?: never; readonly label?: string; readonly icon?: IconNames; }"
        }
      },
      "maxLength": {
        "defaultValue": null,
        "description": "Changes the width to roughly the same size as the maximum character length",
        "name": "maxLength",
        "parent": {
          "fileName": "packages/components/src/Select/Select.types.ts",
          "name": "SelectLegacyProps"
        },
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  }
]
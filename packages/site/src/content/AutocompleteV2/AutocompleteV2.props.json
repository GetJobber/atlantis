[
  {
    "tags": {},
    "filePath": "../components/src/Autocomplete/Autocomplete.rebuilt.tsx",
    "description": "",
    "displayName": "AutocompleteRebuilt",
    "methods": [],
    "props": {
      "version": {
        "defaultValue": null,
        "description": "",
        "name": "version",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": true,
        "type": {
          "name": "2"
        }
      },
      "multiple": {
        "defaultValue": null,
        "description": "Whether the autocomplete allows multiple selections.\nWARNING: This is currently incomplete and will not display selections, only data is returned.\nDo not use this prop unless you are sure you know what you are doing.",
        "name": "multiple",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "The currently selected value of the Autocomplete.\nSingle-select: undefined indicates no selection",
        "name": "value",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": true,
        "type": {
          "name": "Value[] | OptionLike"
        }
      },
      "inputValue": {
        "defaultValue": null,
        "description": "The current input value of the Autocomplete.",
        "name": "inputValue",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "onInputChange": {
        "defaultValue": null,
        "description": "Callback invoked when the input value changes.",
        "name": "onInputChange",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": true,
        "type": {
          "name": "(value: string) => void"
        }
      },
      "onBlur": {
        "defaultValue": null,
        "description": "Callback invoked when the input is blurred.",
        "name": "onBlur",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onFocus": {
        "defaultValue": null,
        "description": "Callback invoked when the input is focused.",
        "name": "onFocus",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "inputEqualsOption": {
        "defaultValue": null,
        "description": "Custom equality for input text to option mapping.\nDefaults to case-sensitive label equality via getOptionLabel.",
        "name": "inputEqualsOption",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "(input: string, option: Value) => boolean"
        }
      },
      "menu": {
        "defaultValue": null,
        "description": "Data structure for the menu.\nObserves a data hierarchy to determine elements, order, and grouping.\nAccepts Sections, Options as top level objects in the array.\nActions may appear in both sections and options.",
        "name": "menu",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": true,
        "type": {
          "name": "MenuItem<Value, ExtraProps, ExtraProps>[]"
        }
      },
      "filterOptions": {
        "defaultValue": null,
        "description": "Controls how options are filtered in response to the current input value.\n- Omit to use the default case-insensitive substring match against labels using getOptionLabel\n- Provide a function to implement custom filtering logic\n- Set to `false` to opt out of filtering entirely (useful for async options)",
        "name": "filterOptions",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "false | ((options: Value[], inputValue: string) => Value[])"
        }
      },
      "getOptionLabel": {
        "defaultValue": null,
        "description": "Used to determine the label for a given option, useful for custom data for options.\nDefaults to  option.label.",
        "name": "getOptionLabel",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "(option: Value) => string"
        }
      },
      "debounce": {
        "defaultValue": {
          "value": "300"
        },
        "description": "Debounce in milliseconds for input-driven filtering and search render.\nSet to 0 to disable debouncing.",
        "name": "debounce",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "customRenderOption": {
        "defaultValue": null,
        "description": "Render prop to customize the rendering of an option.\n@param args.value - The option value including all extra keys from the menu item\n@param args.isActive - Whether the option is currently highlighted/active\n@param args.isSelected - Whether the option is currently selected",
        "name": "customRenderOption",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "(args: { value: Value; isActive: boolean; isSelected: boolean; }) => ReactNode"
        }
      },
      "customRenderSection": {
        "defaultValue": null,
        "description": "Render prop to customize the rendering of a section.\n@param args.section - The section value including all extra keys from the menu item",
        "name": "customRenderSection",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "(section: MenuSection<Value, ExtraProps, ExtraProps>) => ReactNode"
        }
      },
      "customRenderAction": {
        "defaultValue": null,
        "description": "Render prop to customize the rendering of an action.\n@param args.value - The action value including all extra keys from the menu item\n@param args.isActive - Whether the action is currently highlighted/active\n@param args.origin - The origin of the action (\"menu\" or \"empty\")",
        "name": "customRenderAction",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "(args: { value: MenuAction<ExtraProps>; isActive: boolean; origin?: ActionOrigin; }) => ReactNode"
        }
      },
      "customRenderHeader": {
        "defaultValue": null,
        "description": "Render prop to customize the rendering of header items.",
        "name": "customRenderHeader",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "(args: { value: MenuHeader<ExtraProps>; isActive?: boolean; }) => ReactNode"
        }
      },
      "customRenderFooter": {
        "defaultValue": null,
        "description": "Render prop to customize the rendering of footer items.",
        "name": "customRenderFooter",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "(args: { value: MenuFooter<ExtraProps>; isActive?: boolean; }) => ReactNode"
        }
      },
      "customRenderInput": {
        "defaultValue": null,
        "description": "Render prop to customize the rendering of the input.\n@param props.inputRef - The ref to the input element\n@param props.inputProps - The props to pass to the input element\nNote that you must pass the inputRef to the input",
        "name": "customRenderInput",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "(props: { inputRef: Ref<HTMLInputElement | HTMLTextAreaElement>; inputProps: InputTextRebuiltProps; }) => ReactNode"
        }
      },
      "UNSAFE_className": {
        "defaultValue": null,
        "description": "**Use at your own risk:** Custom class names for specific elements. This should only be used as a\n**last resort**. Using this may result in unexpected side effects.\nMore information in the [Customizing components Guide](https://atlantis.getjobber.com/guides/customizing-components).",
        "name": "UNSAFE_className",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "{ menu?: string; option?: string; section?: string; action?: string; input?: string; header?: string; footer?: string; }"
        }
      },
      "UNSAFE_styles": {
        "defaultValue": null,
        "description": "**Use at your own risk:** Custom style for specific elements. This should only be used as a\n**last resort**. Using this may result in unexpected side effects.\nMore information in the [Customizing components Guide](https://atlantis.getjobber.com/guides/customizing-components).",
        "name": "UNSAFE_styles",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "{ menu?: CSSProperties; option?: CSSProperties; section?: CSSProperties; action?: CSSProperties; input?: CSSProperties; header?: CSSProperties; footer?: CSSProperties; }"
        }
      },
      "emptyStateMessage": {
        "defaultValue": {
          "value": "string \"No options\""
        },
        "description": "Render a custom empty state when the menu is empty.\nNOTE: Do not put interactive elements in the empty state, it will break accessibility.\nIf you require interactive elements in the empty state, use the `emptyActions` prop.\nTo opt out of the default empty state message entirely use \"false\".",
        "name": "emptyStateMessage",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "emptyActions": {
        "defaultValue": null,
        "description": "Actions to display when there are no options to render after filtering.\nCan be a static list or a function that derives actions from the current input value.\nWhen provided and options are empty, these are rendered as navigable actions. Compatible with or without `emptyStateMessage`.",
        "name": "emptyActions",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "MenuAction<ExtraProps>[] | ((args: { inputValue: string; }) => MenuAction<ExtraProps>[])"
        }
      },
      "openOnFocus": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether the menu should open when the input gains focus.",
        "name": "openOnFocus",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "The placeholder text for the input.",
        "name": "placeholder",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the input is disabled.",
        "name": "disabled",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Error message to display below the input\nWhen present, invalid appearance applied to the input",
        "name": "error",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "invalid": {
        "defaultValue": null,
        "description": "Whether the input is invalid. Receives invalid appearance.",
        "name": "invalid",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "readOnly": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether the input is read-only.",
        "name": "readOnly",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Description to display below the input",
        "name": "description",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "Name of the input for form submission",
        "name": "name",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Size of the input",
        "name": "size",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "\"small\" | \"large\""
        }
      },
      "suffix": {
        "defaultValue": null,
        "description": "",
        "name": "suffix",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "{ onClick: () => void; readonly ariaLabel: string; readonly icon: IconNames; readonly label?: string; } | { onClick?: never; ariaLabel?: never; readonly label?: string; readonly icon?: IconNames; }"
        }
      },
      "prefix": {
        "defaultValue": null,
        "description": "",
        "name": "prefix",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "Affix"
        }
      },
      "onOpen": {
        "defaultValue": null,
        "description": "Callback invoked when the menu opens.",
        "name": "onOpen",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Callback invoked when the menu closes.",
        "name": "onClose",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "Whether the menu is loading.\nDisplays glimmers in the menu",
        "name": "loading",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "customRenderLoading": {
        "defaultValue": null,
        "description": "Custom render prop for content to render when `loading` is true.",
        "name": "customRenderLoading",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "isOptionEqualToValue": {
        "defaultValue": null,
        "description": "Custom equality for option to value mapping.",
        "name": "isOptionEqualToValue",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "AutocompleteRebuiltBaseProps"
        },
        "required": false,
        "type": {
          "name": "(option: Value, value: Value) => boolean"
        }
      },
      "allowFreeForm": {
        "defaultValue": null,
        "description": "Whether the autocomplete allows free-form input.\nWhen true, the input value is not restricted to the options * in the menu. Input can be used to create a new value.\nWhen false, the input value must match an option in the menu.\nInput value will be cleared if no selection is made and\nWhether the autocomplete allows free-form input.\nWhen true, the input value is not restricted to the options in the menu. Input can be used to create a new value.\nWhen false, the input value must match an option in the menu.\nInput value will be cleared if no selection is made and focus is lost.\nWhether the autocomplete allows free-form input.\nWhen true, the input value is not restricted to the options in the menu. Input can be used to create a new value.\nWhen false, the input value must match an option in the menu.\nInput value will be cleared if no selection is made and focus is lost.",
        "name": "allowFreeForm",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "FreeFormOn"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "createFreeFormValue": {
        "defaultValue": null,
        "description": "Factory used to create a Value from free-form input when committing. Necessary with complex option values. The only value the input can produce is a string.\n@param input - The input value",
        "name": "createFreeFormValue",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "FreeFormOn"
        },
        "required": true,
        "type": {
          "name": "(input: string) => Value"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Callback invoked when the selection value changes.\nThis is called when we consider a selection \"committed\"\n- The user presses enter\n- The user clicks outside the menu with a selection typed\n- The user clicks the clear button\nThe user clears a previous selection by deleting the input value\n- The user selects an option with click or enter\n- The user types a value that matches an option\n- The user types a value that does not match an option and allowFreeForm is true\nCallback invoked when the selection value changes.",
        "name": "onChange",
        "parent": {
          "fileName": "packages/components/src/Autocomplete/Autocomplete.types.ts",
          "name": "FreeFormOn"
        },
        "required": true,
        "type": {
          "name": "((value: AutocompleteValue<Value, Multiple>) => void) | ((value: AutocompleteValue<Value, Multiple>) => void)"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "required": false,
        "type": {
          "name": "Ref<HTMLInputElement | HTMLTextAreaElement>"
        }
      }
    }
  }
]
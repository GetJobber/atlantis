[
  {
    "tags": {},
    "filePath": "packages/components/src/InputNumber/InputNumber.rebuilt.tsx",
    "description": "",
    "displayName": "InputNumberRebuilt",
    "methods": [],
    "props": {
      "align": {
        "defaultValue": null,
        "description": "Determines the alignment of the text inside the input.",
        "name": "align",
        "parent": {
          "fileName": "packages/components/src/InputNumber/InputNumber.rebuilt.types.tsx",
          "name": "InputNumberRebuiltProps"
        },
        "required": false,
        "type": {
          "name": "\"center\" | \"right\""
        }
      },
      "autocomplete": {
        "defaultValue": null,
        "description": "",
        "name": "autocomplete",
        "parent": {
          "fileName": "packages/components/src/InputNumber/InputNumber.rebuilt.types.tsx",
          "name": "InputNumberRebuiltProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "autoFocus": {
        "defaultValue": null,
        "description": "",
        "name": "autoFocus",
        "parent": {
          "fileName": "packages/components/src/InputNumber/InputNumber.rebuilt.types.tsx",
          "name": "InputNumberRebuiltProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "clearable": {
        "defaultValue": null,
        "description": "Add a clear action on the input that clears the value.\n\nYou should always use `while-editing` if you want the input to be\nclearable. if the input value isn't editable (i.e. `InputTime`) you can\nset it to `always`.",
        "name": "clearable",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "Clearable"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "",
        "name": "defaultValue",
        "parent": {
          "fileName": "packages/components/src/InputNumber/InputNumber.rebuilt.types.tsx",
          "name": "InputNumberRebuiltProps"
        },
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Further description of the input, can be used for a hint.",
        "name": "description",
        "parent": {
          "fileName": "packages/components/src/InputNumber/InputNumber.rebuilt.types.tsx",
          "name": "InputNumberRebuiltProps"
        },
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disable the input",
        "name": "disabled",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "",
        "name": "error",
        "parent": {
          "fileName": "packages/components/src/InputNumber/InputNumber.rebuilt.types.tsx",
          "name": "InputNumberRebuiltProps"
        },
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "formatOptions": {
        "defaultValue": null,
        "description": "",
        "name": "formatOptions",
        "parent": {
          "fileName": "packages/components/src/InputNumber/InputNumber.rebuilt.types.tsx",
          "name": "InputNumberRebuiltProps"
        },
        "required": false,
        "type": {
          "name": "NumberFormatOptions"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A unique identifier for the input.",
        "name": "id",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "identifier": {
        "defaultValue": null,
        "description": "",
        "name": "identifier",
        "parent": {
          "fileName": "packages/components/src/InputNumber/InputNumber.rebuilt.types.tsx",
          "name": "InputNumberRebuiltProps"
        },
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inline": {
        "defaultValue": null,
        "description": "Adjusts the form field to go inline with a content. This also silences the\ngiven `validations` prop. You'd have to used the `onValidate` prop to\ncapture the message and render it somewhere else using the\n`InputValidation` component.",
        "name": "inline",
        "parent": {
          "fileName": "packages/components/src/InputNumber/InputNumber.rebuilt.types.tsx",
          "name": "InputNumberRebuiltProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "inputRef": {
        "defaultValue": null,
        "description": "",
        "name": "inputRef",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "FormFieldProps"
        },
        "required": false,
        "type": {
          "name": "RefObject<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>"
        }
      },
      "invalid": {
        "defaultValue": null,
        "description": "Highlights the field red to indicate an error.",
        "name": "invalid",
        "parent": {
          "fileName": "packages/components/src/InputNumber/InputNumber.rebuilt.types.tsx",
          "name": "InputNumberRebuiltProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "Show a spinner to indicate loading",
        "name": "loading",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "maxValue": {
        "defaultValue": null,
        "description": "",
        "name": "maxValue",
        "parent": {
          "fileName": "packages/components/src/InputNumber/InputNumber.rebuilt.types.tsx",
          "name": "InputNumberRebuiltProps"
        },
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "minValue": {
        "defaultValue": null,
        "description": "",
        "name": "minValue",
        "parent": {
          "fileName": "packages/components/src/InputNumber/InputNumber.rebuilt.types.tsx",
          "name": "InputNumberRebuiltProps"
        },
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "Name of the input.",
        "name": "name",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onBlur": {
        "defaultValue": null,
        "description": "Blur callback.",
        "name": "onBlur",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "FormFieldProps"
        },
        "required": false,
        "type": {
          "name": "((event?: FocusEvent<Element, Element>) => void)"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "onChange handler that provides the new value (or event)",
        "name": "onChange",
        "parent": {
          "fileName": "packages/components/src/InputNumber/InputNumber.rebuilt.types.tsx",
          "name": "InputNumberRebuiltProps"
        },
        "required": false,
        "type": {
          "name": "((newValue: number, event?: ChangeEvent<HTMLInputElement>) => void)"
        }
      },
      "onFocus": {
        "defaultValue": null,
        "description": "Focus callback.",
        "name": "onFocus",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "FormFieldProps"
        },
        "required": false,
        "type": {
          "name": "((event?: FocusEvent<Element, Element>) => void)"
        }
      },
      "onValidation": {
        "defaultValue": null,
        "description": "Callback to get the the status and message when validating a field\n@param message",
        "name": "onValidation",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "((message: string) => void)"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "Text that appears inside the input when empty and floats above the value\nas a mini label once the user enters a value.\nWhen showMiniLabel is false, this text only serves as a standard placeholder and\ndisappears when the user types.",
        "name": "placeholder",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "readonly": {
        "defaultValue": null,
        "description": "Prevents users from editing the value.",
        "name": "readonly",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "FormFieldProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null`\n(or call the ref with `null` if you passed a callback ref).\n@see {@link https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom React Docs}",
        "name": "ref",
        "parent": {
          "fileName": "atlantis/node_modules/@types/react/index.d.ts",
          "name": "RefAttributes"
        },
        "required": false,
        "type": {
          "name": "LegacyRef<InputNumberRebuiltRef>"
        }
      },
      "showMiniLabel": {
        "defaultValue": null,
        "description": "Controls the visibility of the mini label that appears inside the input\nwhen a value is entered. By default, the placeholder text moves up to\nbecome a mini label. Set to false to disable this behavior.",
        "name": "showMiniLabel",
        "parent": {
          "fileName": "packages/components/src/InputNumber/InputNumber.rebuilt.types.tsx",
          "name": "InputNumberRebuiltProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Adjusts the interface to either have small or large spacing.",
        "name": "size",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "\"small\" | \"large\""
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Set the component to the given value.",
        "name": "value",
        "parent": {
          "fileName": "packages/components/src/InputNumber/InputNumber.rebuilt.types.tsx",
          "name": "InputNumberRebuiltProps"
        },
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "version": {
        "defaultValue": null,
        "description": "Version 2 is highly experimental. Avoid using it unless you have talked with Atlantis first.",
        "name": "version",
        "parent": {
          "fileName": "packages/components/src/InputNumber/InputNumber.rebuilt.types.tsx",
          "name": "InputNumberRebuiltProps"
        },
        "required": true,
        "type": {
          "name": "2"
        }
      }
    }
  }
]
[
  {
    "tags": {},
    "filePath": "../components/src/InputEmail/InputEmail.tsx",
    "description": "",
    "displayName": "InputEmail",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "A unique identifier for the input.",
        "name": "id",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "align": {
        "defaultValue": null,
        "description": "Determines the alignment of the text inside the input.",
        "name": "align",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "\"center\" | \"right\""
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Further description of the input, can be used for a hint.",
        "name": "description",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "string | ReactElement<any, string | JSXElementConstructor<any>>"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disable the input",
        "name": "disabled",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "showMiniLabel": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Controls the visibility of the mini label that appears inside the input\nwhen a value is entered. By default, the placeholder text moves up to\nbecome a mini label. Set to false to disable this behavior.",
        "name": "showMiniLabel",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "invalid": {
        "defaultValue": null,
        "description": "Highlights the field red to indicate an error.",
        "name": "invalid",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "inline": {
        "defaultValue": null,
        "description": "Adjusts the form field to go inline with a content. This also silences the\ngiven `validations` prop. You'd have to used the `onValidate` prop to\ncapture the message and render it somewhere else using the\n`InputValidation` component.",
        "name": "inline",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "Show a spinner to indicate loading",
        "name": "loading",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "Name of the input.",
        "name": "name",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "onChange handler that provides the new value (or event)\n@param newValue\n@param event",
        "name": "onChange",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "(newValue: string | number | boolean | Date, event?: ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void"
        }
      },
      "onValidation": {
        "defaultValue": null,
        "description": "Callback to get the the status and message when validating a field\n@param message",
        "name": "onValidation",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "(message: string) => void"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "Text that appears inside the input when empty and floats above the value\nas a mini label once the user enters a value.\nWhen showMiniLabel is false, this text only serves as a standard placeholder and\ndisappears when the user types.",
        "name": "placeholder",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Adjusts the interface to either have small or large spacing.",
        "name": "size",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "\"small\" | \"large\""
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Set the component to the given value.",
        "name": "value",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "string | number | Date"
        }
      },
      "clearable": {
        "defaultValue": null,
        "description": "Add a clear action on the input that clears the value.\n\nYou should always use `while-editing` if you want the input to be\nclearable. if the input value isn't editable (i.e. `InputTime`) you can\nset it to `always`.",
        "name": "clearable",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "Clearable"
        }
      },
      "version": {
        "defaultValue": null,
        "description": "Experimental:\nDetermine which version of the FormField to use.\nRight now this isn't used but it will be used in the future\nto allow us to release new versions of our form inputs without breaking existing functionality.",
        "name": "version",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "CommonFormFieldProps"
        },
        "required": false,
        "type": {
          "name": "1"
        }
      },
      "maxLength": {
        "defaultValue": null,
        "description": "Maximum character length for an input. This also changes the width to\nroughly the same size as the max length. This is to communicate that the\nuser that on certain cases, they can only type a limited amount of\ncharacters.",
        "name": "maxLength",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "FormFieldProps"
        },
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "readonly": {
        "defaultValue": null,
        "description": "Prevents users from editing the value.",
        "name": "readonly",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "FormFieldProps"
        },
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "validations": {
        "defaultValue": null,
        "description": "Show an error message above the field. This also\nhighlights the the field red if an error message shows up.",
        "name": "validations",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "FormFieldProps"
        },
        "required": false,
        "type": {
          "name": "RegisterOptions"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "Initial value of the input. Only use this when you need to pre-populate\nthe field with a data that is not controlled by the components state. If a\nstate is controlling the value, use the `value` prop instead.",
        "name": "defaultValue",
        "parent": {
          "fileName": "packages/components/src/FormField/FormFieldTypes.ts",
          "name": "FormFieldProps"
        },
        "required": false,
        "type": {
          "name": "string | Date"
        }
      }
    }
  }
]
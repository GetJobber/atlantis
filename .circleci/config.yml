# prettier-ignore

version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.1
  aws-s3: circleci/aws-s3@1.0.8

references:
  container_config: &container_config
    docker:
      - image: cimg/node:22.11.0
    working_directory: ~/atlantis

  restore_repo: &restore_repo
    restore_cache:
      keys:
        - v1-repo-{{ .Branch }}-{{ .Revision }}
        - v1-repo-{{ .Branch }}
        - v1-repo

  restore_npm_cache: &restore_npm_cache
    restore_cache:
      name: Restore npm cache
      keys:
        - npm-cache-v1

  restore_nx_cache: &restore_nx_cache
    restore_cache:
      name: Restore NX cache
      key: nx-cache-v10-{{ .Branch }}-



  attach_workspace: &attach_workspace
    attach_workspace:
        at: .

  persist_to_workspace: &persist_to_workspace
    persist_to_workspace:
      root: .
      paths:
        - '*'

  persist_nx_cache_only: &persist_nx_cache_only
    persist_to_workspace:
      root: .
      paths:
        - .nx/cache

  save_nx_cache: &save_nx_cache
    save_cache:
      name: Save NX cache
      key: nx-cache-v10-{{ .Branch }}-{{ epoch }}
      paths:
        - .nx/cache

  npm_install: &npm_install
    run:
      name: Install Dependencies
      command: npm ci

  check_git_status: &check_git_status
    run:
      name: Check for uncommitted files
      command: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "Found uncommitted changes which is unexpected. This likely means you forgot to commit generated files."
          echo "Here's the diff:"
          git status
          echo "If the diff includes *.props.json files, run 'npm run generate' inside packages/site, review and commit the changes."
          exit 1
        else
          echo "No uncommitted changes."
          git status
        fi

  github_authenticity: &github_authenticity
    run:
      name: Establishing GitHub Authenticity
      command: mkdir -p ~/.ssh; echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=' >> ~/.ssh/known_hosts

  generate_base_path: &generate_base_path
    run:
      name: Generate S3 Path
      command: |
        echo 'export PULL_REQUEST_NUMBER=$(basename "${CIRCLE_PULL_REQUEST}")' >> $BASH_ENV
        echo 'export BASE_PATH=${PULL_REQUEST_NUMBER:-${CIRCLE_BRANCH}}' >> $BASH_ENV

  playwright_config: &playwright_config
    docker:
      - image: mcr.microsoft.com/playwright:v1.52.0-noble
    working_directory: ~/atlantis

jobs:
  checkout_code:
    <<: *container_config
    steps:
      - *restore_repo
      - checkout
      - *persist_to_workspace
      - save_cache:
          key: v1-repo-{{ .Branch }}-{{ .Revision }}
          paths:
            - .

  install_dependencies:
    <<: *container_config
    steps:
      - *attach_workspace
      - *restore_nx_cache
      - *restore_npm_cache
      - run:
          name: Authenticate with npm
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/atlantis/.npmrc
      - *npm_install
      - *persist_to_workspace

  check_for_manual_release:
    <<: *container_config
    steps:
      - *attach_workspace
      - run:
          name: Check for manual releases
          command: |
            set -e
            if git log --max-count=1 --pretty=%s | grep -q "chore(release): Publish"; then
              echo "Skipping run on release commit."
            elif git log --max-count=1 --pretty=%s | grep -q "chore(release): Manual release"; then
              echo "Skipping run on manual release commit."
            else
              npm run preventManualRelease
            fi

  lint_javascript:
    <<: *container_config
    steps:
      - *attach_workspace
      - run: npm run lint:js -- --quiet --format junit -o reports/junit/js-lint-results.xml
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

  lint_css:
    <<: *container_config
    steps:
      - *attach_workspace
      - run: mkdir -p reports/junit
      - run: npm run lint:css -- --custom-formatter node_modules/stylelint-junit-formatter/index.js > reports/junit/css-lint-results.xml
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

  test:
    <<: *container_config
    steps:
      - *attach_workspace
      - run:
          name: "Run tests with jest"
          command:
            npm run test:affected
          environment:
            JEST_JUNIT_OUTPUT_DIR: "reports/junit/"
            JEST_JUNIT_OUTPUT_NAME: "js-test-results.xml"
            JEST_JUNIT_ADD_FILE_ATTRIBUTE: "true"
            JEST_JUNIT_SUITE_NAME: "{displayName} {title}"
      - *persist_nx_cache_only
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit
      - store_artifacts:
          path: coverage

  build_all:
    resource_class: medium+
    <<: *container_config
    steps:
      - *attach_workspace
      - run:
          name: Debug NX Output Restoration
          command: |
            echo "=== Checking for dist folders before build ==="
            echo "packages/components/dist exists: $(test -d packages/components/dist && echo 'YES' || echo 'NO')"
            echo "packages/components-native/dist exists: $(test -d packages/components-native/dist && echo 'YES' || echo 'NO')"
            echo "packages/hooks/dist exists: $(test -d packages/hooks/dist && echo 'YES' || echo 'NO')"
            echo "packages/design/dist exists: $(test -d packages/design/dist && echo 'YES' || echo 'NO')"
            echo "packages/formatters/dist exists: $(test -d packages/formatters/dist && echo 'YES' || echo 'NO')"
            
            if [ -d packages/components/dist ]; then
              echo "packages/components/dist contents:"
              ls -la packages/components/dist/
            fi
            
            if [ -d packages/components-native/dist ]; then
              echo "packages/components-native/dist contents:"
              ls -la packages/components-native/dist/
            fi
            
            echo "=== NX Cache Status ==="
            npx nx show projects --affected || echo "No affected projects"
            
            echo "=== Checking NX cache for outputs ==="
            if [ -d .nx/cache ]; then
              echo "Looking for cached outputs..."
              find .nx/cache -name "*.json" -exec grep -l "dist" {} \; | head -5
            fi
      - run:
          name: Debug NX Cache Contents
          command: |
            echo "=== NX Cache Debug Info ==="
            echo "Current directory: $(pwd)"
            echo "NX cache directory exists: $(test -d .nx/cache && echo 'YES' || echo 'NO')"
            if [ -d .nx/cache ]; then
              echo "NX cache directory size: $(du -sh .nx/cache)"
              echo "NX cache contents:"
              find .nx/cache -type f -name "*.json" | head -10
              echo "Recent cache entries (last 5):"
              find .nx/cache -type d -name "[0-9]*" | sort | tail -5
              echo "NX cache structure:"
              tree .nx/cache -L 2 || ls -la .nx/cache
              
              # General check for many cache entries
              CACHE_ENTRIES=$(find .nx/cache -type d -name "[0-9]*" | wc -l)
              echo "Number of cache entries: $CACHE_ENTRIES"
              if [ "$CACHE_ENTRIES" -gt 10 ]; then
                echo "WARNING: Many cache entries detected. Consider cache cleanup if builds are slow."
              fi
            fi
            echo "Node modules cache exists: $(test -d node_modules/.cache && echo 'YES' || echo 'NO')"
            if [ -d node_modules/.cache ]; then
              echo "Node modules cache size: $(du -sh node_modules/.cache)"
            fi
            echo "=== End Debug Info ==="
      - *generate_base_path
      - run:
          name: Build Storybook with NX
          command: |
            echo "=== Starting Storybook Build ==="
            echo "Running: npm run storybook:build"
            echo "This should use NX caching if available..."
            
            # Show NX cache status before build
            echo "=== NX Cache Status Before Build ==="
            npx nx show projects --affected || echo "No affected projects or NX not available"
            echo "=== End NX Cache Status ==="
            
            # Run the build and capture output
            if npm run storybook:build; then
              echo "=== Storybook Build Complete ==="
            else
              echo "=== Build Failed ==="
              echo "Checking for TypeScript compilation errors..."
              
              # Check if the error is related to type conflicts by running again and checking output
              if npm run storybook:build 2>&1 | grep -q "All declarations of.*must have identical type parameters\|Interface.*incorrectly extends interface"; then
                echo "TypeScript compilation error detected. Clearing NX cache and retrying..."
                rm -rf .nx/cache
                echo "Cache cleared. Retrying build..."
                npm run storybook:build
              else
                echo "Build failed for other reasons. Exiting."
                exit 1
              fi
            fi
      - run:
          name: Build Site with NX
          command: |
            echo "=== Starting Site Build ==="
            echo "Running: npm run site:build"
            echo "This should use NX caching if available..."
            
            # Show NX cache status before build
            echo "=== NX Cache Status Before Build ==="
            npx nx show projects --affected || echo "No affected projects or NX not available"
            echo "=== End NX Cache Status ==="
            
            # Run the build and capture output
            if npm run site:build; then
              echo "=== Site Build Complete ==="
            else
              echo "=== Build Failed ==="
              echo "Checking for TypeScript compilation errors..."
              
              # Check if the error is related to type conflicts by running again and checking output
              if npm run site:build 2>&1 | grep -q "All declarations of.*must have identical type parameters\|Interface.*incorrectly extends interface"; then
                echo "TypeScript compilation error detected. Clearing NX cache and retrying..."
                rm -rf .nx/cache
                echo "Cache cleared. Retrying build..."
                npm run site:build
              else
                echo "Build failed for other reasons. Exiting."
                exit 1
              fi
            fi
      - run:
          name: Debug NX Cache After Build
          command: |
            echo "=== NX Cache After Build ==="
            echo "NX cache directory size after build: $(du -sh .nx/cache)"
            echo "Recent cache entries:"
            find .nx/cache -type f -name "*.json" -newer .nx/cache | head -5
            echo "=== End Debug Info ==="
      - *persist_nx_cache_only
      - *check_git_status

  release:
    <<: *container_config
    steps:
      - *attach_workspace
      - *github_authenticity
      - add_ssh_keys:
          fingerprints:
            - "0a:70:b5:5e:87:c1:05:50:cc:54:c6:59:3b:43:77:63"
      - run:
          name: Release Packages
          command: |
            if git log --max-count=1 --pretty=%s | grep -q "chore(release): Publish"; then
              echo "Skipping run on release commit."
            else
              npm run ci:release
            fi

  e2e_tests:
    <<: *playwright_config
    resource_class: medium
    steps:
      - *attach_workspace
      - run:
          name: Start dev server for e2e tests
          command: cd packages/site && npm run dev
          background: true
      - run:
          name: Wait for dev server to be ready
          command: |
            timeout=60
            counter=0
            until $(curl --output /dev/null --silent --head --fail http://localhost:5173); do
              if [ $counter -gt $timeout ]; then
                echo "ERROR: Timed out waiting for server to start"
                exit 1
              fi
              echo "Waiting for server to be ready..."
              sleep 1
              counter=$((counter+1))
            done
      - run:
          name: Run Playwright tests
          command: cd packages/site && npm run test:visual:ci
          env:
            CI: 'true'
      - store_test_results:
          path: packages/site/playwright-report
      - store_artifacts:
          path: packages/site/playwright-report
      - store_artifacts:
          path: packages/site/test-results

  save_nx_cache:
    <<: *container_config
    steps:
      - *attach_workspace
      - *save_nx_cache

workflows:
  version: 2

  atlantis:
    jobs:
      - checkout_code
      - install_dependencies:
          requires:
            - checkout_code
      - check_for_manual_release:
          requires:
            - install_dependencies
      - lint_javascript:
          requires:
            - install_dependencies
      - lint_css:
          requires:
            - install_dependencies
      - test:
          requires:
            - install_dependencies
      - build_all:
          requires:
            - install_dependencies
      - e2e_tests:
          requires:
            - install_dependencies
      - save_nx_cache:
          requires:
            - build_all
      - release:
          filters:
            branches:
              only: "master"
          requires:
            - lint_javascript
            - lint_css
            - test
            - build_all
            - e2e_tests

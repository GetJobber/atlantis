{"expireTime":9007200931831382000,"key":"gatsby-plugin-mdx-entire-payload-6398b7f9f2d5c8f9d084cfdc3ab6cfd4-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":114,"offset":115},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":117},"end":{"line":5,"column":29,"offset":145},"indent":[]}},{"type":"import","value":"import { Playground, Props } from \"docz\";\nimport { ComponentStatus } from \"@jobber/docx\";\nimport { useState } from \"react\";\nimport { Modal } from \".\";\nimport { Button } from \"@jobber/components/Button\";\nimport { Content } from \"@jobber/components/Content\";\nimport { InputText } from \"@jobber/components/InputText\";\nimport { Text } from \"@jobber/components/Text\";","position":{"start":{"line":8,"column":1,"offset":148},"end":{"line":15,"column":48,"offset":510},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Modal","position":{"start":{"line":17,"column":3,"offset":514},"end":{"line":17,"column":8,"offset":519},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":512},"end":{"line":17,"column":8,"offset":519},"indent":[]}},{"type":"jsx","value":"<ComponentStatus stage=\"ready\" responsive=\"yes\" accessible=\"yes\" />","position":{"start":{"line":19,"column":1,"offset":521},"end":{"line":19,"column":68,"offset":588},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Modals are overlays that allow users to view, edit, or show informations that\ndoesn't require a page to be built. It also prevent users from interacting with\nthe rest of the application until a specific action is taken.","position":{"start":{"line":21,"column":1,"offset":590},"end":{"line":23,"column":62,"offset":809},"indent":[1,1]}}],"position":{"start":{"line":21,"column":1,"offset":590},"end":{"line":23,"column":62,"offset":809},"indent":[1,1]}},{"type":"code","lang":"ts","meta":null,"value":"import { Modal } from \"@jobber/components/Modal\";","position":{"start":{"line":25,"column":1,"offset":811},"end":{"line":27,"column":4,"offset":870},"indent":[1,1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const [modalOpen, setModalOpen] = useState(false);\n    return (\n      <>\n        <Modal\n          title=\"We've updated Jobber\"\n          open={modalOpen}\n          onRequestClose={() => setModalOpen(false)}\n        >\n          <Content>\n            <Text>It's harder, better, faster, and stronger! ü§ñ</Text>\n          </Content>\n        </Modal>\n        <Button label=\"Open Modal\" onClick={() => setModalOpen(true)} />\n      </>\n    );\n  }}\n</Playground>","position":{"start":{"line":29,"column":1,"offset":872},"end":{"line":47,"column":14,"offset":1354},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Props","position":{"start":{"line":49,"column":4,"offset":1359},"end":{"line":49,"column":9,"offset":1364},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":1356},"end":{"line":49,"column":9,"offset":1364},"indent":[]}},{"type":"jsx","value":"<Props of={Modal} />","position":{"start":{"line":51,"column":1,"offset":1366},"end":{"line":51,"column":21,"offset":1386},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":53,"column":1,"offset":1388},"end":{"line":53,"column":4,"offset":1391},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"With actions","position":{"start":{"line":55,"column":4,"offset":1396},"end":{"line":55,"column":16,"offset":1408},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":1393},"end":{"line":55,"column":16,"offset":1408},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You have 3 action props you can use","position":{"start":{"line":57,"column":1,"offset":1410},"end":{"line":57,"column":36,"offset":1445},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":1410},"end":{"line":57,"column":36,"offset":1445},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"primaryAction","position":{"start":{"line":59,"column":3,"offset":1449},"end":{"line":59,"column":18,"offset":1464},"indent":[]}}],"position":{"start":{"line":59,"column":3,"offset":1449},"end":{"line":59,"column":18,"offset":1464},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":1447},"end":{"line":59,"column":18,"offset":1464},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"secondaryAction","position":{"start":{"line":60,"column":3,"offset":1467},"end":{"line":60,"column":20,"offset":1484},"indent":[]}}],"position":{"start":{"line":60,"column":3,"offset":1467},"end":{"line":60,"column":20,"offset":1484},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":1465},"end":{"line":60,"column":20,"offset":1484},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"tertiaryAction","position":{"start":{"line":61,"column":3,"offset":1487},"end":{"line":61,"column":19,"offset":1503},"indent":[]}}],"position":{"start":{"line":61,"column":3,"offset":1487},"end":{"line":61,"column":19,"offset":1503},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":1485},"end":{"line":61,"column":19,"offset":1503},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":1447},"end":{"line":61,"column":19,"offset":1503},"indent":[1,1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [value, setValue] = useState(\"\");\n    return (\n      <>\n        <Modal\n          title=\"Hold the phone!\"\n          open={modalOpen}\n          primaryAction={{ label: \"Submit\", onClick: handlePrimaryAction }}\n          secondaryAction={{ label: \"Cancel\", onClick: handleSecondaryAction }}\n          tertiaryAction={{ label: \"Delete\", onClick: handleTertiaryAction }}\n          onRequestClose={toggleModal}\n        >\n          <Content>\n            <Text>\n              Lorem ipsum dolor, sit amet consectetur adipisicing elit. Saepe\n              vero ratione praesentium quisquam non porro ullam maiores iure,\n              sed odio?\n            </Text>\n            {value && <Text>{value}</Text>}\n            <InputText value={value} onChange={setValue} />\n          </Content>\n        </Modal>\n        <Button label=\"Open Modal\" onClick={toggleModal} />\n      </>\n    );\n    function toggleModal() {\n      setModalOpen(!modalOpen);\n    }\n    function handlePrimaryAction() {\n      alert(\"‚úÖ\");\n    }\n    function handleSecondaryAction() {\n      setModalOpen(false);\n    }\n    function handleTertiaryAction() {\n      alert(\"‚ùå\");\n    }\n  }}\n</Playground>","position":{"start":{"line":63,"column":1,"offset":1505},"end":{"line":103,"column":14,"offset":2747},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":106,"column":1,"offset":2750},"end":{"line":106,"column":31,"offset":2780},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":106,"column":31,"offset":2780}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { Playground, Props } from \"docz\";\nimport { ComponentStatus } from \"@jobber/docx\";\nimport { useState } from \"react\";\nimport { Modal } from \".\";\nimport { Button } from \"@jobber/components/Button\";\nimport { Content } from \"@jobber/components/Content\";\nimport { InputText } from \"@jobber/components/InputText\";\nimport { Text } from \"@jobber/components/Text\";\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"modal\"\n    }}>{`Modal`}</h1>\n    <ComponentStatus stage=\"ready\" responsive=\"yes\" accessible=\"yes\" mdxType=\"ComponentStatus\" />\n    <p>{`Modals are overlays that allow users to view, edit, or show informations that\ndoesn't require a page to be built. It also prevent users from interacting with\nthe rest of the application until a specific action is taken.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { Modal } from \"@jobber/components/Modal\";\n`}</code></pre>\n    <Playground __position={1} __code={'() => {\\n  const [modalOpen, setModalOpen] = useState(false)\\n  return (\\n    <>\\n      <Modal\\n        title=\\\"We\\'ve updated Jobber\\\"\\n        open={modalOpen}\\n        onRequestClose={() => setModalOpen(false)}\\n      >\\n        <Content>\\n          <Text>It\\'s harder, better, faster, and stronger! ü§ñ</Text>\\n        </Content>\\n      </Modal>\\n      <Button label=\\\"Open Modal\\\" onClick={() => setModalOpen(true)} />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      useState,\n      Modal,\n      Button,\n      Content,\n      InputText,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [modalOpen, setModalOpen] = useState(false);\n        return <>\n        <Modal title=\"We've updated Jobber\" open={modalOpen} onRequestClose={() => setModalOpen(false)} mdxType=\"Modal\">\n          <Content mdxType=\"Content\">\n            <Text mdxType=\"Text\">It's harder, better, faster, and stronger! ü§ñ</Text>\n          </Content>\n        </Modal>\n        <Button label=\"Open Modal\" onClick={() => setModalOpen(true)} mdxType=\"Button\" />\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Modal} mdxType=\"Props\" />\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"with-actions\"\n    }}>{`With actions`}</h2>\n    <p>{`You have 3 action props you can use`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`primaryAction`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`secondaryAction`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`tertiaryAction`}</inlineCode></li>\n    </ul>\n    <Playground __position={3} __code={'() => {\\n  const [modalOpen, setModalOpen] = useState(false)\\n  const [value, setValue] = useState(\\'\\')\\n  return (\\n    <>\\n      <Modal\\n        title=\\\"Hold the phone!\\\"\\n        open={modalOpen}\\n        primaryAction={{ label: \\'Submit\\', onClick: handlePrimaryAction }}\\n        secondaryAction={{ label: \\'Cancel\\', onClick: handleSecondaryAction }}\\n        tertiaryAction={{ label: \\'Delete\\', onClick: handleTertiaryAction }}\\n        onRequestClose={toggleModal}\\n      >\\n        <Content>\\n          <Text>\\n            Lorem ipsum dolor, sit amet consectetur adipisicing elit. Saepe\\n            vero ratione praesentium quisquam non porro ullam maiores iure,\\n            sed odio?\\n          </Text>\\n          {value && <Text>{value}</Text>}\\n          <InputText value={value} onChange={setValue} />\\n        </Content>\\n      </Modal>\\n      <Button label=\\\"Open Modal\\\" onClick={toggleModal} />\\n    </>\\n  )\\n  function toggleModal() {\\n    setModalOpen(!modalOpen)\\n  }\\n  function handlePrimaryAction() {\\n    alert(\\'‚úÖ\\')\\n  }\\n  function handleSecondaryAction() {\\n    setModalOpen(false)\\n  }\\n  function handleTertiaryAction() {\\n    alert(\\'‚ùå\\')\\n  }\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      useState,\n      Modal,\n      Button,\n      Content,\n      InputText,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [modalOpen, setModalOpen] = useState(false);\n        const [value, setValue] = useState(\"\");\n        return <>\n        <Modal title=\"Hold the phone!\" open={modalOpen} primaryAction={{\n            label: \"Submit\",\n            onClick: handlePrimaryAction\n          }} secondaryAction={{\n            label: \"Cancel\",\n            onClick: handleSecondaryAction\n          }} tertiaryAction={{\n            label: \"Delete\",\n            onClick: handleTertiaryAction\n          }} onRequestClose={toggleModal} mdxType=\"Modal\">\n          <Content mdxType=\"Content\">\n            <Text mdxType=\"Text\">\n              Lorem ipsum dolor, sit amet consectetur adipisicing elit. Saepe\n              vero ratione praesentium quisquam non porro ullam maiores iure,\n              sed odio?\n            </Text>\n            {value && <Text mdxType=\"Text\">{value}</Text>}\n            <InputText value={value} onChange={setValue} mdxType=\"InputText\" />\n          </Content>\n        </Modal>\n        <Button label=\"Open Modal\" onClick={toggleModal} mdxType=\"Button\" />\n      </>;\n\n        function toggleModal() {\n          setModalOpen(!modalOpen);\n        }\n\n        function handlePrimaryAction() {\n          alert(\"‚úÖ\");\n        }\n\n        function handleSecondaryAction() {\n          setModalOpen(false);\n        }\n\n        function handleTertiaryAction() {\n          alert(\"‚ùå\");\n        }\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}
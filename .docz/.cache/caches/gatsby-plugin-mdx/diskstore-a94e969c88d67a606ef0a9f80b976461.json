{"expireTime":9007200931831381000,"key":"gatsby-plugin-mdx-entire-payload-cf3bbe4e339bdf620c697fcd3bd480c3-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":114,"offset":115},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":117},"end":{"line":5,"column":29,"offset":145},"indent":[]}},{"type":"import","value":"import { Playground, Props } from \"docz\";\nimport { ComponentStatus } from \"@jobber/docx\";\nimport { useState } from \"react\";\nimport { ProgressBar } from \".\";","position":{"start":{"line":8,"column":1,"offset":148},"end":{"line":11,"column":33,"offset":304},"indent":[1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"ProgressBar","position":{"start":{"line":13,"column":3,"offset":308},"end":{"line":13,"column":14,"offset":319},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":306},"end":{"line":13,"column":14,"offset":319},"indent":[]}},{"type":"jsx","value":"<ComponentStatus stage=\"ready\" responsive=\"yes\" accessible=\"yes\" />","position":{"start":{"line":15,"column":1,"offset":321},"end":{"line":15,"column":68,"offset":388},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A progress bar is a visual indicator of how close something is to completion.","position":{"start":{"line":17,"column":1,"offset":390},"end":{"line":17,"column":78,"offset":467},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":390},"end":{"line":17,"column":78,"offset":467},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"import { ProgressBar } from \"@jobber/components/ProgressBar\";","position":{"start":{"line":19,"column":1,"offset":469},"end":{"line":21,"column":4,"offset":540},"indent":[1,1]}},{"type":"jsx","value":"<Playground>\n  <ProgressBar currentStep={3} totalSteps={4} />\n</Playground>","position":{"start":{"line":23,"column":1,"offset":542},"end":{"line":25,"column":14,"offset":617},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Design & usage guidelines","position":{"start":{"line":27,"column":4,"offset":622},"end":{"line":27,"column":29,"offset":647},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":619},"end":{"line":27,"column":29,"offset":647},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The progress bar should be used to show \"definite\" progress; we know exactly how\nclose the process is to completion. For \"indefinite\" progress, where we may not\nknow exactly how much longer something might take, use a spinner.","position":{"start":{"line":29,"column":1,"offset":649},"end":{"line":31,"column":66,"offset":875},"indent":[1,1]}}],"position":{"start":{"line":29,"column":1,"offset":649},"end":{"line":31,"column":66,"offset":875},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Some great use cases for a progress bar include:","position":{"start":{"line":33,"column":1,"offset":877},"end":{"line":33,"column":49,"offset":925},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":877},"end":{"line":33,"column":49,"offset":925},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Setup wizard, where we know how many steps the user has completed and how many\nsteps remain","position":{"start":{"line":35,"column":3,"offset":929},"end":{"line":36,"column":15,"offset":1022},"indent":[3]}}],"position":{"start":{"line":35,"column":3,"offset":929},"end":{"line":36,"column":15,"offset":1022},"indent":[3]}}],"position":{"start":{"line":35,"column":1,"offset":927},"end":{"line":36,"column":15,"offset":1022},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"File uploads, where we know the total file size and how much data has already\nbeen sent","position":{"start":{"line":37,"column":3,"offset":1025},"end":{"line":38,"column":12,"offset":1114},"indent":[3]}}],"position":{"start":{"line":37,"column":3,"offset":1025},"end":{"line":38,"column":12,"offset":1114},"indent":[3]}}],"position":{"start":{"line":37,"column":1,"offset":1023},"end":{"line":38,"column":12,"offset":1114},"indent":[1]}}],"position":{"start":{"line":35,"column":1,"offset":927},"end":{"line":38,"column":12,"offset":1114},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"An example where you might be better served using a spinner:","position":{"start":{"line":40,"column":1,"offset":1116},"end":{"line":40,"column":61,"offset":1176},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":1116},"end":{"line":40,"column":61,"offset":1176},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Loading a calendar within a view, where we do not know it's \"complete\" until\nthere's no more data left to load","position":{"start":{"line":42,"column":3,"offset":1180},"end":{"line":43,"column":36,"offset":1292},"indent":[3]}}],"position":{"start":{"line":42,"column":3,"offset":1180},"end":{"line":43,"column":36,"offset":1292},"indent":[3]}}],"position":{"start":{"line":42,"column":1,"offset":1178},"end":{"line":43,"column":36,"offset":1292},"indent":[1]}}],"position":{"start":{"line":42,"column":1,"offset":1178},"end":{"line":43,"column":36,"offset":1292},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Props","position":{"start":{"line":45,"column":4,"offset":1297},"end":{"line":45,"column":9,"offset":1302},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1294},"end":{"line":45,"column":9,"offset":1302},"indent":[]}},{"type":"jsx","value":"<Props of={ProgressBar} />","position":{"start":{"line":47,"column":1,"offset":1304},"end":{"line":47,"column":27,"offset":1330},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":49,"column":1,"offset":1332},"end":{"line":49,"column":4,"offset":1335},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example with state","position":{"start":{"line":51,"column":4,"offset":1340},"end":{"line":51,"column":22,"offset":1358},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":1337},"end":{"line":51,"column":22,"offset":1358},"indent":[]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const [step, setStep] = useState(2);\n    const totalSteps = 4;\n    return (\n      <>\n        <button onClick={() => setStep(Math.max(0, step - 1))}>\n          Step Back\n        </button>\n        <button onClick={() => setStep(Math.min(totalSteps, step + 1))}>\n          Step Forward\n        </button>\n        <ProgressBar currentStep={step} totalSteps={totalSteps} />\n        Step: <strong>{step}</strong> of <strong>{totalSteps}</strong>\n      </>\n    );\n  }}\n</Playground>","position":{"start":{"line":53,"column":1,"offset":1360},"end":{"line":70,"column":14,"offset":1862},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":73,"column":1,"offset":1865},"end":{"line":73,"column":31,"offset":1895},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":73,"column":31,"offset":1895}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { Playground, Props } from \"docz\";\nimport { ComponentStatus } from \"@jobber/docx\";\nimport { useState } from \"react\";\nimport { ProgressBar } from \".\";\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"progressbar\"\n    }}>{`ProgressBar`}</h1>\n    <ComponentStatus stage=\"ready\" responsive=\"yes\" accessible=\"yes\" mdxType=\"ComponentStatus\" />\n    <p>{`A progress bar is a visual indicator of how close something is to completion.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { ProgressBar } from \"@jobber/components/ProgressBar\";\n`}</code></pre>\n    <Playground __position={1} __code={'<ProgressBar currentStep={3} totalSteps={4} />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      useState,\n      ProgressBar,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <ProgressBar currentStep={3} totalSteps={4} mdxType=\"ProgressBar\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"design--usage-guidelines\"\n    }}>{`Design & usage guidelines`}</h2>\n    <p>{`The progress bar should be used to show \"definite\" progress; we know exactly how\nclose the process is to completion. For \"indefinite\" progress, where we may not\nknow exactly how much longer something might take, use a spinner.`}</p>\n    <p>{`Some great use cases for a progress bar include:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Setup wizard, where we know how many steps the user has completed and how many\nsteps remain`}</li>\n      <li parentName=\"ul\">{`File uploads, where we know the total file size and how much data has already\nbeen sent`}</li>\n    </ul>\n    <p>{`An example where you might be better served using a spinner:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Loading a calendar within a view, where we do not know it's \"complete\" until\nthere's no more data left to load`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={ProgressBar} mdxType=\"Props\" />\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"example-with-state\"\n    }}>{`Example with state`}</h2>\n    <Playground __position={3} __code={'() => {\\n  const [step, setStep] = useState(2)\\n  const totalSteps = 4\\n  return (\\n    <>\\n      <button onClick={() => setStep(Math.max(0, step - 1))}>\\n        Step Back\\n      </button>\\n      <button onClick={() => setStep(Math.min(totalSteps, step + 1))}>\\n        Step Forward\\n      </button>\\n      <ProgressBar currentStep={step} totalSteps={totalSteps} />\\n      Step: <strong>{step}</strong> of <strong>{totalSteps}</strong>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      useState,\n      ProgressBar,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [step, setStep] = useState(2);\n        const totalSteps = 4;\n        return <>\n        <button onClick={() => setStep(Math.max(0, step - 1))}>\n          Step Back\n        </button>\n        <button onClick={() => setStep(Math.min(totalSteps, step + 1))}>\n          Step Forward\n        </button>\n        <ProgressBar currentStep={step} totalSteps={totalSteps} mdxType=\"ProgressBar\" />\n        Step: <strong>{step}</strong> of <strong>{totalSteps}</strong>\n      </>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}
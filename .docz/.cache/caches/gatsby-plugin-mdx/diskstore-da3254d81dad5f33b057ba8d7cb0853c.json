{"expireTime":9007200931831329000,"key":"gatsby-plugin-mdx-entire-payload-645cb788d9be4fe58bc07c57a00daf6c-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":114,"offset":115},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":117},"end":{"line":5,"column":29,"offset":145},"indent":[]}},{"type":"import","value":"import { useRef, useState } from \"react\";\nimport { Playground, Props } from \"docz\";\nimport { ComponentStatus } from \"@jobber/docx\";\nimport { Button } from \"@jobber/components/Button\";\nimport { ConfirmationModal } from \".\";","position":{"start":{"line":8,"column":1,"offset":148},"end":{"line":12,"column":39,"offset":370},"indent":[1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Confirmation Modal","position":{"start":{"line":14,"column":3,"offset":374},"end":{"line":14,"column":21,"offset":392},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":372},"end":{"line":14,"column":21,"offset":392},"indent":[]}},{"type":"jsx","value":"<ComponentStatus stage=\"pre\" responsive=\"yes\" accessible=\"yes\" />","position":{"start":{"line":16,"column":1,"offset":394},"end":{"line":16,"column":66,"offset":459},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A ConfirmationModal allows users to confirm or cancel actions that they are\nperforming. Examples of actions that may need confirmation are navigating off an\nedited page or deleting an object.","position":{"start":{"line":18,"column":1,"offset":461},"end":{"line":20,"column":35,"offset":652},"indent":[1,1]}}],"position":{"start":{"line":18,"column":1,"offset":461},"end":{"line":20,"column":35,"offset":652},"indent":[1,1]}},{"type":"code","lang":"ts","meta":null,"value":"import {\n  ConfirmationModal,\n  confirmationModalReducer,\n} from \"@jobber/components/ConfirmationModal\";","position":{"start":{"line":22,"column":1,"offset":654},"end":{"line":27,"column":4,"offset":768},"indent":[1,1,1,1,1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const [open, setOpen] = useState(false);\n    return (\n      <>\n        <Button label=\"Open\" onClick={() => setOpen(true)} />\n        <ConfirmationModal\n          title=\"Should we?\"\n          message={`Let's do **something**!`}\n          confirmLabel=\"Do it\"\n          open={open}\n          onConfirm={() => alert(\"✅\")}\n          onCancel={() => alert(\"🙅‍♂️\")}\n          onRequestClose={() => setOpen(false)}\n        />\n      </>\n    );\n  }}\n</Playground>","position":{"start":{"line":29,"column":1,"offset":770},"end":{"line":47,"column":14,"offset":1253},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Design & usage guidelines","position":{"start":{"line":49,"column":4,"offset":1258},"end":{"line":49,"column":29,"offset":1283},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":1255},"end":{"line":49,"column":29,"offset":1283},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"ConfirmationModals should be used to confirm or cancel an action the user is\nperforming.","position":{"start":{"line":51,"column":1,"offset":1285},"end":{"line":52,"column":12,"offset":1373},"indent":[1]}}],"position":{"start":{"line":51,"column":1,"offset":1285},"end":{"line":52,"column":12,"offset":1373},"indent":[1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Ensure that you are labeling the buttons with appropriate verbs. For example:\n\"Are you sure you want to delete\" should have a label of \"Delete\" which is the\naction that will be performed.","position":{"start":{"line":54,"column":3,"offset":1377},"end":{"line":56,"column":33,"offset":1568},"indent":[3,3]}}],"position":{"start":{"line":54,"column":3,"offset":1377},"end":{"line":56,"column":33,"offset":1568},"indent":[3,3]}}],"position":{"start":{"line":54,"column":1,"offset":1375},"end":{"line":56,"column":33,"offset":1568},"indent":[1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"It's good to identify the Object that is being acted upon. For example: \"Are\nyou sure you want to delete the user: Bub\"","position":{"start":{"line":57,"column":3,"offset":1571},"end":{"line":58,"column":45,"offset":1692},"indent":[3]}}],"position":{"start":{"line":57,"column":3,"offset":1571},"end":{"line":58,"column":45,"offset":1692},"indent":[3]}}],"position":{"start":{"line":57,"column":1,"offset":1569},"end":{"line":58,"column":45,"offset":1692},"indent":[1]}}],"position":{"start":{"line":54,"column":1,"offset":1375},"end":{"line":58,"column":45,"offset":1692},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Props","position":{"start":{"line":60,"column":4,"offset":1697},"end":{"line":60,"column":9,"offset":1702},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":1694},"end":{"line":60,"column":9,"offset":1702},"indent":[]}},{"type":"jsx","value":"<Props of={ConfirmationModal} />","position":{"start":{"line":62,"column":1,"offset":1704},"end":{"line":62,"column":33,"offset":1736},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Controlled Confirmation Modal","position":{"start":{"line":64,"column":4,"offset":1741},"end":{"line":64,"column":33,"offset":1770},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":1738},"end":{"line":64,"column":33,"offset":1770},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In some instances, such as when dealing with a collection of items with common\nactions, you may want to place a single Confirmation Modal on a page and then\ncall to open it when required for each action.","position":{"start":{"line":66,"column":1,"offset":1772},"end":{"line":68,"column":47,"offset":1975},"indent":[1,1]}}],"position":{"start":{"line":66,"column":1,"offset":1772},"end":{"line":68,"column":47,"offset":1975},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We can do this by using the ","position":{"start":{"line":70,"column":1,"offset":1977},"end":{"line":70,"column":29,"offset":2005},"indent":[]}},{"type":"inlineCode","value":"confirmationModalRef","position":{"start":{"line":70,"column":29,"offset":2005},"end":{"line":70,"column":51,"offset":2027},"indent":[]}},{"type":"text","value":" which exposes a ","position":{"start":{"line":70,"column":51,"offset":2027},"end":{"line":70,"column":68,"offset":2044},"indent":[]}},{"type":"inlineCode","value":"show","position":{"start":{"line":70,"column":68,"offset":2044},"end":{"line":70,"column":74,"offset":2050},"indent":[]}},{"type":"text","value":" method\nwhich allows you to present a confirmation modal on demand.","position":{"start":{"line":70,"column":74,"offset":2050},"end":{"line":71,"column":60,"offset":2117},"indent":[1]}}],"position":{"start":{"line":70,"column":1,"offset":1977},"end":{"line":71,"column":60,"offset":2117},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"In the example below we have an array of users and then render a button for each\nthat presents a confirm modal.","position":{"start":{"line":73,"column":1,"offset":2119},"end":{"line":74,"column":31,"offset":2230},"indent":[1]}}],"position":{"start":{"line":73,"column":1,"offset":2119},"end":{"line":74,"column":31,"offset":2230},"indent":[1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const confirmationModalRef = useRef();\n    const users = [\n      {\n        id: 1,\n        name: \"Bob\",\n      },\n      {\n        id: 2,\n        name: \"Donald\",\n      },\n    ];\n    return (\n      <>\n        {users.map(user => {\n          return (\n            <Button\n              label={`Confirm ${user.name}`}\n              onClick={() => {\n                confirmationModalRef.current.show({\n                  title: \"Should we?\",\n                  message: `Hang out with **${user.name}**?`,\n                  confirmLabel: \"Hangout\",\n                  onConfirm: () => alert(\"✅\"),\n                });\n              }}\n            />\n          );\n        })}\n        <ConfirmationModal ref={confirmationModalRef} />\n      </>\n    );\n  }}\n</Playground>","position":{"start":{"line":76,"column":1,"offset":2232},"end":{"line":110,"column":14,"offset":3013},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Destructive","position":{"start":{"line":112,"column":4,"offset":3018},"end":{"line":112,"column":15,"offset":3029},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":3015},"end":{"line":112,"column":15,"offset":3029},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If the user is confirming an action that will destroy, delete, or remove\nsomething, use a destructive ConfirmationModal to visually reinforce the\npotential consequences.","position":{"start":{"line":114,"column":1,"offset":3031},"end":{"line":116,"column":24,"offset":3200},"indent":[1,1]}}],"position":{"start":{"line":114,"column":1,"offset":3031},"end":{"line":116,"column":24,"offset":3200},"indent":[1,1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const [open, setOpen] = useState(false);\n    return (\n      <>\n        <Button\n          label=\"Delete Bob\"\n          variation=\"destructive\"\n          type=\"secondary\"\n          onClick={() => setOpen(true)}\n        />\n        <ConfirmationModal\n          title=\"Delete Bob?\"\n          message={`Deleting Bob will remove their data from your account for good.`}\n          confirmLabel=\"Delete Bob\"\n          open={open}\n          onConfirm={() => alert(\"Bob has been deleted\")}\n          onCancel={() => alert(\"Bob will not be deleted\")}\n          onRequestClose={() => setOpen(false)}\n          variation=\"destructive\"\n        />\n      </>\n    );\n  }}\n</Playground>","position":{"start":{"line":118,"column":1,"offset":3202},"end":{"line":142,"column":14,"offset":3897},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Related components","position":{"start":{"line":144,"column":4,"offset":3902},"end":{"line":144,"column":22,"offset":3920},"indent":[]}}],"position":{"start":{"line":144,"column":1,"offset":3899},"end":{"line":144,"column":22,"offset":3920},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"To present non-blocking, contextual, text-only content, use a\n","position":{"start":{"line":146,"column":3,"offset":3924},"end":{"line":147,"column":3,"offset":3988},"indent":[3]}},{"type":"link","title":null,"url":"tooltip","children":[{"type":"text","value":"Tooltip","position":{"start":{"line":147,"column":4,"offset":3989},"end":{"line":147,"column":11,"offset":3996},"indent":[]}}],"position":{"start":{"line":147,"column":3,"offset":3988},"end":{"line":147,"column":21,"offset":4006},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":147,"column":21,"offset":4006},"end":{"line":147,"column":22,"offset":4007},"indent":[]}}],"position":{"start":{"line":146,"column":3,"offset":3924},"end":{"line":147,"column":22,"offset":4007},"indent":[3]}}],"position":{"start":{"line":146,"column":1,"offset":3922},"end":{"line":147,"column":22,"offset":4007},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"To simply present information for users to view, edit, or for a temporary\nchange of context, use a regular ","position":{"start":{"line":148,"column":3,"offset":4010},"end":{"line":149,"column":36,"offset":4119},"indent":[3]}},{"type":"link","title":null,"url":"modal","children":[{"type":"text","value":"Modal","position":{"start":{"line":149,"column":37,"offset":4120},"end":{"line":149,"column":42,"offset":4125},"indent":[]}}],"position":{"start":{"line":149,"column":36,"offset":4119},"end":{"line":149,"column":50,"offset":4133},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":149,"column":50,"offset":4133},"end":{"line":149,"column":51,"offset":4134},"indent":[]}}],"position":{"start":{"line":148,"column":3,"offset":4010},"end":{"line":149,"column":51,"offset":4134},"indent":[3]}}],"position":{"start":{"line":148,"column":1,"offset":4008},"end":{"line":149,"column":51,"offset":4134},"indent":[1]}}],"position":{"start":{"line":146,"column":1,"offset":3922},"end":{"line":149,"column":51,"offset":4134},"indent":[1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":152,"column":1,"offset":4137},"end":{"line":152,"column":31,"offset":4167},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":152,"column":31,"offset":4167}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { useRef, useState } from \"react\";\nimport { Playground, Props } from \"docz\";\nimport { ComponentStatus } from \"@jobber/docx\";\nimport { Button } from \"@jobber/components/Button\";\nimport { ConfirmationModal } from \".\";\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"confirmation-modal\"\n    }}>{`Confirmation Modal`}</h1>\n    <ComponentStatus stage=\"pre\" responsive=\"yes\" accessible=\"yes\" mdxType=\"ComponentStatus\" />\n    <p>{`A ConfirmationModal allows users to confirm or cancel actions that they are\nperforming. Examples of actions that may need confirmation are navigating off an\nedited page or deleting an object.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import {\n  ConfirmationModal,\n  confirmationModalReducer,\n} from \"@jobber/components/ConfirmationModal\";\n`}</code></pre>\n    <Playground __position={1} __code={'() => {\\n  const [open, setOpen] = useState(false)\\n  return (\\n    <>\\n      <Button label=\\\"Open\\\" onClick={() => setOpen(true)} />\\n      <ConfirmationModal\\n        title=\\\"Should we?\\\"\\n        message={`Let\\'s do **something**!`}\\n        confirmLabel=\\\"Do it\\\"\\n        open={open}\\n        onConfirm={() => alert(\\'✅\\')}\\n        onCancel={() => alert(\\'🙅‍♂️\\')}\\n        onRequestClose={() => setOpen(false)}\\n      />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useRef,\n      useState,\n      Playground,\n      Props,\n      ComponentStatus,\n      Button,\n      ConfirmationModal,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [open, setOpen] = useState(false);\n        return <>\n        <Button label=\"Open\" onClick={() => setOpen(true)} mdxType=\"Button\" />\n        <ConfirmationModal title=\"Should we?\" message={`Let's do **something**!`} confirmLabel=\"Do it\" open={open} onConfirm={() => alert(\"✅\")} onCancel={() => alert(\"🙅‍♂️\")} onRequestClose={() => setOpen(false)} mdxType=\"ConfirmationModal\" />\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"design--usage-guidelines\"\n    }}>{`Design & usage guidelines`}</h2>\n    <p>{`ConfirmationModals should be used to confirm or cancel an action the user is\nperforming.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Ensure that you are labeling the buttons with appropriate verbs. For example:\n\"Are you sure you want to delete\" should have a label of \"Delete\" which is the\naction that will be performed.`}</li>\n      <li parentName=\"ul\">{`It's good to identify the Object that is being acted upon. For example: \"Are\nyou sure you want to delete the user: Bub\"`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={ConfirmationModal} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"controlled-confirmation-modal\"\n    }}>{`Controlled Confirmation Modal`}</h2>\n    <p>{`In some instances, such as when dealing with a collection of items with common\nactions, you may want to place a single Confirmation Modal on a page and then\ncall to open it when required for each action.`}</p>\n    <p>{`We can do this by using the `}<inlineCode parentName=\"p\">{`confirmationModalRef`}</inlineCode>{` which exposes a `}<inlineCode parentName=\"p\">{`show`}</inlineCode>{` method\nwhich allows you to present a confirmation modal on demand.`}</p>\n    <p>{`In the example below we have an array of users and then render a button for each\nthat presents a confirm modal.`}</p>\n    <Playground __position={3} __code={'() => {\\n  const confirmationModalRef = useRef()\\n  const users = [\\n    {\\n      id: 1,\\n      name: \\'Bob\\',\\n    },\\n    {\\n      id: 2,\\n      name: \\'Donald\\',\\n    },\\n  ]\\n  return (\\n    <>\\n      {users.map(user => {\\n        return (\\n          <Button\\n            label={`Confirm ${user.name}`}\\n            onClick={() => {\\n              confirmationModalRef.current.show({\\n                title: \\'Should we?\\',\\n                message: `Hang out with **${user.name}**?`,\\n                confirmLabel: \\'Hangout\\',\\n                onConfirm: () => alert(\\'✅\\'),\\n              })\\n            }}\\n          />\\n        )\\n      })}\\n      <ConfirmationModal ref={confirmationModalRef} />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useRef,\n      useState,\n      Playground,\n      Props,\n      ComponentStatus,\n      Button,\n      ConfirmationModal,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const confirmationModalRef = useRef();\n        const users = [{\n          id: 1,\n          name: \"Bob\"\n        }, {\n          id: 2,\n          name: \"Donald\"\n        }];\n        return <>\n        {users.map(user => {\n            return <Button label={`Confirm ${user.name}`} onClick={() => {\n              confirmationModalRef.current.show({\n                title: \"Should we?\",\n                message: `Hang out with **${user.name}**?`,\n                confirmLabel: \"Hangout\",\n                onConfirm: () => alert(\"✅\")\n              });\n            }} mdxType=\"Button\" />;\n          })}\n        <ConfirmationModal ref={confirmationModalRef} mdxType=\"ConfirmationModal\" />\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"destructive\"\n    }}>{`Destructive`}</h2>\n    <p>{`If the user is confirming an action that will destroy, delete, or remove\nsomething, use a destructive ConfirmationModal to visually reinforce the\npotential consequences.`}</p>\n    <Playground __position={4} __code={'() => {\\n  const [open, setOpen] = useState(false)\\n  return (\\n    <>\\n      <Button\\n        label=\\\"Delete Bob\\\"\\n        variation=\\\"destructive\\\"\\n        type=\\\"secondary\\\"\\n        onClick={() => setOpen(true)}\\n      />\\n      <ConfirmationModal\\n        title=\\\"Delete Bob?\\\"\\n        message={`Deleting Bob will remove their data from your account for good.`}\\n        confirmLabel=\\\"Delete Bob\\\"\\n        open={open}\\n        onConfirm={() => alert(\\'Bob has been deleted\\')}\\n        onCancel={() => alert(\\'Bob will not be deleted\\')}\\n        onRequestClose={() => setOpen(false)}\\n        variation=\\\"destructive\\\"\\n      />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useRef,\n      useState,\n      Playground,\n      Props,\n      ComponentStatus,\n      Button,\n      ConfirmationModal,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [open, setOpen] = useState(false);\n        return <>\n        <Button label=\"Delete Bob\" variation=\"destructive\" type=\"secondary\" onClick={() => setOpen(true)} mdxType=\"Button\" />\n        <ConfirmationModal title=\"Delete Bob?\" message={`Deleting Bob will remove their data from your account for good.`} confirmLabel=\"Delete Bob\" open={open} onConfirm={() => alert(\"Bob has been deleted\")} onCancel={() => alert(\"Bob will not be deleted\")} onRequestClose={() => setOpen(false)} variation=\"destructive\" mdxType=\"ConfirmationModal\" />\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"related-components\"\n    }}>{`Related components`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`To present non-blocking, contextual, text-only content, use a\n`}<a parentName=\"li\" {...{\n          \"href\": \"tooltip\"\n        }}>{`Tooltip`}</a>{`.`}</li>\n      <li parentName=\"ul\">{`To simply present information for users to view, edit, or for a temporary\nchange of context, use a regular `}<a parentName=\"li\" {...{\n          \"href\": \"modal\"\n        }}>{`Modal`}</a>{`.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}
{"expireTime":9007200931831372000,"key":"gatsby-plugin-mdx-entire-payload-32b8dad53192ccfb863d2f08b20a899e-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":114,"offset":115},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":117},"end":{"line":5,"column":29,"offset":145},"indent":[]}},{"type":"import","value":"import { Playground } from \"docz\";\nimport { useState } from \"react\";\nimport { usePasswordStrength } from \"./usePasswordStrength\";\nimport { DataDump } from \"@jobber/components/DataDump\";\nimport { InputText } from \"@jobber/components/InputText\";","position":{"start":{"line":8,"column":1,"offset":148},"end":{"line":12,"column":58,"offset":391},"indent":[1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"UsePasswordStrength","position":{"start":{"line":14,"column":3,"offset":395},"end":{"line":14,"column":22,"offset":414},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":393},"end":{"line":14,"column":22,"offset":414},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"usePasswordStrength","position":{"start":{"line":16,"column":1,"offset":416},"end":{"line":16,"column":22,"offset":437},"indent":[]}},{"type":"text","value":" is a hook used to calculate the strength of a password\nusing the ","position":{"start":{"line":16,"column":22,"offset":437},"end":{"line":17,"column":11,"offset":503},"indent":[1]}},{"type":"link","title":null,"url":"https://github.com/dropbox/zxcvbn","children":[{"type":"text","value":"zxcvbn","position":{"start":{"line":17,"column":12,"offset":504},"end":{"line":17,"column":18,"offset":510},"indent":[]}}],"position":{"start":{"line":17,"column":11,"offset":503},"end":{"line":17,"column":54,"offset":546},"indent":[]}},{"type":"text","value":" package.","position":{"start":{"line":17,"column":54,"offset":546},"end":{"line":17,"column":63,"offset":555},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":416},"end":{"line":17,"column":63,"offset":555},"indent":[1]}},{"type":"code","lang":"tsx","meta":null,"value":"import { usePasswordStrength } from \"@jobber/hooks\";","position":{"start":{"line":19,"column":1,"offset":557},"end":{"line":21,"column":4,"offset":620},"indent":[1,1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const [password, setPassword] = useState(\"\");\n    const result = usePasswordStrength(password);\n    return (\n      <>\n        <InputText placeholder=\"Password\" onChange={setPassword} />\n        <DataDump label=\"Password Strength\" data={result} defaultOpen />\n      </>\n    );\n  }}\n</Playground>","position":{"start":{"line":23,"column":1,"offset":622},"end":{"line":34,"column":14,"offset":944},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"With a dictionary of passwords","position":{"start":{"line":36,"column":4,"offset":949},"end":{"line":36,"column":34,"offset":979},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":946},"end":{"line":36,"column":34,"offset":979},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Optionally, you can pass a dictionary of common passwords which should be\ntreated as insecure.","position":{"start":{"line":38,"column":1,"offset":981},"end":{"line":39,"column":21,"offset":1075},"indent":[1]}}],"position":{"start":{"line":38,"column":1,"offset":981},"end":{"line":39,"column":21,"offset":1075},"indent":[1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const [password, setPassword] = useState(\"atlantis_is_a_strong_password\");\n    const resultWithoutDict = usePasswordStrength(password);\n    const resultWithDict = usePasswordStrength(password, [\n      \"atlantis\",\n      \"atlantis_is_a_strong_password\",\n    ]);\n    return (\n      <>\n        <InputText\n          placeholder=\"Password\"\n          defaultValue=\"atlantis_is_a_strong_password\"\n          onChange={setPassword}\n        />\n        <DataDump\n          label=\"Password Strength (with Dictionary)\"\n          data={resultWithDict}\n          defaultOpen\n        />\n        <DataDump\n          label=\"Password Strength (without Dictionary)\"\n          data={resultWithoutDict}\n          defaultOpen\n        />\n      </>\n    );\n  }}\n</Playground>","position":{"start":{"line":41,"column":1,"offset":1077},"end":{"line":69,"column":14,"offset":1853},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":72,"column":1,"offset":1856},"end":{"line":72,"column":31,"offset":1886},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":72,"column":31,"offset":1886}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { Playground } from \"docz\";\nimport { useState } from \"react\";\nimport { usePasswordStrength } from \"./usePasswordStrength\";\nimport { DataDump } from \"@jobber/components/DataDump\";\nimport { InputText } from \"@jobber/components/InputText\";\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"usepasswordstrength\"\n    }}>{`UsePasswordStrength`}</h1>\n    <p><inlineCode parentName=\"p\">{`usePasswordStrength`}</inlineCode>{` is a hook used to calculate the strength of a password\nusing the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/dropbox/zxcvbn\"\n      }}>{`zxcvbn`}</a>{` package.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { usePasswordStrength } from \"@jobber/hooks\";\n`}</code></pre>\n    <Playground __position={0} __code={'() => {\\n  const [password, setPassword] = useState(\\'\\')\\n  const result = usePasswordStrength(password)\\n  return (\\n    <>\\n      <InputText placeholder=\\\"Password\\\" onChange={setPassword} />\\n      <DataDump label=\\\"Password Strength\\\" data={result} defaultOpen />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useState,\n      usePasswordStrength,\n      DataDump,\n      InputText,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [password, setPassword] = useState(\"\");\n        const result = usePasswordStrength(password);\n        return <>\n        <InputText placeholder=\"Password\" onChange={setPassword} mdxType=\"InputText\" />\n        <DataDump label=\"Password Strength\" data={result} defaultOpen mdxType=\"DataDump\" />\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"with-a-dictionary-of-passwords\"\n    }}>{`With a dictionary of passwords`}</h2>\n    <p>{`Optionally, you can pass a dictionary of common passwords which should be\ntreated as insecure.`}</p>\n    <Playground __position={1} __code={'() => {\\n  const [password, setPassword] = useState(\\'atlantis_is_a_strong_password\\')\\n  const resultWithoutDict = usePasswordStrength(password)\\n  const resultWithDict = usePasswordStrength(password, [\\n    \\'atlantis\\',\\n    \\'atlantis_is_a_strong_password\\',\\n  ])\\n  return (\\n    <>\\n      <InputText\\n        placeholder=\\\"Password\\\"\\n        defaultValue=\\\"atlantis_is_a_strong_password\\\"\\n        onChange={setPassword}\\n      />\\n      <DataDump\\n        label=\\\"Password Strength (with Dictionary)\\\"\\n        data={resultWithDict}\\n        defaultOpen\\n      />\\n      <DataDump\\n        label=\\\"Password Strength (without Dictionary)\\\"\\n        data={resultWithoutDict}\\n        defaultOpen\\n      />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useState,\n      usePasswordStrength,\n      DataDump,\n      InputText,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [password, setPassword] = useState(\"atlantis_is_a_strong_password\");\n        const resultWithoutDict = usePasswordStrength(password);\n        const resultWithDict = usePasswordStrength(password, [\"atlantis\", \"atlantis_is_a_strong_password\"]);\n        return <>\n        <InputText placeholder=\"Password\" defaultValue=\"atlantis_is_a_strong_password\" onChange={setPassword} mdxType=\"InputText\" />\n        <DataDump label=\"Password Strength (with Dictionary)\" data={resultWithDict} defaultOpen mdxType=\"DataDump\" />\n        <DataDump label=\"Password Strength (without Dictionary)\" data={resultWithoutDict} defaultOpen mdxType=\"DataDump\" />\n      </>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}
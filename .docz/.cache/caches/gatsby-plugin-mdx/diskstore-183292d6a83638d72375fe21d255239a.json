{"expireTime":9007200931831330000,"key":"gatsby-plugin-mdx-entire-payload-b502650ac3fe8bc3e8500eea4aa85547-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":114,"offset":115},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":117},"end":{"line":5,"column":29,"offset":145},"indent":[]}},{"type":"import","value":"import { Playground, Props } from \"docz\";\nimport { ComponentStatus } from \"@jobber/docx\";\nimport { FeatureSwitch } from \".\";\nimport { Text } from \"../Text\";\nimport { useState } from \"react\";","position":{"start":{"line":8,"column":1,"offset":148},"end":{"line":12,"column":34,"offset":338},"indent":[1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Feature Switch","position":{"start":{"line":14,"column":3,"offset":342},"end":{"line":14,"column":17,"offset":356},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":340},"end":{"line":14,"column":17,"offset":356},"indent":[]}},{"type":"jsx","value":"<ComponentStatus stage=\"ready\" responsive=\"yes\" accessible=\"yes\" />","position":{"start":{"line":16,"column":1,"offset":358},"end":{"line":16,"column":68,"offset":425},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Use the Feature Switch to give users control over a settings-level feature. The\nFeature Switch should tell the user what the feature is, allow them to turn it\non and off, and optionally allow them to edit any options applicable to the\nfeature.","position":{"start":{"line":18,"column":1,"offset":427},"end":{"line":21,"column":9,"offset":670},"indent":[1,1,1]}}],"position":{"start":{"line":18,"column":1,"offset":427},"end":{"line":21,"column":9,"offset":670},"indent":[1,1,1]}},{"type":"code","lang":"ts","meta":null,"value":"import { FeatureSwitch } from \"@jobber/components/FeatureSwitch\";","position":{"start":{"line":23,"column":1,"offset":672},"end":{"line":25,"column":4,"offset":747},"indent":[1,1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const [featureEnabled, setFeatureEnabled] = useState(true);\n    return (\n      <FeatureSwitch\n        enabled={featureEnabled}\n        title=\"Quote follow-up\"\n        description=\"Send a notification to your client following up on an outstanding quote.\"\n        hasSaveIndicator={true}\n        onSwitch={handleSwitch}\n        onEdit={() => {\n          console.log(\"You clicked edit\");\n        }}\n      >\n        <Text>Extra feature content and information</Text>\n      </FeatureSwitch>\n    );\n    function handleSwitch(newValue) {\n      setFeatureEnabled(newValue);\n    }\n  }}\n</Playground>","position":{"start":{"line":27,"column":1,"offset":749},"end":{"line":48,"column":14,"offset":1367},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Design Usage and Guidelines","position":{"start":{"line":50,"column":4,"offset":1372},"end":{"line":50,"column":31,"offset":1399},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":1369},"end":{"line":50,"column":31,"offset":1399},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The Feature Switch is intended to be used in Settings for features that apply to\na system-wide experience. An example of this might be automated messaging\nsettings, where the user needs to both decide whether or not to use a type of\nmessage, what the message template might be, and when the message should be\nsent.","position":{"start":{"line":52,"column":1,"offset":1401},"end":{"line":56,"column":6,"offset":1715},"indent":[1,1,1,1]}}],"position":{"start":{"line":52,"column":1,"offset":1401},"end":{"line":56,"column":6,"offset":1715},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If the user is making a per-use-case on/off decision, such as enabling automatic\npayments for a single invoice, use the\n","position":{"start":{"line":58,"column":1,"offset":1717},"end":{"line":60,"column":1,"offset":1837},"indent":[1,1]}},{"type":"link","title":null,"url":"https://atlantis.getjobber.com/components/switch","children":[{"type":"text","value":"Switch","position":{"start":{"line":60,"column":2,"offset":1838},"end":{"line":60,"column":8,"offset":1844},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":1837},"end":{"line":60,"column":59,"offset":1895},"indent":[]}},{"type":"text","value":" component.","position":{"start":{"line":60,"column":59,"offset":1895},"end":{"line":60,"column":70,"offset":1906},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":1717},"end":{"line":60,"column":70,"offset":1906},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Props","position":{"start":{"line":62,"column":4,"offset":1911},"end":{"line":62,"column":9,"offset":1916},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":1908},"end":{"line":62,"column":9,"offset":1916},"indent":[]}},{"type":"jsx","value":"<Props of={FeatureSwitch} />","position":{"start":{"line":64,"column":1,"offset":1918},"end":{"line":64,"column":29,"offset":1946},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":66,"column":1,"offset":1948},"end":{"line":66,"column":4,"offset":1951},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Simplified","position":{"start":{"line":68,"column":4,"offset":1956},"end":{"line":68,"column":14,"offset":1966},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":1953},"end":{"line":68,"column":14,"offset":1966},"indent":[]}},{"type":"jsx","value":"<Playground>\n  <FeatureSwitch\n    description=\"Send a notification to your client following up on an outstanding quote\"\n    onSwitch={newValue => {\n      console.log(`Feature ${newValue ? \"enabled\" : \"disabled\"}`);\n    }}\n  />\n</Playground>","position":{"start":{"line":70,"column":1,"offset":1968},"end":{"line":77,"column":14,"offset":2208},"indent":[1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":80,"column":1,"offset":2211},"end":{"line":80,"column":31,"offset":2241},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":80,"column":31,"offset":2241}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { Playground, Props } from \"docz\";\nimport { ComponentStatus } from \"@jobber/docx\";\nimport { FeatureSwitch } from \".\";\nimport { Text } from \"../Text\";\nimport { useState } from \"react\";\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"feature-switch\"\n    }}>{`Feature Switch`}</h1>\n    <ComponentStatus stage=\"ready\" responsive=\"yes\" accessible=\"yes\" mdxType=\"ComponentStatus\" />\n    <p>{`Use the Feature Switch to give users control over a settings-level feature. The\nFeature Switch should tell the user what the feature is, allow them to turn it\non and off, and optionally allow them to edit any options applicable to the\nfeature.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { FeatureSwitch } from \"@jobber/components/FeatureSwitch\";\n`}</code></pre>\n    <Playground __position={1} __code={'() => {\\n  const [featureEnabled, setFeatureEnabled] = useState(true)\\n  return (\\n    <FeatureSwitch\\n      enabled={featureEnabled}\\n      title=\\\"Quote follow-up\\\"\\n      description=\\\"Send a notification to your client following up on an outstanding quote.\\\"\\n      hasSaveIndicator={true}\\n      onSwitch={handleSwitch}\\n      onEdit={() => {\\n        console.log(\\'You clicked edit\\')\\n      }}\\n    >\\n      <Text>Extra feature content and information</Text>\\n    </FeatureSwitch>\\n  )\\n  function handleSwitch(newValue) {\\n    setFeatureEnabled(newValue)\\n  }\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      FeatureSwitch,\n      Text,\n      useState,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [featureEnabled, setFeatureEnabled] = useState(true);\n        return <FeatureSwitch enabled={featureEnabled} title=\"Quote follow-up\" description=\"Send a notification to your client following up on an outstanding quote.\" hasSaveIndicator={true} onSwitch={handleSwitch} onEdit={() => {\n          console.log(\"You clicked edit\");\n        }} mdxType=\"FeatureSwitch\">\n        <Text mdxType=\"Text\">Extra feature content and information</Text>\n      </FeatureSwitch>;\n\n        function handleSwitch(newValue) {\n          setFeatureEnabled(newValue);\n        }\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"design-usage-and-guidelines\"\n    }}>{`Design Usage and Guidelines`}</h2>\n    <p>{`The Feature Switch is intended to be used in Settings for features that apply to\na system-wide experience. An example of this might be automated messaging\nsettings, where the user needs to both decide whether or not to use a type of\nmessage, what the message template might be, and when the message should be\nsent.`}</p>\n    <p>{`If the user is making a per-use-case on/off decision, such as enabling automatic\npayments for a single invoice, use the\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://atlantis.getjobber.com/components/switch\"\n      }}>{`Switch`}</a>{` component.`}</p>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={FeatureSwitch} mdxType=\"Props\" />\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"simplified\"\n    }}>{`Simplified`}</h2>\n    <Playground __position={3} __code={'<FeatureSwitch\\n  description=\\\"Send a notification to your client following up on an outstanding quote\\\"\\n  onSwitch={newValue => {\\n    console.log(`Feature ${newValue ? \\'enabled\\' : \\'disabled\\'}`)\\n  }}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      FeatureSwitch,\n      Text,\n      useState,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <FeatureSwitch description=\"Send a notification to your client following up on an outstanding quote\" onSwitch={newValue => {\n        console.log(`Feature ${newValue ? \"enabled\" : \"disabled\"}`);\n      }} mdxType=\"FeatureSwitch\" />\n    </Playground>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}
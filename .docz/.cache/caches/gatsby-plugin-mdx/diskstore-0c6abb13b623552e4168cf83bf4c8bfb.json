{"expireTime":9007200931831330000,"key":"gatsby-plugin-mdx-entire-payload-7f0e844bedc13aa33785e8ac0eb74ca0-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":114,"offset":115},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":117},"end":{"line":5,"column":29,"offset":145},"indent":[]}},{"type":"import","value":"import { Playground, Props } from \"docz\";\nimport { DataTable } from \".\";\nimport { DataDump } from \"../DataDump\";\nimport { Button } from \"../Button\";\nimport { Typography } from \"../Typography\";\nimport { Menu } from \"../Menu\";\nimport axios from \"axios\";\nimport { useState, useCallback, useEffect, useMemo } from \"react\";\nimport { sortBy } from \"lodash\";\nimport { Text } from \"../Text\";\nimport { Heading } from \"../Heading\";\nimport classNames from \"classnames\";\nimport styles from \"./DataTable.css\";","position":{"start":{"line":8,"column":1,"offset":148},"end":{"line":20,"column":38,"offset":644},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Data Table","position":{"start":{"line":22,"column":3,"offset":648},"end":{"line":22,"column":13,"offset":658},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":646},"end":{"line":22,"column":13,"offset":658},"indent":[]}},{"type":"jsx","value":"<ComponentStatus stage=\"pre\" responsive=\"no\" accessible=\"yes\" />","position":{"start":{"line":24,"column":1,"offset":660},"end":{"line":24,"column":65,"offset":724},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Data Tables are used to organize and display tabular data to users while\nproviding a multitude of features that allows the user to interact with the data\nbeen displayed on the table.","position":{"start":{"line":26,"column":1,"offset":726},"end":{"line":28,"column":29,"offset":908},"indent":[1,1]}}],"position":{"start":{"line":26,"column":1,"offset":726},"end":{"line":28,"column":29,"offset":908},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":30,"column":1,"offset":910},"end":{"line":30,"column":5,"offset":914},"indent":[]}},{"type":"inlineCode","value":"DataTable","position":{"start":{"line":30,"column":5,"offset":914},"end":{"line":30,"column":16,"offset":925},"indent":[]}},{"type":"text","value":" component has the capability to integrate sorting, filtering and\npagination with an external API or on the client side.","position":{"start":{"line":30,"column":16,"offset":925},"end":{"line":31,"column":55,"offset":1045},"indent":[1]}}],"position":{"start":{"line":30,"column":1,"offset":910},"end":{"line":31,"column":55,"offset":1045},"indent":[1]}},{"type":"code","lang":"ts","meta":null,"value":"import { DataTable } from \"@jobber/components/DataTable\";","position":{"start":{"line":33,"column":1,"offset":1047},"end":{"line":35,"column":4,"offset":1114},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Basic table","position":{"start":{"line":37,"column":4,"offset":1119},"end":{"line":37,"column":15,"offset":1130},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1116},"end":{"line":37,"column":15,"offset":1130},"indent":[]}},{"type":"jsx","value":"<Playground>\n  <DataTable\n    data={[\n      {\n        name: \"Jon Snow\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"Yes\",\n      },\n      {\n        name: \"Robert\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"No\",\n      },\n      {\n        name: \"Rickon\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"No\",\n      },\n      {\n        name: \"Robert\",\n        house: \"Baratheon\",\n        region: \"Stormlands\",\n        sigil: \"Black Stag\",\n        isAlive: \"No\",\n      },\n      {\n        name: \"Cercei\",\n        house: \"Lannister\",\n        region: \"Westerlands\",\n        sigil: \"Golden Lion\",\n        isAlive: \"Yes\",\n      },\n    ]}\n    columns={[\n      {\n        accessorKey: \"name\",\n      },\n      {\n        accessorKey: \"house\",\n      },\n      {\n        accessorKey: \"region\",\n      },\n      {\n        accessorKey: \"sigil\",\n      },\n      {\n        accessorKey: \"isAlive\",\n        accessorFn: row =>\n          row.name === \"Jon Snow\" ? \"Resurrected\" : row.isAlive,\n      },\n    ]}\n  />\n</Playground>","position":{"start":{"line":39,"column":1,"offset":1132},"end":{"line":98,"column":14,"offset":2274},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Props","position":{"start":{"line":100,"column":4,"offset":2279},"end":{"line":100,"column":9,"offset":2284},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":2276},"end":{"line":100,"column":9,"offset":2284},"indent":[]}},{"type":"jsx","value":"<Props of={DataTable} />","position":{"start":{"line":102,"column":1,"offset":2286},"end":{"line":102,"column":25,"offset":2310},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Table with actions","position":{"start":{"line":104,"column":4,"offset":2315},"end":{"line":104,"column":22,"offset":2333},"indent":[]}}],"position":{"start":{"line":104,"column":1,"offset":2312},"end":{"line":104,"column":22,"offset":2333},"indent":[]}},{"type":"jsx","value":"<Playground>\n  <DataTable\n    data={[\n      {\n        name: \"Jon Snow\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"Yes\",\n      },\n      {\n        name: \"Robert\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"No\",\n      },\n      {\n        name: \"Rickon\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"No\",\n      },\n      {\n        name: \"Robert\",\n        house: \"Baratheon\",\n        region: \"Stormlands\",\n        sigil: \"Black Stag\",\n        isAlive: \"No\",\n      },\n      {\n        name: \"Cercei\",\n        house: \"Lannister\",\n        region: \"Westerlands\",\n        sigil: \"Golden Lion\",\n        isAlive: \"Yes\",\n      },\n    ]}\n    columns={[\n      {\n        accessorKey: \"name\",\n        cell: info => info.getValue(),\n        header: \"Name\",\n      },\n      {\n        accessorKey: \"house\",\n        cell: info => info.getValue(),\n        header: \"House\",\n      },\n      {\n        accessorKey: \"region\",\n        cell: info => info.getValue(),\n        header: \"Region\",\n      },\n      {\n        accessorKey: \"sigil\",\n        cell: info => info.getValue(),\n        header: \"Sigil\",\n      },\n      {\n        accessorKey: \"isAlive\",\n        accessorFn: row =>\n          row.name === \"Jon Snow\" ? \"Resurrected\" : row.isAlive,\n        cell: info => info.getValue(),\n        header: \"Alive\",\n      },\n      {\n        id: \"actions\",\n        cell: ({ row }) => (\n          <Menu\n            activator={\n              <Button\n                variation=\"subtle\"\n                type=\"tertiary\"\n                icon=\"more\"\n                aria-label=\"more\"\n              />\n            }\n            items={[\n              {\n                actions: [\n                  {\n                    label: \"Alert\",\n                    icon: \"alert\",\n                    onClick: () => {\n                      alert(JSON.stringify(row.original, null, 2));\n                    },\n                  },\n                ],\n              },\n            ]}\n          />\n        ),\n      },\n    ]}\n  />\n</Playground>","position":{"start":{"line":106,"column":1,"offset":2335},"end":{"line":203,"column":14,"offset":4467},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Client-side pagination, sorting, clickable rows, and fixed height with sticky header","position":{"start":{"line":205,"column":4,"offset":4472},"end":{"line":205,"column":88,"offset":4556},"indent":[]}}],"position":{"start":{"line":205,"column":1,"offset":4469},"end":{"line":205,"column":88,"offset":4556},"indent":[]}},{"type":"jsx","value":"<Playground>\n  <DataTable\n    height={400}\n    stickyHeader\n    data={[\n      {\n        name: \"Eddard\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"No\",\n      },\n      {\n        name: \"Catelyn\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"No\",\n      },\n      {\n        name: \"Jon Snow\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"Yes\",\n      },\n      {\n        name: \"Robert\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"No\",\n      },\n      {\n        name: \"Rickon\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"No\",\n      },\n      {\n        name: \"Robert\",\n        house: \"Baratheon\",\n        region: \"Stormlands\",\n        sigil: \"Black Stag\",\n        isAlive: \"No\",\n      },\n      {\n        name: \"Cercei\",\n        house: \"Lannister\",\n        region: \"Westerlands\",\n        sigil: \"Golden Lion\",\n        isAlive: \"Yes\",\n      },\n      {\n        name: \"Sansa\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"Yes\",\n      },\n      {\n        name: \"Arya\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"Yes\",\n      },\n      {\n        name: \"Bran\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"Yes\",\n      },\n      {\n        name: \"Joffrey\",\n        house: \"Baratheon\",\n        region: \"Stormlands\",\n        sigil: \"Black Stag\",\n        isAlive: \"No\",\n      },\n      {\n        name: \"Myrcella\",\n        house: \"Baratheon\",\n        region: \"Stormlands\",\n        sigil: \"Black Stag\",\n        isAlive: \"Yes\",\n      },\n      {\n        name: \"Tommen\",\n        house: \"Baratheon\",\n        region: \"Stormlands\",\n        sigil: \"Black Stag\",\n        isAlive: \"Yes\",\n      },\n    ]}\n    pagination={{ manualPagination: false, itemsPerPage: [10, 20, 30] }}\n    sorting={{ manualSorting: false }}\n    onRowClick={row => alert(JSON.stringify(row.original, null, 2))}\n    columns={[\n      {\n        accessorKey: \"name\",\n        cell: info => info.getValue(),\n        header: \"Name\",\n      },\n      {\n        accessorKey: \"house\",\n        cell: info => info.getValue(),\n        header: \"House\",\n      },\n      {\n        accessorKey: \"region\",\n        cell: info => info.getValue(),\n        header: \"Region\",\n      },\n      {\n        accessorKey: \"sigil\",\n        cell: info => info.getValue(),\n        header: \"Sigil\",\n      },\n      {\n        accessorKey: \"isAlive\",\n        accessorFn: row =>\n          row.name === \"Jon Snow\" ? \"Resurrected\" : row.isAlive,\n        cell: info => info.getValue(),\n        header: \"Alive\",\n      },\n    ]}\n  />\n</Playground>","position":{"start":{"line":207,"column":1,"offset":4558},"end":{"line":337,"column":14,"offset":7392},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Disable sorting of a specific column","position":{"start":{"line":339,"column":4,"offset":7397},"end":{"line":339,"column":40,"offset":7433},"indent":[]}}],"position":{"start":{"line":339,"column":1,"offset":7394},"end":{"line":339,"column":40,"offset":7433},"indent":[]}},{"type":"jsx","value":"<Playground>\n  <DataTable\n    height={400}\n    stickyHeader\n    data={[\n      {\n        name: \"Eddard\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"No\",\n      },\n      {\n        name: \"Catelyn\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"No\",\n      },\n      {\n        name: \"Jon Snow\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"Yes\",\n      },\n      {\n        name: \"Robert\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"No\",\n      },\n      {\n        name: \"Rickon\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"No\",\n      },\n      {\n        name: \"Robert\",\n        house: \"Baratheon\",\n        region: \"Stormlands\",\n        sigil: \"Black Stag\",\n        isAlive: \"No\",\n      },\n      {\n        name: \"Cercei\",\n        house: \"Lannister\",\n        region: \"Westerlands\",\n        sigil: \"Golden Lion\",\n        isAlive: \"Yes\",\n      },\n      {\n        name: \"Sansa\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"Yes\",\n      },\n      {\n        name: \"Arya\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"Yes\",\n      },\n      {\n        name: \"Bran\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"Yes\",\n      },\n      {\n        name: \"Joffrey\",\n        house: \"Baratheon\",\n        region: \"Stormlands\",\n        sigil: \"Black Stag\",\n        isAlive: \"No\",\n      },\n      {\n        name: \"Myrcella\",\n        house: \"Baratheon\",\n        region: \"Stormlands\",\n        sigil: \"Black Stag\",\n        isAlive: \"Yes\",\n      },\n      {\n        name: \"Tommen\",\n        house: \"Baratheon\",\n        region: \"Stormlands\",\n        sigil: \"Black Stag\",\n        isAlive: \"Yes\",\n      },\n    ]}\n    pagination={{ manualPagination: false, itemsPerPage: [10, 20, 30] }}\n    sorting={{ manualSorting: false }}\n    onRowClick={row => alert(JSON.stringify(row.original, null, 2))}\n    columns={[\n      {\n        accessorKey: \"name\",\n        cell: info => info.getValue(),\n        header: \"Name\",\n        enableSorting: false,\n      },\n      {\n        accessorKey: \"house\",\n        cell: info => info.getValue(),\n        header: \"House\",\n      },\n      {\n        accessorKey: \"region\",\n        cell: info => info.getValue(),\n        header: \"Region\",\n      },\n      {\n        accessorKey: \"sigil\",\n        cell: info => info.getValue(),\n        header: \"Sigil\",\n      },\n      {\n        accessorKey: \"isAlive\",\n        accessorFn: row =>\n          row.name === \"Jon Snow\" ? \"Resurrected\" : row.isAlive,\n        cell: info => info.getValue(),\n        header: \"Alive\",\n      },\n    ]}\n  />\n</Playground>","position":{"start":{"line":341,"column":1,"offset":7435},"end":{"line":472,"column":14,"offset":10299},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Horizontal scrolling, pinning first column, custom cell, custom header","position":{"start":{"line":474,"column":4,"offset":10304},"end":{"line":474,"column":74,"offset":10374},"indent":[]}}],"position":{"start":{"line":474,"column":1,"offset":10301},"end":{"line":474,"column":74,"offset":10374},"indent":[]}},{"type":"jsx","value":"<Playground>\n  <div style={{ maxWidth: 390 }}>\n    <DataTable\n      data={[\n        {\n          name: \"Jon Snow\",\n          house: \"Stark\",\n          region: \"North\",\n          sigil: \"Direwolf\",\n          isAlive: \"Yes\",\n        },\n        {\n          name: \"Robert\",\n          house: \"Stark\",\n          region: \"North\",\n          sigil: \"Direwolf\",\n          isAlive: \"No\",\n        },\n        {\n          name: \"Rickon\",\n          house: \"Stark\",\n          region: \"North\",\n          sigil: \"Direwolf\",\n          isAlive: \"No\",\n        },\n        {\n          name: \"Robert\",\n          house: \"Baratheon\",\n          region: \"Stormlands\",\n          sigil: \"Black Stag\",\n          isAlive: \"No\",\n        },\n        {\n          name: \"Cercei\",\n          house: \"Lannister\",\n          region: \"Westerlands\",\n          sigil: \"Golden Lion\",\n          isAlive: \"Yes\",\n        },\n      ]}\n      pinFirstColumn\n      columns={[\n        {\n          accessorKey: \"name\",\n          cell: info => <strong>{info.getValue()}</strong>,\n          header: () => (\n            <span style={{ color: \"var(--color-green)\" }}>Name</span>\n          ),\n        },\n        {\n          accessorKey: \"house\",\n          header: () => (\n            <span style={{ color: \"var(--color-green)\" }}>House</span>\n          ),\n        },\n        {\n          accessorKey: \"region\",\n          header: () => (\n            <span style={{ color: \"var(--color-green)\" }}>Region</span>\n          ),\n        },\n        {\n          accessorKey: \"sigil\",\n          header: () => (\n            <span style={{ color: \"var(--color-green)\" }}>Sigil</span>\n          ),\n        },\n        {\n          accessorKey: \"isAlive\",\n          cell: info => (info.getValue() == \"Yes\" ? \"✅\" : \"❌\"),\n          header: () => (\n            <span style={{ color: \"var(--color-green)\" }}>Alive</span>\n          ),\n        },\n      ]}\n    />\n  </div>\n</Playground>","position":{"start":{"line":476,"column":1,"offset":10376},"end":{"line":553,"column":14,"offset":12276},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Manual sorting","position":{"start":{"line":555,"column":4,"offset":12281},"end":{"line":555,"column":18,"offset":12295},"indent":[]}}],"position":{"start":{"line":555,"column":1,"offset":12278},"end":{"line":555,"column":18,"offset":12295},"indent":[]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const [sortingState, setSortingState] = useState([\n      { id: \"name\", desc: false },\n    ]);\n    const defaultData = useMemo(\n      () => [\n        {\n          name: \"Eddard\",\n          house: \"Stark\",\n          region: \"North\",\n          sigil: \"Direwolf\",\n          isAlive: \"No\",\n        },\n        {\n          name: \"Catelyn\",\n          house: \"Stark\",\n          region: \"North\",\n          sigil: \"Direwolf\",\n          isAlive: \"No\",\n        },\n        {\n          name: \"Jon Snow\",\n          house: \"Stark\",\n          region: \"North\",\n          sigil: \"Direwolf\",\n          isAlive: \"Yes\",\n        },\n        {\n          name: \"Robert\",\n          house: \"Stark\",\n          region: \"North\",\n          sigil: \"Direwolf\",\n          isAlive: \"No\",\n        },\n        {\n          name: \"Rickon\",\n          house: \"Stark\",\n          region: \"North\",\n          sigil: \"Direwolf\",\n          isAlive: \"No\",\n        },\n        {\n          name: \"Robert\",\n          house: \"Baratheon\",\n          region: \"Stormlands\",\n          sigil: \"Black Stag\",\n          isAlive: \"No\",\n        },\n        {\n          name: \"Cercei\",\n          house: \"Lannister\",\n          region: \"Westerlands\",\n          sigil: \"Golden Lion\",\n          isAlive: \"Yes\",\n        },\n      ],\n      []\n    );\n    const sortedData = useMemo(() => {\n      if (sortingState.length == 0) return defaultData;\n      return sortingState[0].desc\n        ? sortBy(defaultData, [sortingState[0].id]).reverse()\n        : sortBy(defaultData, [sortingState[0].id]);\n    }, [sortingState]);\n    const columns = [\n      {\n        accessorKey: \"name\",\n        cell: info => <span>{info.getValue()}</span>,\n      },\n      {\n        accessorKey: \"house\",\n        cell: info => info.getValue(),\n      },\n      {\n        accessorKey: \"region\",\n        cell: info => info.getValue(),\n      },\n      {\n        accessorKey: \"sigil\",\n        cell: info => info.getValue(),\n      },\n      {\n        accessorKey: \"isAlive\",\n        accessorFn: row =>\n          row.name === \"Jon Snow\" ? \"Resurrected\" : row.isAlive,\n        cell: info => info.getValue(),\n      },\n    ];\n    return (\n      <div>\n        <DataDump label=\"Sorting State\" data={sortingState} defaultOpen />\n        <DataTable\n          data={sortedData}\n          columns={columns}\n          sorting={{\n            manualSorting: true,\n            state: sortingState,\n            onSortingChange: setSortingState,\n            enableSortingRemoval: true,\n          }}\n        />\n      </div>\n    );\n  }}\n</Playground>","position":{"start":{"line":557,"column":1,"offset":12297},"end":{"line":662,"column":14,"offset":14844},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Manual pagination","position":{"start":{"line":664,"column":4,"offset":14849},"end":{"line":664,"column":21,"offset":14866},"indent":[]}}],"position":{"start":{"line":664,"column":1,"offset":14846},"end":{"line":664,"column":21,"offset":14866},"indent":[]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const [posts, setPosts] = useState([]);\n    const [{ pageIndex, pageSize }, setPagination] = useState({\n      pageIndex: 0,\n      pageSize: 10,\n    });\n    useEffect(() => {\n      const url = `https://jsonplaceholder.typicode.com/posts?_page=${\n        pageIndex + 1\n      }&_limit=${pageSize}`;\n      axios.get(url).then(response => {\n        setPosts(response.data);\n      });\n    }, [pageIndex, pageSize]);\n    const pagination = useMemo(\n      () => ({\n        pageIndex,\n        pageSize,\n      }),\n      [pageIndex, pageSize]\n    );\n    const totalItems = 100;\n    const columns = useMemo(\n      () => [\n        {\n          accessorFn: row => row.id,\n          id: \"id\",\n          cell: info => info.getValue(),\n        },\n        {\n          accessorFn: row => row.title,\n          id: \"title\",\n          cell: info => info.getValue(),\n        },\n        {\n          accessorFn: row => row.body,\n          id: \"body\",\n          cell: info => info.getValue(),\n        },\n      ],\n      []\n    );\n    return (\n      <div>\n        <DataTable\n          data={posts}\n          columns={columns}\n          pagination={{\n            manualPagination: true,\n            onPaginationChange: setPagination,\n            pageCount: Math.ceil(totalItems / pageSize),\n            totalItems,\n            state: pagination,\n          }}\n          height={400}\n          stickyHeader\n        />\n      </div>\n    );\n  }}\n</Playground>","position":{"start":{"line":666,"column":1,"offset":14868},"end":{"line":727,"column":14,"offset":16320},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Table with footer row","position":{"start":{"line":729,"column":4,"offset":16325},"end":{"line":729,"column":25,"offset":16346},"indent":[]}}],"position":{"start":{"line":729,"column":1,"offset":16322},"end":{"line":729,"column":25,"offset":16346},"indent":[]}},{"type":"jsx","value":"<Playground>\n  <DataTable\n    height={400}\n    pagination={{ manualPagination: false, itemsPerPage: [10, 20, 30] }}\n    sorting={{ manualSorting: false }}\n    data={[\n      {\n        name: \"Eddard\",\n        points: \"1,000,000\",\n        chance: 5,\n        power: \"50,000\",\n      },\n      {\n        name: \"Catelyn\",\n        points: \"2,000,000\",\n        chance: 5,\n        power: \"40,000\",\n      },\n      {\n        name: \"Jon\",\n        points: \"1,250,000\",\n        chance: 8,\n        power: \"20,000\",\n      },\n      {\n        name: \"Robert\",\n        points: \"1,000,000\",\n        chance: 5,\n        power: \"50,000\",\n      },\n      {\n        name: \"Rickon\",\n        points: \"2,000,000\",\n        chance: 5,\n        power: \"40,000\",\n      },\n      {\n        name: \"Robert\",\n        points: \"1,250,000\",\n        chance: 8,\n        power: \"20,000\",\n      },\n      {\n        name: \"Cersei\",\n        points: \"1,000,000\",\n        chance: 5,\n        power: \"50,000\",\n      },\n      {\n        name: \"Sansa\",\n        points: \"2,000,000\",\n        chance: 5,\n        power: \"40,000\",\n      },\n      {\n        name: \"Arya\",\n        points: \"1,250,000\",\n        chance: 8,\n        power: \"20,000\",\n      },\n      {\n        name: \"Bran\",\n        points: \"1,000,000\",\n        chance: 5,\n        power: \"50,000\",\n      },\n    ]}\n    columns={[\n      {\n        id: \"name\",\n        accessorKey: \"name\",\n        header: \"Name\",\n        footer: \"Totals\",\n      },\n      {\n        id: \"points\",\n        accessorKey: \"points\",\n        header: () => (\n          <div style={{ display: \"flex\", flex: 1 }}>\n            <Typography align=\"end\" fontWeight=\"bold\">\n              Points\n            </Typography>\n          </div>\n        ),\n        footer: () => (\n          <Typography align=\"end\" fontWeight=\"bold\">\n            10,050,400\n          </Typography>\n        ),\n        cell: info => <Typography align=\"end\">{info.getValue()}</Typography>,\n      },\n      {\n        id: \"chance\",\n        accessorKey: \"chance\",\n        header: () => (\n          <div style={{ display: \"flex\", flex: 1 }}>\n            <Typography align=\"end\" fontWeight=\"bold\">\n              Chance (%)\n            </Typography>\n          </div>\n        ),\n        cell: info => <Typography align=\"end\">{info.getValue()}</Typography>,\n      },\n      {\n        id: \"power\",\n        accessorKey: \"power\",\n        header: () => (\n          <div style={{ display: \"flex\", flex: 1 }}>\n            <Typography align=\"end\" fontWeight=\"bold\">\n              Power\n            </Typography>\n          </div>\n        ),\n        footer: () => (\n          <Typography align=\"end\" fontWeight=\"bold\">\n            300,000\n          </Typography>\n        ),\n        cell: info => <Typography align=\"end\">{info.getValue()}</Typography>,\n      },\n    ]}\n  />\n</Playground>","position":{"start":{"line":731,"column":1,"offset":16348},"end":{"line":853,"column":14,"offset":19144},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Table empty state","position":{"start":{"line":855,"column":4,"offset":19149},"end":{"line":855,"column":21,"offset":19166},"indent":[]}}],"position":{"start":{"line":855,"column":1,"offset":19146},"end":{"line":855,"column":21,"offset":19166},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The DataTable accepts any child component for an empty state. By default it will\ncenter-align any content vertically and horizontally.","position":{"start":{"line":857,"column":1,"offset":19168},"end":{"line":858,"column":54,"offset":19302},"indent":[1]}}],"position":{"start":{"line":857,"column":1,"offset":19168},"end":{"line":858,"column":54,"offset":19302},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Consider the context of the user to determine what to use for an empty state.\nAre they encountering an empty state because they're a new user? Have they added\ntoo many filters to the dataset? Can you provide them with an action to populate\ncontent?","position":{"start":{"line":860,"column":1,"offset":19304},"end":{"line":863,"column":9,"offset":19552},"indent":[1,1,1]}}],"position":{"start":{"line":860,"column":1,"offset":19304},"end":{"line":863,"column":9,"offset":19552},"indent":[1,1,1]}},{"type":"jsx","value":"<Playground>\n  <DataTable\n    height={400}\n    pagination={{ manualPagination: false, itemsPerPage: [10, 20, 30] }}\n    sorting={{ manualSorting: false }}\n    emptyState={\n      <div className={classNames(styles.emptyState)}>\n        <Heading level={5}>No items found</Heading>\n        <Text>Update your search or filter selection</Text>\n      </div>\n    }\n    data={[]}\n    columns={[\n      {\n        id: \"name\",\n        accessorKey: \"name\",\n        header: \"Name\",\n        footer: \"Totals\",\n      },\n      {\n        id: \"points\",\n        accessorKey: \"points\",\n        header: () => (\n          <Typography align=\"end\" fontWeight=\"bold\">\n            Points\n          </Typography>\n        ),\n        footer: () => (\n          <Typography align=\"end\" fontWeight=\"bold\">\n            $0.00\n          </Typography>\n        ),\n        cell: info => <Typography align=\"end\">{info.getValue()}</Typography>,\n      },\n      {\n        id: \"chance\",\n        accessorKey: \"chance\",\n        header: () => (\n          <Typography align=\"end\" fontWeight=\"bold\">\n            Chance (%)\n          </Typography>\n        ),\n        cell: info => <Typography align=\"end\">{info.getValue()}</Typography>,\n      },\n      {\n        id: \"power\",\n        accessorKey: \"power\",\n        header: () => (\n          <Typography align=\"end\" fontWeight=\"bold\">\n            Power\n          </Typography>\n        ),\n        footer: () => (\n          <Typography align=\"end\" fontWeight=\"bold\">\n            $0.00\n          </Typography>\n        ),\n        cell: info => <Typography align=\"end\">{info.getValue()}</Typography>,\n      },\n    ]}\n  ></DataTable>\n</Playground>","position":{"start":{"line":865,"column":1,"offset":19554},"end":{"line":926,"column":14,"offset":21190},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Table with manual column sizing","position":{"start":{"line":928,"column":4,"offset":21195},"end":{"line":928,"column":35,"offset":21226},"indent":[]}}],"position":{"start":{"line":928,"column":1,"offset":21192},"end":{"line":928,"column":35,"offset":21226},"indent":[]}},{"type":"jsx","value":"<Playground>\n  <DataTable\n    pagination={{ manualPagination: false, itemsPerPage: [10, 20, 30] }}\n    sorting={{ manualSorting: false }}\n    data={[\n      {\n        name: \"Daenerys Stormborn of House Targaryen, the First of Her Name, Queen of the Andals and the First Men, Protector of the Seven Kingdoms, the Mother of Dragons, the Khaleesi of the Great Grass Sea, the Unburnt, the Breaker of Chains.\",\n        points: \"1,000,000\",\n        chance: 5,\n        power: \"50,000\",\n      },\n      {\n        name: \"Aegon “The Conqueror” Targaryen and Rhaenys Targaryen\",\n        points: \"2,000,000\",\n        chance: 5,\n        power: \"40,000\",\n      },\n      {\n        name: \"Jaehaerys “The Old King” Targaryen and Alysanne Targaryen\",\n        points: \"1,250,000\",\n        chance: 8,\n        power: \"20,000\",\n      },\n    ]}\n    columns={[\n      {\n        id: \"name\",\n        accessorKey: \"name\",\n        header: \"Name\",\n        footer: \"Totals\",\n        cell: info => (\n          <Typography numberOfLines={1}>{info.getValue()}</Typography>\n        ),\n        size: 538,\n        minSize: 438,\n        maxSize: 538,\n      },\n      {\n        id: \"points\",\n        accessorKey: \"points\",\n        header: () => (\n          <div style={{ display: \"flex\", flex: 1 }}>\n            <Typography align=\"end\" fontWeight=\"bold\">\n              Points\n            </Typography>\n          </div>\n        ),\n        footer: () => (\n          <Typography align=\"end\" fontWeight=\"bold\">\n            10,050,400\n          </Typography>\n        ),\n        cell: info => <Typography align=\"end\">{info.getValue()}</Typography>,\n        size: 268,\n        minSize: 168,\n        maxSize: 268,\n      },\n      {\n        id: \"chance\",\n        accessorKey: \"chance\",\n        header: () => (\n          <div style={{ display: \"flex\", flex: 1 }}>\n            <Typography align=\"end\" fontWeight=\"bold\">\n              Chance (%)\n            </Typography>\n          </div>\n        ),\n        cell: info => <Typography align=\"end\">{info.getValue()}</Typography>,\n        size: 268,\n        minSize: 168,\n        maxSize: 268,\n      },\n      {\n        id: \"power\",\n        accessorKey: \"power\",\n        header: () => (\n          <div style={{ display: \"flex\", flex: 1 }}>\n            <Typography align=\"end\" fontWeight=\"bold\">\n              Power\n            </Typography>\n          </div>\n        ),\n        footer: () => (\n          <Typography align=\"end\" fontWeight=\"bold\">\n            300,000\n          </Typography>\n        ),\n        cell: info => <Typography align=\"end\">{info.getValue()}</Typography>,\n        size: 268,\n        minSize: 168,\n        maxSize: 268,\n      },\n    ]}\n  />\n</Playground>","position":{"start":{"line":930,"column":1,"offset":21228},"end":{"line":1024,"column":14,"offset":23895},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Design & usage guidelines","position":{"start":{"line":1026,"column":4,"offset":23900},"end":{"line":1026,"column":29,"offset":23925},"indent":[]}}],"position":{"start":{"line":1026,"column":1,"offset":23897},"end":{"line":1026,"column":29,"offset":23925},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":1028,"column":1,"offset":23927},"end":{"line":1028,"column":5,"offset":23931},"indent":[]}},{"type":"inlineCode","value":"DataTable","position":{"start":{"line":1028,"column":5,"offset":23931},"end":{"line":1028,"column":16,"offset":23942},"indent":[]}},{"type":"text","value":" component is a great solution if you are looking to display data\nin a tabular way while giving your user the ability to sort, paginate or filter\nthat data, this can be implemented on the server side or on the client side\ndepending on your needs.","position":{"start":{"line":1028,"column":16,"offset":23942},"end":{"line":1031,"column":25,"offset":24188},"indent":[1,1,1]}}],"position":{"start":{"line":1028,"column":1,"offset":23927},"end":{"line":1031,"column":25,"offset":24188},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"A best practice in Data Table presentation is to ensure that all columns with\nnumerical data (and their headers) round to the same decimal point, and are\nright-aligned. This makes it much easier for the reader to quickly parse large\ndistinctions in dollar amounts, inventory counts, and other key business data.","position":{"start":{"line":1033,"column":1,"offset":24190},"end":{"line":1036,"column":79,"offset":24501},"indent":[1,1,1]}}],"position":{"start":{"line":1033,"column":1,"offset":24190},"end":{"line":1036,"column":79,"offset":24501},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To list more complex collections of information (such as multi-line content like\na detailed property address), you may want to consider the\n","position":{"start":{"line":1038,"column":1,"offset":24503},"end":{"line":1040,"column":1,"offset":24643},"indent":[1,1]}},{"type":"link","title":null,"url":"https://atlantis.getjobber.com/components/list","children":[{"type":"text","value":"List","position":{"start":{"line":1040,"column":2,"offset":24644},"end":{"line":1040,"column":6,"offset":24648},"indent":[]}}],"position":{"start":{"line":1040,"column":1,"offset":24643},"end":{"line":1040,"column":55,"offset":24697},"indent":[]}},{"type":"text","value":" component. If you have a\nsmall list of information with a 1:1 label-to-data relationship (for example,\nthe issued and due dates on an invoice), consider using\n","position":{"start":{"line":1040,"column":55,"offset":24697},"end":{"line":1043,"column":1,"offset":24857},"indent":[1,1,1]}},{"type":"link","title":null,"url":"https://atlantis.getjobber.com/components/description-list","children":[{"type":"text","value":"DescriptionList","position":{"start":{"line":1043,"column":2,"offset":24858},"end":{"line":1043,"column":17,"offset":24873},"indent":[]}}],"position":{"start":{"line":1043,"column":1,"offset":24857},"end":{"line":1043,"column":78,"offset":24934},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":1043,"column":78,"offset":24934},"end":{"line":1043,"column":79,"offset":24935},"indent":[]}}],"position":{"start":{"line":1038,"column":1,"offset":24503},"end":{"line":1043,"column":79,"offset":24935},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Responsiveness","position":{"start":{"line":1045,"column":4,"offset":24940},"end":{"line":1045,"column":18,"offset":24954},"indent":[]}}],"position":{"start":{"line":1045,"column":1,"offset":24937},"end":{"line":1045,"column":18,"offset":24954},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":1047,"column":1,"offset":24956},"end":{"line":1047,"column":5,"offset":24960},"indent":[]}},{"type":"inlineCode","value":"DataTable","position":{"start":{"line":1047,"column":5,"offset":24960},"end":{"line":1047,"column":16,"offset":24971},"indent":[]}},{"type":"text","value":" component has the option to handle responsive design, these\noptions will allow us to fix the header or the first left column depending on\nyour needs, this will allow the user a more efficient way to visualize the data.","position":{"start":{"line":1047,"column":16,"offset":24971},"end":{"line":1049,"column":81,"offset":25190},"indent":[1,1]}}],"position":{"start":{"line":1047,"column":1,"offset":24956},"end":{"line":1049,"column":81,"offset":25190},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":1052,"column":1,"offset":25193},"end":{"line":1052,"column":31,"offset":25223},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1052,"column":31,"offset":25223}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { Playground, Props } from \"docz\";\nimport { DataTable } from \".\";\nimport { DataDump } from \"../DataDump\";\nimport { Button } from \"../Button\";\nimport { Typography } from \"../Typography\";\nimport { Menu } from \"../Menu\";\nimport axios from \"axios\";\nimport { useState, useCallback, useEffect, useMemo } from \"react\";\nimport { sortBy } from \"lodash\";\nimport { Text } from \"../Text\";\nimport { Heading } from \"../Heading\";\nimport classNames from \"classnames\";\nimport styles from \"./DataTable.css\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst ComponentStatus = makeShortcode(\"ComponentStatus\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"data-table\"\n    }}>{`Data Table`}</h1>\n    <ComponentStatus stage=\"pre\" responsive=\"no\" accessible=\"yes\" mdxType=\"ComponentStatus\" />\n    <p>{`Data Tables are used to organize and display tabular data to users while\nproviding a multitude of features that allows the user to interact with the data\nbeen displayed on the table.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`DataTable`}</inlineCode>{` component has the capability to integrate sorting, filtering and\npagination with an external API or on the client side.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { DataTable } from \"@jobber/components/DataTable\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"basic-table\"\n    }}>{`Basic table`}</h2>\n    <Playground __position={1} __code={'<DataTable\\n  data={[\\n    {\\n      name: \\'Jon Snow\\',\\n      house: \\'Stark\\',\\n      region: \\'North\\',\\n      sigil: \\'Direwolf\\',\\n      isAlive: \\'Yes\\',\\n    },\\n    {\\n      name: \\'Robert\\',\\n      house: \\'Stark\\',\\n      region: \\'North\\',\\n      sigil: \\'Direwolf\\',\\n      isAlive: \\'No\\',\\n    },\\n    {\\n      name: \\'Rickon\\',\\n      house: \\'Stark\\',\\n      region: \\'North\\',\\n      sigil: \\'Direwolf\\',\\n      isAlive: \\'No\\',\\n    },\\n    {\\n      name: \\'Robert\\',\\n      house: \\'Baratheon\\',\\n      region: \\'Stormlands\\',\\n      sigil: \\'Black Stag\\',\\n      isAlive: \\'No\\',\\n    },\\n    {\\n      name: \\'Cercei\\',\\n      house: \\'Lannister\\',\\n      region: \\'Westerlands\\',\\n      sigil: \\'Golden Lion\\',\\n      isAlive: \\'Yes\\',\\n    },\\n  ]}\\n  columns={[\\n    {\\n      accessorKey: \\'name\\',\\n    },\\n    {\\n      accessorKey: \\'house\\',\\n    },\\n    {\\n      accessorKey: \\'region\\',\\n    },\\n    {\\n      accessorKey: \\'sigil\\',\\n    },\\n    {\\n      accessorKey: \\'isAlive\\',\\n      accessorFn: row =>\\n        row.name === \\'Jon Snow\\' ? \\'Resurrected\\' : row.isAlive,\\n    },\\n  ]}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      DataTable,\n      DataDump,\n      Button,\n      Typography,\n      Menu,\n      axios,\n      useState,\n      useCallback,\n      useEffect,\n      useMemo,\n      sortBy,\n      Text,\n      Heading,\n      classNames,\n      styles,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <DataTable data={[{\n        name: \"Jon Snow\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"Yes\"\n      }, {\n        name: \"Robert\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"No\"\n      }, {\n        name: \"Rickon\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"No\"\n      }, {\n        name: \"Robert\",\n        house: \"Baratheon\",\n        region: \"Stormlands\",\n        sigil: \"Black Stag\",\n        isAlive: \"No\"\n      }, {\n        name: \"Cercei\",\n        house: \"Lannister\",\n        region: \"Westerlands\",\n        sigil: \"Golden Lion\",\n        isAlive: \"Yes\"\n      }]} columns={[{\n        accessorKey: \"name\"\n      }, {\n        accessorKey: \"house\"\n      }, {\n        accessorKey: \"region\"\n      }, {\n        accessorKey: \"sigil\"\n      }, {\n        accessorKey: \"isAlive\",\n        accessorFn: row => row.name === \"Jon Snow\" ? \"Resurrected\" : row.isAlive\n      }]} mdxType=\"DataTable\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={DataTable} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"table-with-actions\"\n    }}>{`Table with actions`}</h2>\n    <Playground __position={3} __code={'<DataTable\\n  data={[\\n    {\\n      name: \\'Jon Snow\\',\\n      house: \\'Stark\\',\\n      region: \\'North\\',\\n      sigil: \\'Direwolf\\',\\n      isAlive: \\'Yes\\',\\n    },\\n    {\\n      name: \\'Robert\\',\\n      house: \\'Stark\\',\\n      region: \\'North\\',\\n      sigil: \\'Direwolf\\',\\n      isAlive: \\'No\\',\\n    },\\n    {\\n      name: \\'Rickon\\',\\n      house: \\'Stark\\',\\n      region: \\'North\\',\\n      sigil: \\'Direwolf\\',\\n      isAlive: \\'No\\',\\n    },\\n    {\\n      name: \\'Robert\\',\\n      house: \\'Baratheon\\',\\n      region: \\'Stormlands\\',\\n      sigil: \\'Black Stag\\',\\n      isAlive: \\'No\\',\\n    },\\n    {\\n      name: \\'Cercei\\',\\n      house: \\'Lannister\\',\\n      region: \\'Westerlands\\',\\n      sigil: \\'Golden Lion\\',\\n      isAlive: \\'Yes\\',\\n    },\\n  ]}\\n  columns={[\\n    {\\n      accessorKey: \\'name\\',\\n      cell: info => info.getValue(),\\n      header: \\'Name\\',\\n    },\\n    {\\n      accessorKey: \\'house\\',\\n      cell: info => info.getValue(),\\n      header: \\'House\\',\\n    },\\n    {\\n      accessorKey: \\'region\\',\\n      cell: info => info.getValue(),\\n      header: \\'Region\\',\\n    },\\n    {\\n      accessorKey: \\'sigil\\',\\n      cell: info => info.getValue(),\\n      header: \\'Sigil\\',\\n    },\\n    {\\n      accessorKey: \\'isAlive\\',\\n      accessorFn: row =>\\n        row.name === \\'Jon Snow\\' ? \\'Resurrected\\' : row.isAlive,\\n      cell: info => info.getValue(),\\n      header: \\'Alive\\',\\n    },\\n    {\\n      id: \\'actions\\',\\n      cell: ({ row }) => (\\n        <Menu\\n          activator={\\n            <Button\\n              variation=\\\"subtle\\\"\\n              type=\\\"tertiary\\\"\\n              icon=\\\"more\\\"\\n              aria-label=\\\"more\\\"\\n            />\\n          }\\n          items={[\\n            {\\n              actions: [\\n                {\\n                  label: \\'Alert\\',\\n                  icon: \\'alert\\',\\n                  onClick: () => {\\n                    alert(JSON.stringify(row.original, null, 2))\\n                  },\\n                },\\n              ],\\n            },\\n          ]}\\n        />\\n      ),\\n    },\\n  ]}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      DataTable,\n      DataDump,\n      Button,\n      Typography,\n      Menu,\n      axios,\n      useState,\n      useCallback,\n      useEffect,\n      useMemo,\n      sortBy,\n      Text,\n      Heading,\n      classNames,\n      styles,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <DataTable data={[{\n        name: \"Jon Snow\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"Yes\"\n      }, {\n        name: \"Robert\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"No\"\n      }, {\n        name: \"Rickon\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"No\"\n      }, {\n        name: \"Robert\",\n        house: \"Baratheon\",\n        region: \"Stormlands\",\n        sigil: \"Black Stag\",\n        isAlive: \"No\"\n      }, {\n        name: \"Cercei\",\n        house: \"Lannister\",\n        region: \"Westerlands\",\n        sigil: \"Golden Lion\",\n        isAlive: \"Yes\"\n      }]} columns={[{\n        accessorKey: \"name\",\n        cell: info => info.getValue(),\n        header: \"Name\"\n      }, {\n        accessorKey: \"house\",\n        cell: info => info.getValue(),\n        header: \"House\"\n      }, {\n        accessorKey: \"region\",\n        cell: info => info.getValue(),\n        header: \"Region\"\n      }, {\n        accessorKey: \"sigil\",\n        cell: info => info.getValue(),\n        header: \"Sigil\"\n      }, {\n        accessorKey: \"isAlive\",\n        accessorFn: row => row.name === \"Jon Snow\" ? \"Resurrected\" : row.isAlive,\n        cell: info => info.getValue(),\n        header: \"Alive\"\n      }, {\n        id: \"actions\",\n        cell: ({\n          row\n        }) => <Menu activator={<Button variation=\"subtle\" type=\"tertiary\" icon=\"more\" aria-label=\"more\" mdxType=\"Button\" />} items={[{\n          actions: [{\n            label: \"Alert\",\n            icon: \"alert\",\n            onClick: () => {\n              alert(JSON.stringify(row.original, null, 2));\n            }\n          }]\n        }]} mdxType=\"Menu\" />\n      }]} mdxType=\"DataTable\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"client-side-pagination-sorting-clickable-rows-and-fixed-height-with-sticky-header\"\n    }}>{`Client-side pagination, sorting, clickable rows, and fixed height with sticky header`}</h2>\n    <Playground __position={4} __code={'<DataTable\\n  height={400}\\n  stickyHeader\\n  data={[\\n    {\\n      name: \\'Eddard\\',\\n      house: \\'Stark\\',\\n      region: \\'North\\',\\n      sigil: \\'Direwolf\\',\\n      isAlive: \\'No\\',\\n    },\\n    {\\n      name: \\'Catelyn\\',\\n      house: \\'Stark\\',\\n      region: \\'North\\',\\n      sigil: \\'Direwolf\\',\\n      isAlive: \\'No\\',\\n    },\\n    {\\n      name: \\'Jon Snow\\',\\n      house: \\'Stark\\',\\n      region: \\'North\\',\\n      sigil: \\'Direwolf\\',\\n      isAlive: \\'Yes\\',\\n    },\\n    {\\n      name: \\'Robert\\',\\n      house: \\'Stark\\',\\n      region: \\'North\\',\\n      sigil: \\'Direwolf\\',\\n      isAlive: \\'No\\',\\n    },\\n    {\\n      name: \\'Rickon\\',\\n      house: \\'Stark\\',\\n      region: \\'North\\',\\n      sigil: \\'Direwolf\\',\\n      isAlive: \\'No\\',\\n    },\\n    {\\n      name: \\'Robert\\',\\n      house: \\'Baratheon\\',\\n      region: \\'Stormlands\\',\\n      sigil: \\'Black Stag\\',\\n      isAlive: \\'No\\',\\n    },\\n    {\\n      name: \\'Cercei\\',\\n      house: \\'Lannister\\',\\n      region: \\'Westerlands\\',\\n      sigil: \\'Golden Lion\\',\\n      isAlive: \\'Yes\\',\\n    },\\n    {\\n      name: \\'Sansa\\',\\n      house: \\'Stark\\',\\n      region: \\'North\\',\\n      sigil: \\'Direwolf\\',\\n      isAlive: \\'Yes\\',\\n    },\\n    {\\n      name: \\'Arya\\',\\n      house: \\'Stark\\',\\n      region: \\'North\\',\\n      sigil: \\'Direwolf\\',\\n      isAlive: \\'Yes\\',\\n    },\\n    {\\n      name: \\'Bran\\',\\n      house: \\'Stark\\',\\n      region: \\'North\\',\\n      sigil: \\'Direwolf\\',\\n      isAlive: \\'Yes\\',\\n    },\\n    {\\n      name: \\'Joffrey\\',\\n      house: \\'Baratheon\\',\\n      region: \\'Stormlands\\',\\n      sigil: \\'Black Stag\\',\\n      isAlive: \\'No\\',\\n    },\\n    {\\n      name: \\'Myrcella\\',\\n      house: \\'Baratheon\\',\\n      region: \\'Stormlands\\',\\n      sigil: \\'Black Stag\\',\\n      isAlive: \\'Yes\\',\\n    },\\n    {\\n      name: \\'Tommen\\',\\n      house: \\'Baratheon\\',\\n      region: \\'Stormlands\\',\\n      sigil: \\'Black Stag\\',\\n      isAlive: \\'Yes\\',\\n    },\\n  ]}\\n  pagination={{ manualPagination: false, itemsPerPage: [10, 20, 30] }}\\n  sorting={{ manualSorting: false }}\\n  onRowClick={row => alert(JSON.stringify(row.original, null, 2))}\\n  columns={[\\n    {\\n      accessorKey: \\'name\\',\\n      cell: info => info.getValue(),\\n      header: \\'Name\\',\\n    },\\n    {\\n      accessorKey: \\'house\\',\\n      cell: info => info.getValue(),\\n      header: \\'House\\',\\n    },\\n    {\\n      accessorKey: \\'region\\',\\n      cell: info => info.getValue(),\\n      header: \\'Region\\',\\n    },\\n    {\\n      accessorKey: \\'sigil\\',\\n      cell: info => info.getValue(),\\n      header: \\'Sigil\\',\\n    },\\n    {\\n      accessorKey: \\'isAlive\\',\\n      accessorFn: row =>\\n        row.name === \\'Jon Snow\\' ? \\'Resurrected\\' : row.isAlive,\\n      cell: info => info.getValue(),\\n      header: \\'Alive\\',\\n    },\\n  ]}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      DataTable,\n      DataDump,\n      Button,\n      Typography,\n      Menu,\n      axios,\n      useState,\n      useCallback,\n      useEffect,\n      useMemo,\n      sortBy,\n      Text,\n      Heading,\n      classNames,\n      styles,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <DataTable height={400} stickyHeader data={[{\n        name: \"Eddard\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"No\"\n      }, {\n        name: \"Catelyn\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"No\"\n      }, {\n        name: \"Jon Snow\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"Yes\"\n      }, {\n        name: \"Robert\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"No\"\n      }, {\n        name: \"Rickon\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"No\"\n      }, {\n        name: \"Robert\",\n        house: \"Baratheon\",\n        region: \"Stormlands\",\n        sigil: \"Black Stag\",\n        isAlive: \"No\"\n      }, {\n        name: \"Cercei\",\n        house: \"Lannister\",\n        region: \"Westerlands\",\n        sigil: \"Golden Lion\",\n        isAlive: \"Yes\"\n      }, {\n        name: \"Sansa\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"Yes\"\n      }, {\n        name: \"Arya\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"Yes\"\n      }, {\n        name: \"Bran\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"Yes\"\n      }, {\n        name: \"Joffrey\",\n        house: \"Baratheon\",\n        region: \"Stormlands\",\n        sigil: \"Black Stag\",\n        isAlive: \"No\"\n      }, {\n        name: \"Myrcella\",\n        house: \"Baratheon\",\n        region: \"Stormlands\",\n        sigil: \"Black Stag\",\n        isAlive: \"Yes\"\n      }, {\n        name: \"Tommen\",\n        house: \"Baratheon\",\n        region: \"Stormlands\",\n        sigil: \"Black Stag\",\n        isAlive: \"Yes\"\n      }]} pagination={{\n        manualPagination: false,\n        itemsPerPage: [10, 20, 30]\n      }} sorting={{\n        manualSorting: false\n      }} onRowClick={row => alert(JSON.stringify(row.original, null, 2))} columns={[{\n        accessorKey: \"name\",\n        cell: info => info.getValue(),\n        header: \"Name\"\n      }, {\n        accessorKey: \"house\",\n        cell: info => info.getValue(),\n        header: \"House\"\n      }, {\n        accessorKey: \"region\",\n        cell: info => info.getValue(),\n        header: \"Region\"\n      }, {\n        accessorKey: \"sigil\",\n        cell: info => info.getValue(),\n        header: \"Sigil\"\n      }, {\n        accessorKey: \"isAlive\",\n        accessorFn: row => row.name === \"Jon Snow\" ? \"Resurrected\" : row.isAlive,\n        cell: info => info.getValue(),\n        header: \"Alive\"\n      }]} mdxType=\"DataTable\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"disable-sorting-of-a-specific-column\"\n    }}>{`Disable sorting of a specific column`}</h2>\n    <Playground __position={5} __code={'<DataTable\\n  height={400}\\n  stickyHeader\\n  data={[\\n    {\\n      name: \\'Eddard\\',\\n      house: \\'Stark\\',\\n      region: \\'North\\',\\n      sigil: \\'Direwolf\\',\\n      isAlive: \\'No\\',\\n    },\\n    {\\n      name: \\'Catelyn\\',\\n      house: \\'Stark\\',\\n      region: \\'North\\',\\n      sigil: \\'Direwolf\\',\\n      isAlive: \\'No\\',\\n    },\\n    {\\n      name: \\'Jon Snow\\',\\n      house: \\'Stark\\',\\n      region: \\'North\\',\\n      sigil: \\'Direwolf\\',\\n      isAlive: \\'Yes\\',\\n    },\\n    {\\n      name: \\'Robert\\',\\n      house: \\'Stark\\',\\n      region: \\'North\\',\\n      sigil: \\'Direwolf\\',\\n      isAlive: \\'No\\',\\n    },\\n    {\\n      name: \\'Rickon\\',\\n      house: \\'Stark\\',\\n      region: \\'North\\',\\n      sigil: \\'Direwolf\\',\\n      isAlive: \\'No\\',\\n    },\\n    {\\n      name: \\'Robert\\',\\n      house: \\'Baratheon\\',\\n      region: \\'Stormlands\\',\\n      sigil: \\'Black Stag\\',\\n      isAlive: \\'No\\',\\n    },\\n    {\\n      name: \\'Cercei\\',\\n      house: \\'Lannister\\',\\n      region: \\'Westerlands\\',\\n      sigil: \\'Golden Lion\\',\\n      isAlive: \\'Yes\\',\\n    },\\n    {\\n      name: \\'Sansa\\',\\n      house: \\'Stark\\',\\n      region: \\'North\\',\\n      sigil: \\'Direwolf\\',\\n      isAlive: \\'Yes\\',\\n    },\\n    {\\n      name: \\'Arya\\',\\n      house: \\'Stark\\',\\n      region: \\'North\\',\\n      sigil: \\'Direwolf\\',\\n      isAlive: \\'Yes\\',\\n    },\\n    {\\n      name: \\'Bran\\',\\n      house: \\'Stark\\',\\n      region: \\'North\\',\\n      sigil: \\'Direwolf\\',\\n      isAlive: \\'Yes\\',\\n    },\\n    {\\n      name: \\'Joffrey\\',\\n      house: \\'Baratheon\\',\\n      region: \\'Stormlands\\',\\n      sigil: \\'Black Stag\\',\\n      isAlive: \\'No\\',\\n    },\\n    {\\n      name: \\'Myrcella\\',\\n      house: \\'Baratheon\\',\\n      region: \\'Stormlands\\',\\n      sigil: \\'Black Stag\\',\\n      isAlive: \\'Yes\\',\\n    },\\n    {\\n      name: \\'Tommen\\',\\n      house: \\'Baratheon\\',\\n      region: \\'Stormlands\\',\\n      sigil: \\'Black Stag\\',\\n      isAlive: \\'Yes\\',\\n    },\\n  ]}\\n  pagination={{ manualPagination: false, itemsPerPage: [10, 20, 30] }}\\n  sorting={{ manualSorting: false }}\\n  onRowClick={row => alert(JSON.stringify(row.original, null, 2))}\\n  columns={[\\n    {\\n      accessorKey: \\'name\\',\\n      cell: info => info.getValue(),\\n      header: \\'Name\\',\\n      enableSorting: false,\\n    },\\n    {\\n      accessorKey: \\'house\\',\\n      cell: info => info.getValue(),\\n      header: \\'House\\',\\n    },\\n    {\\n      accessorKey: \\'region\\',\\n      cell: info => info.getValue(),\\n      header: \\'Region\\',\\n    },\\n    {\\n      accessorKey: \\'sigil\\',\\n      cell: info => info.getValue(),\\n      header: \\'Sigil\\',\\n    },\\n    {\\n      accessorKey: \\'isAlive\\',\\n      accessorFn: row =>\\n        row.name === \\'Jon Snow\\' ? \\'Resurrected\\' : row.isAlive,\\n      cell: info => info.getValue(),\\n      header: \\'Alive\\',\\n    },\\n  ]}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      DataTable,\n      DataDump,\n      Button,\n      Typography,\n      Menu,\n      axios,\n      useState,\n      useCallback,\n      useEffect,\n      useMemo,\n      sortBy,\n      Text,\n      Heading,\n      classNames,\n      styles,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <DataTable height={400} stickyHeader data={[{\n        name: \"Eddard\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"No\"\n      }, {\n        name: \"Catelyn\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"No\"\n      }, {\n        name: \"Jon Snow\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"Yes\"\n      }, {\n        name: \"Robert\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"No\"\n      }, {\n        name: \"Rickon\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"No\"\n      }, {\n        name: \"Robert\",\n        house: \"Baratheon\",\n        region: \"Stormlands\",\n        sigil: \"Black Stag\",\n        isAlive: \"No\"\n      }, {\n        name: \"Cercei\",\n        house: \"Lannister\",\n        region: \"Westerlands\",\n        sigil: \"Golden Lion\",\n        isAlive: \"Yes\"\n      }, {\n        name: \"Sansa\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"Yes\"\n      }, {\n        name: \"Arya\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"Yes\"\n      }, {\n        name: \"Bran\",\n        house: \"Stark\",\n        region: \"North\",\n        sigil: \"Direwolf\",\n        isAlive: \"Yes\"\n      }, {\n        name: \"Joffrey\",\n        house: \"Baratheon\",\n        region: \"Stormlands\",\n        sigil: \"Black Stag\",\n        isAlive: \"No\"\n      }, {\n        name: \"Myrcella\",\n        house: \"Baratheon\",\n        region: \"Stormlands\",\n        sigil: \"Black Stag\",\n        isAlive: \"Yes\"\n      }, {\n        name: \"Tommen\",\n        house: \"Baratheon\",\n        region: \"Stormlands\",\n        sigil: \"Black Stag\",\n        isAlive: \"Yes\"\n      }]} pagination={{\n        manualPagination: false,\n        itemsPerPage: [10, 20, 30]\n      }} sorting={{\n        manualSorting: false\n      }} onRowClick={row => alert(JSON.stringify(row.original, null, 2))} columns={[{\n        accessorKey: \"name\",\n        cell: info => info.getValue(),\n        header: \"Name\",\n        enableSorting: false\n      }, {\n        accessorKey: \"house\",\n        cell: info => info.getValue(),\n        header: \"House\"\n      }, {\n        accessorKey: \"region\",\n        cell: info => info.getValue(),\n        header: \"Region\"\n      }, {\n        accessorKey: \"sigil\",\n        cell: info => info.getValue(),\n        header: \"Sigil\"\n      }, {\n        accessorKey: \"isAlive\",\n        accessorFn: row => row.name === \"Jon Snow\" ? \"Resurrected\" : row.isAlive,\n        cell: info => info.getValue(),\n        header: \"Alive\"\n      }]} mdxType=\"DataTable\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"horizontal-scrolling-pinning-first-column-custom-cell-custom-header\"\n    }}>{`Horizontal scrolling, pinning first column, custom cell, custom header`}</h2>\n    <Playground __position={6} __code={'<div style={{ maxWidth: 390 }}>\\n  <DataTable\\n    data={[\\n      {\\n        name: \\'Jon Snow\\',\\n        house: \\'Stark\\',\\n        region: \\'North\\',\\n        sigil: \\'Direwolf\\',\\n        isAlive: \\'Yes\\',\\n      },\\n      {\\n        name: \\'Robert\\',\\n        house: \\'Stark\\',\\n        region: \\'North\\',\\n        sigil: \\'Direwolf\\',\\n        isAlive: \\'No\\',\\n      },\\n      {\\n        name: \\'Rickon\\',\\n        house: \\'Stark\\',\\n        region: \\'North\\',\\n        sigil: \\'Direwolf\\',\\n        isAlive: \\'No\\',\\n      },\\n      {\\n        name: \\'Robert\\',\\n        house: \\'Baratheon\\',\\n        region: \\'Stormlands\\',\\n        sigil: \\'Black Stag\\',\\n        isAlive: \\'No\\',\\n      },\\n      {\\n        name: \\'Cercei\\',\\n        house: \\'Lannister\\',\\n        region: \\'Westerlands\\',\\n        sigil: \\'Golden Lion\\',\\n        isAlive: \\'Yes\\',\\n      },\\n    ]}\\n    pinFirstColumn\\n    columns={[\\n      {\\n        accessorKey: \\'name\\',\\n        cell: info => <strong>{info.getValue()}</strong>,\\n        header: () => (\\n          <span style={{ color: \\'var(--color-green)\\' }}>Name</span>\\n        ),\\n      },\\n      {\\n        accessorKey: \\'house\\',\\n        header: () => (\\n          <span style={{ color: \\'var(--color-green)\\' }}>House</span>\\n        ),\\n      },\\n      {\\n        accessorKey: \\'region\\',\\n        header: () => (\\n          <span style={{ color: \\'var(--color-green)\\' }}>Region</span>\\n        ),\\n      },\\n      {\\n        accessorKey: \\'sigil\\',\\n        header: () => (\\n          <span style={{ color: \\'var(--color-green)\\' }}>Sigil</span>\\n        ),\\n      },\\n      {\\n        accessorKey: \\'isAlive\\',\\n        cell: info => (info.getValue() == \\'Yes\\' ? \\'✅\\' : \\'❌\\'),\\n        header: () => (\\n          <span style={{ color: \\'var(--color-green)\\' }}>Alive</span>\\n        ),\\n      },\\n    ]}\\n  />\\n</div>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      DataTable,\n      DataDump,\n      Button,\n      Typography,\n      Menu,\n      axios,\n      useState,\n      useCallback,\n      useEffect,\n      useMemo,\n      sortBy,\n      Text,\n      Heading,\n      classNames,\n      styles,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <div style={{\n        maxWidth: 390\n      }}>\n    <DataTable data={[{\n          name: \"Jon Snow\",\n          house: \"Stark\",\n          region: \"North\",\n          sigil: \"Direwolf\",\n          isAlive: \"Yes\"\n        }, {\n          name: \"Robert\",\n          house: \"Stark\",\n          region: \"North\",\n          sigil: \"Direwolf\",\n          isAlive: \"No\"\n        }, {\n          name: \"Rickon\",\n          house: \"Stark\",\n          region: \"North\",\n          sigil: \"Direwolf\",\n          isAlive: \"No\"\n        }, {\n          name: \"Robert\",\n          house: \"Baratheon\",\n          region: \"Stormlands\",\n          sigil: \"Black Stag\",\n          isAlive: \"No\"\n        }, {\n          name: \"Cercei\",\n          house: \"Lannister\",\n          region: \"Westerlands\",\n          sigil: \"Golden Lion\",\n          isAlive: \"Yes\"\n        }]} pinFirstColumn columns={[{\n          accessorKey: \"name\",\n          cell: info => <strong>{info.getValue()}</strong>,\n          header: () => <span style={{\n            color: \"var(--color-green)\"\n          }}>Name</span>\n        }, {\n          accessorKey: \"house\",\n          header: () => <span style={{\n            color: \"var(--color-green)\"\n          }}>House</span>\n        }, {\n          accessorKey: \"region\",\n          header: () => <span style={{\n            color: \"var(--color-green)\"\n          }}>Region</span>\n        }, {\n          accessorKey: \"sigil\",\n          header: () => <span style={{\n            color: \"var(--color-green)\"\n          }}>Sigil</span>\n        }, {\n          accessorKey: \"isAlive\",\n          cell: info => info.getValue() == \"Yes\" ? \"✅\" : \"❌\",\n          header: () => <span style={{\n            color: \"var(--color-green)\"\n          }}>Alive</span>\n        }]} mdxType=\"DataTable\" />\n  </div>\n    </Playground>\n    <h2 {...{\n      \"id\": \"manual-sorting\"\n    }}>{`Manual sorting`}</h2>\n    <Playground __position={7} __code={'() => {\\n  const [sortingState, setSortingState] = useState([\\n    { id: \\'name\\', desc: false },\\n  ])\\n  const defaultData = useMemo(\\n    () => [\\n      {\\n        name: \\'Eddard\\',\\n        house: \\'Stark\\',\\n        region: \\'North\\',\\n        sigil: \\'Direwolf\\',\\n        isAlive: \\'No\\',\\n      },\\n      {\\n        name: \\'Catelyn\\',\\n        house: \\'Stark\\',\\n        region: \\'North\\',\\n        sigil: \\'Direwolf\\',\\n        isAlive: \\'No\\',\\n      },\\n      {\\n        name: \\'Jon Snow\\',\\n        house: \\'Stark\\',\\n        region: \\'North\\',\\n        sigil: \\'Direwolf\\',\\n        isAlive: \\'Yes\\',\\n      },\\n      {\\n        name: \\'Robert\\',\\n        house: \\'Stark\\',\\n        region: \\'North\\',\\n        sigil: \\'Direwolf\\',\\n        isAlive: \\'No\\',\\n      },\\n      {\\n        name: \\'Rickon\\',\\n        house: \\'Stark\\',\\n        region: \\'North\\',\\n        sigil: \\'Direwolf\\',\\n        isAlive: \\'No\\',\\n      },\\n      {\\n        name: \\'Robert\\',\\n        house: \\'Baratheon\\',\\n        region: \\'Stormlands\\',\\n        sigil: \\'Black Stag\\',\\n        isAlive: \\'No\\',\\n      },\\n      {\\n        name: \\'Cercei\\',\\n        house: \\'Lannister\\',\\n        region: \\'Westerlands\\',\\n        sigil: \\'Golden Lion\\',\\n        isAlive: \\'Yes\\',\\n      },\\n    ],\\n    [],\\n  )\\n  const sortedData = useMemo(() => {\\n    if (sortingState.length == 0) return defaultData\\n    return sortingState[0].desc\\n      ? sortBy(defaultData, [sortingState[0].id]).reverse()\\n      : sortBy(defaultData, [sortingState[0].id])\\n  }, [sortingState])\\n  const columns = [\\n    {\\n      accessorKey: \\'name\\',\\n      cell: info => <span>{info.getValue()}</span>,\\n    },\\n    {\\n      accessorKey: \\'house\\',\\n      cell: info => info.getValue(),\\n    },\\n    {\\n      accessorKey: \\'region\\',\\n      cell: info => info.getValue(),\\n    },\\n    {\\n      accessorKey: \\'sigil\\',\\n      cell: info => info.getValue(),\\n    },\\n    {\\n      accessorKey: \\'isAlive\\',\\n      accessorFn: row =>\\n        row.name === \\'Jon Snow\\' ? \\'Resurrected\\' : row.isAlive,\\n      cell: info => info.getValue(),\\n    },\\n  ]\\n  return (\\n    <div>\\n      <DataDump label=\\\"Sorting State\\\" data={sortingState} defaultOpen />\\n      <DataTable\\n        data={sortedData}\\n        columns={columns}\\n        sorting={{\\n          manualSorting: true,\\n          state: sortingState,\\n          onSortingChange: setSortingState,\\n          enableSortingRemoval: true,\\n        }}\\n      />\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      DataTable,\n      DataDump,\n      Button,\n      Typography,\n      Menu,\n      axios,\n      useState,\n      useCallback,\n      useEffect,\n      useMemo,\n      sortBy,\n      Text,\n      Heading,\n      classNames,\n      styles,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [sortingState, setSortingState] = useState([{\n          id: \"name\",\n          desc: false\n        }]);\n        const defaultData = useMemo(() => [{\n          name: \"Eddard\",\n          house: \"Stark\",\n          region: \"North\",\n          sigil: \"Direwolf\",\n          isAlive: \"No\"\n        }, {\n          name: \"Catelyn\",\n          house: \"Stark\",\n          region: \"North\",\n          sigil: \"Direwolf\",\n          isAlive: \"No\"\n        }, {\n          name: \"Jon Snow\",\n          house: \"Stark\",\n          region: \"North\",\n          sigil: \"Direwolf\",\n          isAlive: \"Yes\"\n        }, {\n          name: \"Robert\",\n          house: \"Stark\",\n          region: \"North\",\n          sigil: \"Direwolf\",\n          isAlive: \"No\"\n        }, {\n          name: \"Rickon\",\n          house: \"Stark\",\n          region: \"North\",\n          sigil: \"Direwolf\",\n          isAlive: \"No\"\n        }, {\n          name: \"Robert\",\n          house: \"Baratheon\",\n          region: \"Stormlands\",\n          sigil: \"Black Stag\",\n          isAlive: \"No\"\n        }, {\n          name: \"Cercei\",\n          house: \"Lannister\",\n          region: \"Westerlands\",\n          sigil: \"Golden Lion\",\n          isAlive: \"Yes\"\n        }], []);\n        const sortedData = useMemo(() => {\n          if (sortingState.length == 0) return defaultData;\n          return sortingState[0].desc ? sortBy(defaultData, [sortingState[0].id]).reverse() : sortBy(defaultData, [sortingState[0].id]);\n        }, [sortingState]);\n        const columns = [{\n          accessorKey: \"name\",\n          cell: info => <span>{info.getValue()}</span>\n        }, {\n          accessorKey: \"house\",\n          cell: info => info.getValue()\n        }, {\n          accessorKey: \"region\",\n          cell: info => info.getValue()\n        }, {\n          accessorKey: \"sigil\",\n          cell: info => info.getValue()\n        }, {\n          accessorKey: \"isAlive\",\n          accessorFn: row => row.name === \"Jon Snow\" ? \"Resurrected\" : row.isAlive,\n          cell: info => info.getValue()\n        }];\n        return <div>\n        <DataDump label=\"Sorting State\" data={sortingState} defaultOpen mdxType=\"DataDump\" />\n        <DataTable data={sortedData} columns={columns} sorting={{\n            manualSorting: true,\n            state: sortingState,\n            onSortingChange: setSortingState,\n            enableSortingRemoval: true\n          }} mdxType=\"DataTable\" />\n      </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"manual-pagination\"\n    }}>{`Manual pagination`}</h2>\n    <Playground __position={8} __code={'() => {\\n  const [posts, setPosts] = useState([])\\n  const [{ pageIndex, pageSize }, setPagination] = useState({\\n    pageIndex: 0,\\n    pageSize: 10,\\n  })\\n  useEffect(() => {\\n    const url = `https://jsonplaceholder.typicode.com/posts?_page=${pageIndex +\\n      1}&_limit=${pageSize}`\\n    axios.get(url).then(response => {\\n      setPosts(response.data)\\n    })\\n  }, [pageIndex, pageSize])\\n  const pagination = useMemo(\\n    () => ({\\n      pageIndex,\\n      pageSize,\\n    }),\\n    [pageIndex, pageSize],\\n  )\\n  const totalItems = 100\\n  const columns = useMemo(\\n    () => [\\n      {\\n        accessorFn: row => row.id,\\n        id: \\'id\\',\\n        cell: info => info.getValue(),\\n      },\\n      {\\n        accessorFn: row => row.title,\\n        id: \\'title\\',\\n        cell: info => info.getValue(),\\n      },\\n      {\\n        accessorFn: row => row.body,\\n        id: \\'body\\',\\n        cell: info => info.getValue(),\\n      },\\n    ],\\n    [],\\n  )\\n  return (\\n    <div>\\n      <DataTable\\n        data={posts}\\n        columns={columns}\\n        pagination={{\\n          manualPagination: true,\\n          onPaginationChange: setPagination,\\n          pageCount: Math.ceil(totalItems / pageSize),\\n          totalItems,\\n          state: pagination,\\n        }}\\n        height={400}\\n        stickyHeader\\n      />\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      DataTable,\n      DataDump,\n      Button,\n      Typography,\n      Menu,\n      axios,\n      useState,\n      useCallback,\n      useEffect,\n      useMemo,\n      sortBy,\n      Text,\n      Heading,\n      classNames,\n      styles,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [posts, setPosts] = useState([]);\n        const [{\n          pageIndex,\n          pageSize\n        }, setPagination] = useState({\n          pageIndex: 0,\n          pageSize: 10\n        });\n        useEffect(() => {\n          const url = `https://jsonplaceholder.typicode.com/posts?_page=${pageIndex + 1}&_limit=${pageSize}`;\n          axios.get(url).then(response => {\n            setPosts(response.data);\n          });\n        }, [pageIndex, pageSize]);\n        const pagination = useMemo(() => ({\n          pageIndex,\n          pageSize\n        }), [pageIndex, pageSize]);\n        const totalItems = 100;\n        const columns = useMemo(() => [{\n          accessorFn: row => row.id,\n          id: \"id\",\n          cell: info => info.getValue()\n        }, {\n          accessorFn: row => row.title,\n          id: \"title\",\n          cell: info => info.getValue()\n        }, {\n          accessorFn: row => row.body,\n          id: \"body\",\n          cell: info => info.getValue()\n        }], []);\n        return <div>\n        <DataTable data={posts} columns={columns} pagination={{\n            manualPagination: true,\n            onPaginationChange: setPagination,\n            pageCount: Math.ceil(totalItems / pageSize),\n            totalItems,\n            state: pagination\n          }} height={400} stickyHeader mdxType=\"DataTable\" />\n      </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"table-with-footer-row\"\n    }}>{`Table with footer row`}</h2>\n    <Playground __position={9} __code={'<DataTable\\n  height={400}\\n  pagination={{ manualPagination: false, itemsPerPage: [10, 20, 30] }}\\n  sorting={{ manualSorting: false }}\\n  data={[\\n    {\\n      name: \\'Eddard\\',\\n      points: \\'1,000,000\\',\\n      chance: 5,\\n      power: \\'50,000\\',\\n    },\\n    {\\n      name: \\'Catelyn\\',\\n      points: \\'2,000,000\\',\\n      chance: 5,\\n      power: \\'40,000\\',\\n    },\\n    {\\n      name: \\'Jon\\',\\n      points: \\'1,250,000\\',\\n      chance: 8,\\n      power: \\'20,000\\',\\n    },\\n    {\\n      name: \\'Robert\\',\\n      points: \\'1,000,000\\',\\n      chance: 5,\\n      power: \\'50,000\\',\\n    },\\n    {\\n      name: \\'Rickon\\',\\n      points: \\'2,000,000\\',\\n      chance: 5,\\n      power: \\'40,000\\',\\n    },\\n    {\\n      name: \\'Robert\\',\\n      points: \\'1,250,000\\',\\n      chance: 8,\\n      power: \\'20,000\\',\\n    },\\n    {\\n      name: \\'Cersei\\',\\n      points: \\'1,000,000\\',\\n      chance: 5,\\n      power: \\'50,000\\',\\n    },\\n    {\\n      name: \\'Sansa\\',\\n      points: \\'2,000,000\\',\\n      chance: 5,\\n      power: \\'40,000\\',\\n    },\\n    {\\n      name: \\'Arya\\',\\n      points: \\'1,250,000\\',\\n      chance: 8,\\n      power: \\'20,000\\',\\n    },\\n    {\\n      name: \\'Bran\\',\\n      points: \\'1,000,000\\',\\n      chance: 5,\\n      power: \\'50,000\\',\\n    },\\n  ]}\\n  columns={[\\n    {\\n      id: \\'name\\',\\n      accessorKey: \\'name\\',\\n      header: \\'Name\\',\\n      footer: \\'Totals\\',\\n    },\\n    {\\n      id: \\'points\\',\\n      accessorKey: \\'points\\',\\n      header: () => (\\n        <div style={{ display: \\'flex\\', flex: 1 }}>\\n          <Typography align=\\\"end\\\" fontWeight=\\\"bold\\\">\\n            Points\\n          </Typography>\\n        </div>\\n      ),\\n      footer: () => (\\n        <Typography align=\\\"end\\\" fontWeight=\\\"bold\\\">\\n          10,050,400\\n        </Typography>\\n      ),\\n      cell: info => <Typography align=\\\"end\\\">{info.getValue()}</Typography>,\\n    },\\n    {\\n      id: \\'chance\\',\\n      accessorKey: \\'chance\\',\\n      header: () => (\\n        <div style={{ display: \\'flex\\', flex: 1 }}>\\n          <Typography align=\\\"end\\\" fontWeight=\\\"bold\\\">\\n            Chance (%)\\n          </Typography>\\n        </div>\\n      ),\\n      cell: info => <Typography align=\\\"end\\\">{info.getValue()}</Typography>,\\n    },\\n    {\\n      id: \\'power\\',\\n      accessorKey: \\'power\\',\\n      header: () => (\\n        <div style={{ display: \\'flex\\', flex: 1 }}>\\n          <Typography align=\\\"end\\\" fontWeight=\\\"bold\\\">\\n            Power\\n          </Typography>\\n        </div>\\n      ),\\n      footer: () => (\\n        <Typography align=\\\"end\\\" fontWeight=\\\"bold\\\">\\n          300,000\\n        </Typography>\\n      ),\\n      cell: info => <Typography align=\\\"end\\\">{info.getValue()}</Typography>,\\n    },\\n  ]}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      DataTable,\n      DataDump,\n      Button,\n      Typography,\n      Menu,\n      axios,\n      useState,\n      useCallback,\n      useEffect,\n      useMemo,\n      sortBy,\n      Text,\n      Heading,\n      classNames,\n      styles,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <DataTable height={400} pagination={{\n        manualPagination: false,\n        itemsPerPage: [10, 20, 30]\n      }} sorting={{\n        manualSorting: false\n      }} data={[{\n        name: \"Eddard\",\n        points: \"1,000,000\",\n        chance: 5,\n        power: \"50,000\"\n      }, {\n        name: \"Catelyn\",\n        points: \"2,000,000\",\n        chance: 5,\n        power: \"40,000\"\n      }, {\n        name: \"Jon\",\n        points: \"1,250,000\",\n        chance: 8,\n        power: \"20,000\"\n      }, {\n        name: \"Robert\",\n        points: \"1,000,000\",\n        chance: 5,\n        power: \"50,000\"\n      }, {\n        name: \"Rickon\",\n        points: \"2,000,000\",\n        chance: 5,\n        power: \"40,000\"\n      }, {\n        name: \"Robert\",\n        points: \"1,250,000\",\n        chance: 8,\n        power: \"20,000\"\n      }, {\n        name: \"Cersei\",\n        points: \"1,000,000\",\n        chance: 5,\n        power: \"50,000\"\n      }, {\n        name: \"Sansa\",\n        points: \"2,000,000\",\n        chance: 5,\n        power: \"40,000\"\n      }, {\n        name: \"Arya\",\n        points: \"1,250,000\",\n        chance: 8,\n        power: \"20,000\"\n      }, {\n        name: \"Bran\",\n        points: \"1,000,000\",\n        chance: 5,\n        power: \"50,000\"\n      }]} columns={[{\n        id: \"name\",\n        accessorKey: \"name\",\n        header: \"Name\",\n        footer: \"Totals\"\n      }, {\n        id: \"points\",\n        accessorKey: \"points\",\n        header: () => <div style={{\n          display: \"flex\",\n          flex: 1\n        }}>\n            <Typography align=\"end\" fontWeight=\"bold\" mdxType=\"Typography\">\n              Points\n            </Typography>\n          </div>,\n        footer: () => <Typography align=\"end\" fontWeight=\"bold\" mdxType=\"Typography\">\n            10,050,400\n          </Typography>,\n        cell: info => <Typography align=\"end\" mdxType=\"Typography\">{info.getValue()}</Typography>\n      }, {\n        id: \"chance\",\n        accessorKey: \"chance\",\n        header: () => <div style={{\n          display: \"flex\",\n          flex: 1\n        }}>\n            <Typography align=\"end\" fontWeight=\"bold\" mdxType=\"Typography\">\n              Chance (%)\n            </Typography>\n          </div>,\n        cell: info => <Typography align=\"end\" mdxType=\"Typography\">{info.getValue()}</Typography>\n      }, {\n        id: \"power\",\n        accessorKey: \"power\",\n        header: () => <div style={{\n          display: \"flex\",\n          flex: 1\n        }}>\n            <Typography align=\"end\" fontWeight=\"bold\" mdxType=\"Typography\">\n              Power\n            </Typography>\n          </div>,\n        footer: () => <Typography align=\"end\" fontWeight=\"bold\" mdxType=\"Typography\">\n            300,000\n          </Typography>,\n        cell: info => <Typography align=\"end\" mdxType=\"Typography\">{info.getValue()}</Typography>\n      }]} mdxType=\"DataTable\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"table-empty-state\"\n    }}>{`Table empty state`}</h2>\n    <p>{`The DataTable accepts any child component for an empty state. By default it will\ncenter-align any content vertically and horizontally.`}</p>\n    <p>{`Consider the context of the user to determine what to use for an empty state.\nAre they encountering an empty state because they're a new user? Have they added\ntoo many filters to the dataset? Can you provide them with an action to populate\ncontent?`}</p>\n    <Playground __position={10} __code={'<DataTable\\n  height={400}\\n  pagination={{ manualPagination: false, itemsPerPage: [10, 20, 30] }}\\n  sorting={{ manualSorting: false }}\\n  emptyState={\\n    <div className={classNames(styles.emptyState)}>\\n      <Heading level={5}>No items found</Heading>\\n      <Text>Update your search or filter selection</Text>\\n    </div>\\n  }\\n  data={[]}\\n  columns={[\\n    {\\n      id: \\'name\\',\\n      accessorKey: \\'name\\',\\n      header: \\'Name\\',\\n      footer: \\'Totals\\',\\n    },\\n    {\\n      id: \\'points\\',\\n      accessorKey: \\'points\\',\\n      header: () => (\\n        <Typography align=\\\"end\\\" fontWeight=\\\"bold\\\">\\n          Points\\n        </Typography>\\n      ),\\n      footer: () => (\\n        <Typography align=\\\"end\\\" fontWeight=\\\"bold\\\">\\n          $0.00\\n        </Typography>\\n      ),\\n      cell: info => <Typography align=\\\"end\\\">{info.getValue()}</Typography>,\\n    },\\n    {\\n      id: \\'chance\\',\\n      accessorKey: \\'chance\\',\\n      header: () => (\\n        <Typography align=\\\"end\\\" fontWeight=\\\"bold\\\">\\n          Chance (%)\\n        </Typography>\\n      ),\\n      cell: info => <Typography align=\\\"end\\\">{info.getValue()}</Typography>,\\n    },\\n    {\\n      id: \\'power\\',\\n      accessorKey: \\'power\\',\\n      header: () => (\\n        <Typography align=\\\"end\\\" fontWeight=\\\"bold\\\">\\n          Power\\n        </Typography>\\n      ),\\n      footer: () => (\\n        <Typography align=\\\"end\\\" fontWeight=\\\"bold\\\">\\n          $0.00\\n        </Typography>\\n      ),\\n      cell: info => <Typography align=\\\"end\\\">{info.getValue()}</Typography>,\\n    },\\n  ]}\\n></DataTable>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      DataTable,\n      DataDump,\n      Button,\n      Typography,\n      Menu,\n      axios,\n      useState,\n      useCallback,\n      useEffect,\n      useMemo,\n      sortBy,\n      Text,\n      Heading,\n      classNames,\n      styles,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <DataTable height={400} pagination={{\n        manualPagination: false,\n        itemsPerPage: [10, 20, 30]\n      }} sorting={{\n        manualSorting: false\n      }} emptyState={<div className={classNames(styles.emptyState)}>\n        <Heading level={5} mdxType=\"Heading\">No items found</Heading>\n        <Text mdxType=\"Text\">Update your search or filter selection</Text>\n      </div>} data={[]} columns={[{\n        id: \"name\",\n        accessorKey: \"name\",\n        header: \"Name\",\n        footer: \"Totals\"\n      }, {\n        id: \"points\",\n        accessorKey: \"points\",\n        header: () => <Typography align=\"end\" fontWeight=\"bold\" mdxType=\"Typography\">\n            Points\n          </Typography>,\n        footer: () => <Typography align=\"end\" fontWeight=\"bold\" mdxType=\"Typography\">\n            $0.00\n          </Typography>,\n        cell: info => <Typography align=\"end\" mdxType=\"Typography\">{info.getValue()}</Typography>\n      }, {\n        id: \"chance\",\n        accessorKey: \"chance\",\n        header: () => <Typography align=\"end\" fontWeight=\"bold\" mdxType=\"Typography\">\n            Chance (%)\n          </Typography>,\n        cell: info => <Typography align=\"end\" mdxType=\"Typography\">{info.getValue()}</Typography>\n      }, {\n        id: \"power\",\n        accessorKey: \"power\",\n        header: () => <Typography align=\"end\" fontWeight=\"bold\" mdxType=\"Typography\">\n            Power\n          </Typography>,\n        footer: () => <Typography align=\"end\" fontWeight=\"bold\" mdxType=\"Typography\">\n            $0.00\n          </Typography>,\n        cell: info => <Typography align=\"end\" mdxType=\"Typography\">{info.getValue()}</Typography>\n      }]} mdxType=\"DataTable\"></DataTable>\n    </Playground>\n    <h2 {...{\n      \"id\": \"table-with-manual-column-sizing\"\n    }}>{`Table with manual column sizing`}</h2>\n    <Playground __position={11} __code={'<DataTable\\n  pagination={{ manualPagination: false, itemsPerPage: [10, 20, 30] }}\\n  sorting={{ manualSorting: false }}\\n  data={[\\n    {\\n      name:\\n        \\'Daenerys Stormborn of House Targaryen, the First of Her Name, Queen of the Andals and the First Men, Protector of the Seven Kingdoms, the Mother of Dragons, the Khaleesi of the Great Grass Sea, the Unburnt, the Breaker of Chains.\\',\\n      points: \\'1,000,000\\',\\n      chance: 5,\\n      power: \\'50,000\\',\\n    },\\n    {\\n      name: \\'Aegon “The Conqueror” Targaryen and Rhaenys Targaryen\\',\\n      points: \\'2,000,000\\',\\n      chance: 5,\\n      power: \\'40,000\\',\\n    },\\n    {\\n      name: \\'Jaehaerys “The Old King” Targaryen and Alysanne Targaryen\\',\\n      points: \\'1,250,000\\',\\n      chance: 8,\\n      power: \\'20,000\\',\\n    },\\n  ]}\\n  columns={[\\n    {\\n      id: \\'name\\',\\n      accessorKey: \\'name\\',\\n      header: \\'Name\\',\\n      footer: \\'Totals\\',\\n      cell: info => (\\n        <Typography numberOfLines={1}>{info.getValue()}</Typography>\\n      ),\\n      size: 538,\\n      minSize: 438,\\n      maxSize: 538,\\n    },\\n    {\\n      id: \\'points\\',\\n      accessorKey: \\'points\\',\\n      header: () => (\\n        <div style={{ display: \\'flex\\', flex: 1 }}>\\n          <Typography align=\\\"end\\\" fontWeight=\\\"bold\\\">\\n            Points\\n          </Typography>\\n        </div>\\n      ),\\n      footer: () => (\\n        <Typography align=\\\"end\\\" fontWeight=\\\"bold\\\">\\n          10,050,400\\n        </Typography>\\n      ),\\n      cell: info => <Typography align=\\\"end\\\">{info.getValue()}</Typography>,\\n      size: 268,\\n      minSize: 168,\\n      maxSize: 268,\\n    },\\n    {\\n      id: \\'chance\\',\\n      accessorKey: \\'chance\\',\\n      header: () => (\\n        <div style={{ display: \\'flex\\', flex: 1 }}>\\n          <Typography align=\\\"end\\\" fontWeight=\\\"bold\\\">\\n            Chance (%)\\n          </Typography>\\n        </div>\\n      ),\\n      cell: info => <Typography align=\\\"end\\\">{info.getValue()}</Typography>,\\n      size: 268,\\n      minSize: 168,\\n      maxSize: 268,\\n    },\\n    {\\n      id: \\'power\\',\\n      accessorKey: \\'power\\',\\n      header: () => (\\n        <div style={{ display: \\'flex\\', flex: 1 }}>\\n          <Typography align=\\\"end\\\" fontWeight=\\\"bold\\\">\\n            Power\\n          </Typography>\\n        </div>\\n      ),\\n      footer: () => (\\n        <Typography align=\\\"end\\\" fontWeight=\\\"bold\\\">\\n          300,000\\n        </Typography>\\n      ),\\n      cell: info => <Typography align=\\\"end\\\">{info.getValue()}</Typography>,\\n      size: 268,\\n      minSize: 168,\\n      maxSize: 268,\\n    },\\n  ]}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      DataTable,\n      DataDump,\n      Button,\n      Typography,\n      Menu,\n      axios,\n      useState,\n      useCallback,\n      useEffect,\n      useMemo,\n      sortBy,\n      Text,\n      Heading,\n      classNames,\n      styles,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <DataTable pagination={{\n        manualPagination: false,\n        itemsPerPage: [10, 20, 30]\n      }} sorting={{\n        manualSorting: false\n      }} data={[{\n        name: \"Daenerys Stormborn of House Targaryen, the First of Her Name, Queen of the Andals and the First Men, Protector of the Seven Kingdoms, the Mother of Dragons, the Khaleesi of the Great Grass Sea, the Unburnt, the Breaker of Chains.\",\n        points: \"1,000,000\",\n        chance: 5,\n        power: \"50,000\"\n      }, {\n        name: \"Aegon “The Conqueror” Targaryen and Rhaenys Targaryen\",\n        points: \"2,000,000\",\n        chance: 5,\n        power: \"40,000\"\n      }, {\n        name: \"Jaehaerys “The Old King” Targaryen and Alysanne Targaryen\",\n        points: \"1,250,000\",\n        chance: 8,\n        power: \"20,000\"\n      }]} columns={[{\n        id: \"name\",\n        accessorKey: \"name\",\n        header: \"Name\",\n        footer: \"Totals\",\n        cell: info => <Typography numberOfLines={1} mdxType=\"Typography\">{info.getValue()}</Typography>,\n        size: 538,\n        minSize: 438,\n        maxSize: 538\n      }, {\n        id: \"points\",\n        accessorKey: \"points\",\n        header: () => <div style={{\n          display: \"flex\",\n          flex: 1\n        }}>\n            <Typography align=\"end\" fontWeight=\"bold\" mdxType=\"Typography\">\n              Points\n            </Typography>\n          </div>,\n        footer: () => <Typography align=\"end\" fontWeight=\"bold\" mdxType=\"Typography\">\n            10,050,400\n          </Typography>,\n        cell: info => <Typography align=\"end\" mdxType=\"Typography\">{info.getValue()}</Typography>,\n        size: 268,\n        minSize: 168,\n        maxSize: 268\n      }, {\n        id: \"chance\",\n        accessorKey: \"chance\",\n        header: () => <div style={{\n          display: \"flex\",\n          flex: 1\n        }}>\n            <Typography align=\"end\" fontWeight=\"bold\" mdxType=\"Typography\">\n              Chance (%)\n            </Typography>\n          </div>,\n        cell: info => <Typography align=\"end\" mdxType=\"Typography\">{info.getValue()}</Typography>,\n        size: 268,\n        minSize: 168,\n        maxSize: 268\n      }, {\n        id: \"power\",\n        accessorKey: \"power\",\n        header: () => <div style={{\n          display: \"flex\",\n          flex: 1\n        }}>\n            <Typography align=\"end\" fontWeight=\"bold\" mdxType=\"Typography\">\n              Power\n            </Typography>\n          </div>,\n        footer: () => <Typography align=\"end\" fontWeight=\"bold\" mdxType=\"Typography\">\n            300,000\n          </Typography>,\n        cell: info => <Typography align=\"end\" mdxType=\"Typography\">{info.getValue()}</Typography>,\n        size: 268,\n        minSize: 168,\n        maxSize: 268\n      }]} mdxType=\"DataTable\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"design--usage-guidelines\"\n    }}>{`Design & usage guidelines`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`DataTable`}</inlineCode>{` component is a great solution if you are looking to display data\nin a tabular way while giving your user the ability to sort, paginate or filter\nthat data, this can be implemented on the server side or on the client side\ndepending on your needs.`}</p>\n    <p>{`A best practice in Data Table presentation is to ensure that all columns with\nnumerical data (and their headers) round to the same decimal point, and are\nright-aligned. This makes it much easier for the reader to quickly parse large\ndistinctions in dollar amounts, inventory counts, and other key business data.`}</p>\n    <p>{`To list more complex collections of information (such as multi-line content like\na detailed property address), you may want to consider the\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://atlantis.getjobber.com/components/list\"\n      }}>{`List`}</a>{` component. If you have a\nsmall list of information with a 1:1 label-to-data relationship (for example,\nthe issued and due dates on an invoice), consider using\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://atlantis.getjobber.com/components/description-list\"\n      }}>{`DescriptionList`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"responsiveness\"\n    }}>{`Responsiveness`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`DataTable`}</inlineCode>{` component has the option to handle responsive design, these\noptions will allow us to fix the header or the first left column depending on\nyour needs, this will allow the user a more efficient way to visualize the data.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}
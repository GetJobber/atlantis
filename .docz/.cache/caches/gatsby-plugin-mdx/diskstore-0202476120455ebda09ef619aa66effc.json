{"expireTime":9007200931831330000,"key":"gatsby-plugin-mdx-entire-payload-f71ddf1f46dd72cf742c1a580648c4b4-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":114,"offset":115},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":117},"end":{"line":5,"column":29,"offset":145},"indent":[]}},{"type":"import","value":"import { Playground, Props } from \"docz\";\nimport { useState } from \"react\";\nimport { ComponentStatus } from \"@jobber/docx\";\nimport { InputText } from \"@jobber/components/InputText\";\nimport { Button } from \"@jobber/components/Button\";\nimport { Content } from \"@jobber/components/Content\";\nimport { Text } from \"@jobber/components/Text\";","position":{"start":{"line":8,"column":1,"offset":148},"end":{"line":14,"column":48,"offset":483},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Input Text","position":{"start":{"line":16,"column":3,"offset":487},"end":{"line":16,"column":13,"offset":497},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":485},"end":{"line":16,"column":13,"offset":497},"indent":[]}},{"type":"jsx","value":"<ComponentStatus stage=\"ready\" responsive=\"yes\" accessible=\"yes\" />","position":{"start":{"line":18,"column":1,"offset":499},"end":{"line":18,"column":68,"offset":566},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Input text is used in forms that accept short or long answers from users.","position":{"start":{"line":20,"column":1,"offset":568},"end":{"line":20,"column":74,"offset":641},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":568},"end":{"line":20,"column":74,"offset":641},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"import { InputText } from \"@jobber/components/InputText\";","position":{"start":{"line":22,"column":1,"offset":643},"end":{"line":24,"column":4,"offset":710},"indent":[1,1]}},{"type":"jsx","value":"<Playground>\n  <InputText defaultValue=\"Rocinante\" placeholder=\"Ship Name\" />\n</Playground>","position":{"start":{"line":26,"column":1,"offset":712},"end":{"line":28,"column":14,"offset":803},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Props","position":{"start":{"line":30,"column":4,"offset":808},"end":{"line":30,"column":9,"offset":813},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":805},"end":{"line":30,"column":9,"offset":813},"indent":[]}},{"type":"jsx","value":"<Props of={InputText} />","position":{"start":{"line":32,"column":1,"offset":815},"end":{"line":32,"column":25,"offset":839},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Controlled","position":{"start":{"line":34,"column":4,"offset":844},"end":{"line":34,"column":14,"offset":854},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":841},"end":{"line":34,"column":14,"offset":854},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Use this to allow users to provide short answers.","position":{"start":{"line":36,"column":1,"offset":856},"end":{"line":36,"column":50,"offset":905},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":856},"end":{"line":36,"column":50,"offset":905},"indent":[]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const [age, setAge] = useState(\"Veintisiete\");\n    return (\n      <InputText\n        value={age}\n        onChange={setAge}\n        name=\"age\"\n        placeholder=\"Age in words\"\n      />\n    );\n  }}\n</Playground>","position":{"start":{"line":38,"column":1,"offset":907},"end":{"line":50,"column":14,"offset":1146},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Multiline","position":{"start":{"line":52,"column":4,"offset":1151},"end":{"line":52,"column":13,"offset":1160},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":1148},"end":{"line":52,"column":13,"offset":1160},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Use this to allow users to provide long answers. The default number of rows is\nthree. Note that ","position":{"start":{"line":54,"column":1,"offset":1162},"end":{"line":55,"column":18,"offset":1258},"indent":[1]}},{"type":"inlineCode","value":"loading={true}","position":{"start":{"line":55,"column":18,"offset":1258},"end":{"line":55,"column":34,"offset":1274},"indent":[]}},{"type":"text","value":" is unimplemented for multiline input text.","position":{"start":{"line":55,"column":34,"offset":1274},"end":{"line":55,"column":77,"offset":1317},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":1162},"end":{"line":55,"column":77,"offset":1317},"indent":[1]}},{"type":"jsx","value":"<Playground>\n  <InputText\n    multiline={true}\n    placeholder=\"Describe your age\"\n    name=\"describeAge\"\n  />\n</Playground>","position":{"start":{"line":57,"column":1,"offset":1319},"end":{"line":63,"column":14,"offset":1443},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Multiline with minimum and maximum","position":{"start":{"line":65,"column":4,"offset":1448},"end":{"line":65,"column":38,"offset":1482},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":1445},"end":{"line":65,"column":38,"offset":1482},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is to allow flexibility in the displayed textarea size as the user types.\nThe textarea will start at a specified minimum and grow to a specified maximum.","position":{"start":{"line":67,"column":1,"offset":1484},"end":{"line":68,"column":80,"offset":1642},"indent":[1]}}],"position":{"start":{"line":67,"column":1,"offset":1484},"end":{"line":68,"column":80,"offset":1642},"indent":[1]}},{"type":"jsx","value":"<Playground>\n  <InputText\n    defaultValue=\"Rocinante\"\n    multiline={true}\n    rows={{ min: 1, max: 4 }}\n  />\n</Playground>","position":{"start":{"line":70,"column":1,"offset":1644},"end":{"line":76,"column":14,"offset":1768},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Prefix/suffix","position":{"start":{"line":78,"column":4,"offset":1773},"end":{"line":78,"column":17,"offset":1786},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":1770},"end":{"line":78,"column":17,"offset":1786},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Use a prefix or suffix when additional visual cues about an input's function may\nbe helpful.","position":{"start":{"line":80,"column":1,"offset":1788},"end":{"line":81,"column":12,"offset":1880},"indent":[1]}}],"position":{"start":{"line":80,"column":1,"offset":1788},"end":{"line":81,"column":12,"offset":1880},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Some fields have common visual patterns such as “search” having a magnifying\nglass icon, “Select” having a downwards arrow, or currency inputs having a\ncurrency symbol. These signifiers reinforce the purpose of the input to increase\n","position":{"start":{"line":83,"column":1,"offset":1882},"end":{"line":86,"column":1,"offset":2115},"indent":[1,1,1]}},{"type":"link","title":null,"url":"https://www.nngroup.com/articles/ten-usability-heuristics/","children":[{"type":"text","value":"Recognition over Recall","position":{"start":{"line":86,"column":2,"offset":2116},"end":{"line":86,"column":25,"offset":2139},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":2115},"end":{"line":86,"column":86,"offset":2200},"indent":[]}},{"type":"text","value":"\nand align the input with\n","position":{"start":{"line":86,"column":86,"offset":2200},"end":{"line":88,"column":1,"offset":2226},"indent":[1,1]}},{"type":"link","title":null,"url":"https://www.nngroup.com/articles/ten-usability-heuristics/","children":[{"type":"text","value":"Consistency and Standards","position":{"start":{"line":88,"column":2,"offset":2227},"end":{"line":88,"column":27,"offset":2252},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":2226},"end":{"line":88,"column":88,"offset":2313},"indent":[]}},{"type":"text","value":".\nWith clearer guidance around the purpose of inputs, the user is able to better\nfocus on the task at hand.","position":{"start":{"line":88,"column":88,"offset":2313},"end":{"line":90,"column":27,"offset":2420},"indent":[1,1]}}],"position":{"start":{"line":83,"column":1,"offset":1882},"end":{"line":90,"column":27,"offset":2420},"indent":[1,1,1,1,1,1,1]}},{"type":"jsx","value":"<Playground>\n  <Content>\n    <InputText\n      defaultValue=\"1,000,000\"\n      placeholder=\"Invoice Total\"\n      prefix={{ label: \"$\", icon: \"invoice\" }}\n      suffix={{ label: \".00\" }}\n    />\n    <InputText\n      placeholder=\"Search\"\n      prefix={{ icon: \"search\" }}\n      suffix={{\n        icon: \"cross\",\n        ariaLabel: \"clear search\",\n        onClick: () => alert(\"This could clear a search value\"),\n      }}\n    />\n  </Content>\n</Playground>","position":{"start":{"line":92,"column":1,"offset":2422},"end":{"line":110,"column":14,"offset":2870},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Validation message","position":{"start":{"line":112,"column":4,"offset":2875},"end":{"line":112,"column":22,"offset":2893},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":2872},"end":{"line":112,"column":22,"offset":2893},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can add your own custom validation messages on a field. However, this\nshouldn't replace server-side validation.","position":{"start":{"line":114,"column":1,"offset":2895},"end":{"line":115,"column":42,"offset":3010},"indent":[1]}}],"position":{"start":{"line":114,"column":1,"offset":2895},"end":{"line":115,"column":42,"offset":3010},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"🔱 Atlantis utilizes ","position":{"start":{"line":117,"column":1,"offset":3012},"end":{"line":117,"column":22,"offset":3033},"indent":[]}},{"type":"link","title":null,"url":"https://react-hook-form.com/","children":[{"type":"text","value":"React Hook Forms","position":{"start":{"line":117,"column":23,"offset":3034},"end":{"line":117,"column":39,"offset":3050},"indent":[]}}],"position":{"start":{"line":117,"column":22,"offset":3033},"end":{"line":117,"column":70,"offset":3081},"indent":[]}},{"type":"text","value":" to handle\n","position":{"start":{"line":117,"column":70,"offset":3081},"end":{"line":118,"column":1,"offset":3092},"indent":[1]}},{"type":"inlineCode","value":"input","position":{"start":{"line":118,"column":1,"offset":3092},"end":{"line":118,"column":8,"offset":3099},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":118,"column":8,"offset":3099},"end":{"line":118,"column":13,"offset":3104},"indent":[]}},{"type":"inlineCode","value":"form","position":{"start":{"line":118,"column":13,"offset":3104},"end":{"line":118,"column":19,"offset":3110},"indent":[]}},{"type":"text","value":" validation. This means that the\n","position":{"start":{"line":118,"column":19,"offset":3110},"end":{"line":119,"column":1,"offset":3143},"indent":[1]}},{"type":"link","title":null,"url":"https://react-hook-form.com/api#register","children":[{"type":"text","value":"React Hook Forms validation options","position":{"start":{"line":119,"column":2,"offset":3144},"end":{"line":119,"column":37,"offset":3179},"indent":[]}}],"position":{"start":{"line":119,"column":1,"offset":3143},"end":{"line":119,"column":80,"offset":3222},"indent":[]}},{"type":"text","value":"\nare available out of the box.","position":{"start":{"line":119,"column":80,"offset":3222},"end":{"line":120,"column":30,"offset":3252},"indent":[1]}}],"position":{"start":{"line":117,"column":1,"offset":3012},"end":{"line":120,"column":30,"offset":3252},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This includes, but is not limited to:","position":{"start":{"line":122,"column":1,"offset":3254},"end":{"line":122,"column":38,"offset":3291},"indent":[]}}],"position":{"start":{"line":122,"column":1,"offset":3254},"end":{"line":122,"column":38,"offset":3291},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"required","position":{"start":{"line":124,"column":3,"offset":3295},"end":{"line":124,"column":13,"offset":3305},"indent":[]}},{"type":"text","value":" - A Boolean which, if true, indicates that the input must have a\nvalue.","position":{"start":{"line":124,"column":13,"offset":3305},"end":{"line":125,"column":9,"offset":3379},"indent":[3]}}],"position":{"start":{"line":124,"column":3,"offset":3295},"end":{"line":125,"column":9,"offset":3379},"indent":[3]}}],"position":{"start":{"line":124,"column":1,"offset":3293},"end":{"line":125,"column":9,"offset":3379},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"maxLength","position":{"start":{"line":126,"column":3,"offset":3382},"end":{"line":126,"column":14,"offset":3393},"indent":[]}},{"type":"text","value":" - The maximum length of the value to accept for this input.","position":{"start":{"line":126,"column":14,"offset":3393},"end":{"line":126,"column":74,"offset":3453},"indent":[]}}],"position":{"start":{"line":126,"column":3,"offset":3382},"end":{"line":126,"column":74,"offset":3453},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":3380},"end":{"line":126,"column":74,"offset":3453},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"minLength","position":{"start":{"line":127,"column":3,"offset":3456},"end":{"line":127,"column":14,"offset":3467},"indent":[]}},{"type":"text","value":" - The minimum length of the value to accept for this input.","position":{"start":{"line":127,"column":14,"offset":3467},"end":{"line":127,"column":74,"offset":3527},"indent":[]}}],"position":{"start":{"line":127,"column":3,"offset":3456},"end":{"line":127,"column":74,"offset":3527},"indent":[]}}],"position":{"start":{"line":127,"column":1,"offset":3454},"end":{"line":127,"column":74,"offset":3527},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"pattern","position":{"start":{"line":128,"column":3,"offset":3530},"end":{"line":128,"column":12,"offset":3539},"indent":[]}},{"type":"text","value":" - The regex pattern for the input.","position":{"start":{"line":128,"column":12,"offset":3539},"end":{"line":128,"column":47,"offset":3574},"indent":[]}}],"position":{"start":{"line":128,"column":3,"offset":3530},"end":{"line":128,"column":47,"offset":3574},"indent":[]}}],"position":{"start":{"line":128,"column":1,"offset":3528},"end":{"line":128,"column":47,"offset":3574},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"validate","position":{"start":{"line":129,"column":3,"offset":3577},"end":{"line":129,"column":13,"offset":3587},"indent":[]}},{"type":"text","value":" - You can pass a callback function as the argument to validate, or\nyou can pass an object of callback functions to validate all of them.","position":{"start":{"line":129,"column":13,"offset":3587},"end":{"line":130,"column":72,"offset":3726},"indent":[3]}}],"position":{"start":{"line":129,"column":3,"offset":3577},"end":{"line":130,"column":72,"offset":3726},"indent":[3]}}],"position":{"start":{"line":129,"column":1,"offset":3575},"end":{"line":130,"column":72,"offset":3726},"indent":[1]}}],"position":{"start":{"line":124,"column":1,"offset":3293},"end":{"line":130,"column":72,"offset":3726},"indent":[1,1,1,1,1,1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    return (\n      <InputText\n        name=\"age\"\n        placeholder=\"What's your age\"\n        validations={{\n          required: {\n            value: true,\n            message: \"You have to tell us your age\",\n          },\n          validate: validations,\n        }}\n      />\n    );\n    function validations(val) {\n      if (val.length > 0 && !isNaN(val)) {\n        return \"Type your age in words please.\";\n      }\n      if (val.length >= 10) {\n        return \"That seems too old.\";\n      }\n      return true;\n    }\n  }}\n</Playground>","position":{"start":{"line":132,"column":1,"offset":3728},"end":{"line":157,"column":14,"offset":4286},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"States","position":{"start":{"line":159,"column":4,"offset":4291},"end":{"line":159,"column":10,"offset":4297},"indent":[]}}],"position":{"start":{"line":159,"column":1,"offset":4288},"end":{"line":159,"column":10,"offset":4297},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Disabled","position":{"start":{"line":161,"column":5,"offset":4303},"end":{"line":161,"column":13,"offset":4311},"indent":[]}}],"position":{"start":{"line":161,"column":1,"offset":4299},"end":{"line":161,"column":13,"offset":4311},"indent":[]}},{"type":"jsx","value":"<Playground>\n  <InputText\n    placeholder=\"Credit card\"\n    value=\"**** **** **** 1234\"\n    disabled={true}\n    name=\"creditCard\"\n  />\n</Playground>","position":{"start":{"line":163,"column":1,"offset":4313},"end":{"line":170,"column":14,"offset":4461},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Read-only","position":{"start":{"line":172,"column":5,"offset":4467},"end":{"line":172,"column":14,"offset":4476},"indent":[]}}],"position":{"start":{"line":172,"column":1,"offset":4463},"end":{"line":172,"column":14,"offset":4476},"indent":[]}},{"type":"jsx","value":"<Playground>\n  <InputText\n    placeholder=\"Your referral code\"\n    value=\"WXYZ100\"\n    readonly={true}\n    name=\"referralCode\"\n  />\n</Playground>","position":{"start":{"line":174,"column":1,"offset":4478},"end":{"line":181,"column":14,"offset":4623},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Invalid","position":{"start":{"line":183,"column":5,"offset":4629},"end":{"line":183,"column":12,"offset":4636},"indent":[]}}],"position":{"start":{"line":183,"column":1,"offset":4625},"end":{"line":183,"column":12,"offset":4636},"indent":[]}},{"type":"jsx","value":"<Playground>\n  <InputText\n    placeholder=\"Email\"\n    value=\"atlantis\"\n    invalid={true}\n    name=\"emailAddress\"\n  />\n</Playground>","position":{"start":{"line":185,"column":1,"offset":4638},"end":{"line":192,"column":14,"offset":4770},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Sizes","position":{"start":{"line":194,"column":4,"offset":4775},"end":{"line":194,"column":9,"offset":4780},"indent":[]}}],"position":{"start":{"line":194,"column":1,"offset":4772},"end":{"line":194,"column":9,"offset":4780},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Small","position":{"start":{"line":196,"column":5,"offset":4786},"end":{"line":196,"column":10,"offset":4791},"indent":[]}}],"position":{"start":{"line":196,"column":1,"offset":4782},"end":{"line":196,"column":10,"offset":4791},"indent":[]}},{"type":"jsx","value":"<Playground>\n  <InputText name=\"smallField\" size=\"small\" placeholder=\"Duration\" />\n</Playground>","position":{"start":{"line":198,"column":1,"offset":4793},"end":{"line":200,"column":14,"offset":4889},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Large","position":{"start":{"line":202,"column":5,"offset":4895},"end":{"line":202,"column":10,"offset":4900},"indent":[]}}],"position":{"start":{"line":202,"column":1,"offset":4891},"end":{"line":202,"column":10,"offset":4900},"indent":[]}},{"type":"jsx","value":"<Playground>\n  <InputText name=\"largeField\" size=\"large\" placeholder=\"Your username\" />\n</Playground>","position":{"start":{"line":204,"column":1,"offset":4902},"end":{"line":206,"column":14,"offset":5003},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Inline","position":{"start":{"line":208,"column":4,"offset":5008},"end":{"line":208,"column":10,"offset":5014},"indent":[]}}],"position":{"start":{"line":208,"column":1,"offset":5005},"end":{"line":208,"column":10,"offset":5014},"indent":[]}},{"type":"jsx","value":"<Playground>\n  <Text>\n    My name is\n    <InputText\n      name=\"durationInDays\"\n      value=\"Jeff\"\n      size=\"small\"\n      inline={true}\n      maxLength={4}\n      align=\"center\"\n    />\n  </Text>\n</Playground>","position":{"start":{"line":210,"column":1,"offset":5016},"end":{"line":222,"column":14,"offset":5225},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Insertion","position":{"start":{"line":224,"column":4,"offset":5230},"end":{"line":224,"column":13,"offset":5239},"indent":[]}}],"position":{"start":{"line":224,"column":1,"offset":5227},"end":{"line":224,"column":13,"offset":5239},"indent":[]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const [text, setText] = useState(\"Just some words here.\");\n    const textRef = React.createRef();\n    const handleTextChange = newValue => {\n      setText(newValue);\n    };\n    const insert = () => {\n      textRef.current.insert(\"🎉\");\n    };\n    return (\n      <Content>\n        <InputText value={text} onChange={handleTextChange} ref={textRef} />\n        <pre>{text}</pre>\n        <Button label=\"Insert Emoji\" onClick={insert} />\n      </Content>\n    );\n  }}\n</Playground>","position":{"start":{"line":226,"column":1,"offset":5241},"end":{"line":244,"column":14,"offset":5743},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Focus","position":{"start":{"line":246,"column":4,"offset":5748},"end":{"line":246,"column":9,"offset":5753},"indent":[]}}],"position":{"start":{"line":246,"column":1,"offset":5745},"end":{"line":246,"column":9,"offset":5753},"indent":[]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const textARef = React.createRef();\n    const textBRef = React.createRef();\n    const focusA = () => {\n      textARef.current.focus();\n    };\n    const focusB = () => {\n      textBRef.current.focus();\n    };\n    return (\n      <Content>\n        <InputText value=\"Text input A\" ref={textARef} />\n        <InputText value=\"Text input B\" ref={textBRef} />\n        <Button label=\"Focus text input A\" onClick={focusA} />\n        <br />\n        <Button label=\"Focus text input B\" onClick={focusB} />\n      </Content>\n    );\n  }}\n</Playground>","position":{"start":{"line":248,"column":1,"offset":5755},"end":{"line":268,"column":14,"offset":6319},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Keyboard","position":{"start":{"line":270,"column":4,"offset":6324},"end":{"line":270,"column":12,"offset":6332},"indent":[]}}],"position":{"start":{"line":270,"column":1,"offset":6321},"end":{"line":270,"column":12,"offset":6332},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Determine what default keyboard appears on mobile web.","position":{"start":{"line":272,"column":1,"offset":6334},"end":{"line":272,"column":55,"offset":6388},"indent":[]}}],"position":{"start":{"line":272,"column":1,"offset":6334},"end":{"line":272,"column":55,"offset":6388},"indent":[]}},{"type":"jsx","value":"<Playground>\n  <InputText\n    placeholder=\"Describe your age\"\n    name=\"describeAge\"\n    keyboard=\"numeric\"\n  />\n</Playground>","position":{"start":{"line":274,"column":1,"offset":6390},"end":{"line":280,"column":14,"offset":6516},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Loading","position":{"start":{"line":282,"column":4,"offset":6521},"end":{"line":282,"column":11,"offset":6528},"indent":[]}}],"position":{"start":{"line":282,"column":1,"offset":6518},"end":{"line":282,"column":11,"offset":6528},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Add a loading state to content. Note that ","position":{"start":{"line":284,"column":1,"offset":6530},"end":{"line":284,"column":43,"offset":6572},"indent":[]}},{"type":"inlineCode","value":"loading={true}","position":{"start":{"line":284,"column":43,"offset":6572},"end":{"line":284,"column":59,"offset":6588},"indent":[]}},{"type":"text","value":" is unimplemented for\nmultiline input text, i.e., when ","position":{"start":{"line":284,"column":59,"offset":6588},"end":{"line":285,"column":34,"offset":6643},"indent":[1]}},{"type":"inlineCode","value":"multiline={true}","position":{"start":{"line":285,"column":34,"offset":6643},"end":{"line":285,"column":52,"offset":6661},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":285,"column":52,"offset":6661},"end":{"line":285,"column":53,"offset":6662},"indent":[]}}],"position":{"start":{"line":284,"column":1,"offset":6530},"end":{"line":285,"column":53,"offset":6662},"indent":[1]}},{"type":"jsx","value":"<Playground>\n  <InputText\n    placeholder=\"Checking phone number\"\n    name=\"phoneNumber\"\n    loading={true}\n    keyboard=\"numeric\"\n  />\n</Playground>","position":{"start":{"line":287,"column":1,"offset":6664},"end":{"line":294,"column":14,"offset":6813},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Using onValidation","position":{"start":{"line":296,"column":4,"offset":6818},"end":{"line":296,"column":22,"offset":6836},"indent":[]}}],"position":{"start":{"line":296,"column":1,"offset":6815},"end":{"line":296,"column":22,"offset":6836},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you need to capture the error message and render it outside of the component.\nRead the ","position":{"start":{"line":298,"column":1,"offset":6838},"end":{"line":299,"column":10,"offset":6928},"indent":[1]}},{"type":"link","title":null,"url":"/components/input-validation","children":[{"type":"text","value":"InputValidation","position":{"start":{"line":299,"column":11,"offset":6929},"end":{"line":299,"column":26,"offset":6944},"indent":[]}}],"position":{"start":{"line":299,"column":10,"offset":6928},"end":{"line":299,"column":57,"offset":6975},"indent":[]}},{"type":"text","value":" documentation.","position":{"start":{"line":299,"column":57,"offset":6975},"end":{"line":299,"column":72,"offset":6990},"indent":[]}}],"position":{"start":{"line":298,"column":1,"offset":6838},"end":{"line":299,"column":72,"offset":6990},"indent":[1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":302,"column":1,"offset":6993},"end":{"line":302,"column":31,"offset":7023},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":302,"column":31,"offset":7023}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { Playground, Props } from \"docz\";\nimport { useState } from \"react\";\nimport { ComponentStatus } from \"@jobber/docx\";\nimport { InputText } from \"@jobber/components/InputText\";\nimport { Button } from \"@jobber/components/Button\";\nimport { Content } from \"@jobber/components/Content\";\nimport { Text } from \"@jobber/components/Text\";\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"input-text\"\n    }}>{`Input Text`}</h1>\n    <ComponentStatus stage=\"ready\" responsive=\"yes\" accessible=\"yes\" mdxType=\"ComponentStatus\" />\n    <p>{`Input text is used in forms that accept short or long answers from users.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { InputText } from \"@jobber/components/InputText\";\n`}</code></pre>\n    <Playground __position={1} __code={'<InputText defaultValue=\\\"Rocinante\\\" placeholder=\\\"Ship Name\\\" />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      ComponentStatus,\n      InputText,\n      Button,\n      Content,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <InputText defaultValue=\"Rocinante\" placeholder=\"Ship Name\" mdxType=\"InputText\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={InputText} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"controlled\"\n    }}>{`Controlled`}</h2>\n    <p>{`Use this to allow users to provide short answers.`}</p>\n    <Playground __position={3} __code={'() => {\\n  const [age, setAge] = useState(\\'Veintisiete\\')\\n  return (\\n    <InputText\\n      value={age}\\n      onChange={setAge}\\n      name=\\\"age\\\"\\n      placeholder=\\\"Age in words\\\"\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      ComponentStatus,\n      InputText,\n      Button,\n      Content,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [age, setAge] = useState(\"Veintisiete\");\n        return <InputText value={age} onChange={setAge} name=\"age\" placeholder=\"Age in words\" mdxType=\"InputText\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"multiline\"\n    }}>{`Multiline`}</h2>\n    <p>{`Use this to allow users to provide long answers. The default number of rows is\nthree. Note that `}<inlineCode parentName=\"p\">{`loading={true}`}</inlineCode>{` is unimplemented for multiline input text.`}</p>\n    <Playground __position={4} __code={'<InputText\\n  multiline={true}\\n  placeholder=\\\"Describe your age\\\"\\n  name=\\\"describeAge\\\"\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      ComponentStatus,\n      InputText,\n      Button,\n      Content,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <InputText multiline={true} placeholder=\"Describe your age\" name=\"describeAge\" mdxType=\"InputText\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"multiline-with-minimum-and-maximum\"\n    }}>{`Multiline with minimum and maximum`}</h2>\n    <p>{`This is to allow flexibility in the displayed textarea size as the user types.\nThe textarea will start at a specified minimum and grow to a specified maximum.`}</p>\n    <Playground __position={5} __code={'<InputText\\n  defaultValue=\\\"Rocinante\\\"\\n  multiline={true}\\n  rows={{ min: 1, max: 4 }}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      ComponentStatus,\n      InputText,\n      Button,\n      Content,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <InputText defaultValue=\"Rocinante\" multiline={true} rows={{\n        min: 1,\n        max: 4\n      }} mdxType=\"InputText\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"prefixsuffix\"\n    }}>{`Prefix/suffix`}</h2>\n    <p>{`Use a prefix or suffix when additional visual cues about an input's function may\nbe helpful.`}</p>\n    <p>{`Some fields have common visual patterns such as “search” having a magnifying\nglass icon, “Select” having a downwards arrow, or currency inputs having a\ncurrency symbol. These signifiers reinforce the purpose of the input to increase\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.nngroup.com/articles/ten-usability-heuristics/\"\n      }}>{`Recognition over Recall`}</a>{`\nand align the input with\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.nngroup.com/articles/ten-usability-heuristics/\"\n      }}>{`Consistency and Standards`}</a>{`.\nWith clearer guidance around the purpose of inputs, the user is able to better\nfocus on the task at hand.`}</p>\n    <Playground __position={6} __code={'<Content>\\n  <InputText\\n    defaultValue=\\\"1,000,000\\\"\\n    placeholder=\\\"Invoice Total\\\"\\n    prefix={{ label: \\'$\\', icon: \\'invoice\\' }}\\n    suffix={{ label: \\'.00\\' }}\\n  />\\n  <InputText\\n    placeholder=\\\"Search\\\"\\n    prefix={{ icon: \\'search\\' }}\\n    suffix={{\\n      icon: \\'cross\\',\\n      ariaLabel: \\'clear search\\',\\n      onClick: () => alert(\\'This could clear a search value\\'),\\n    }}\\n  />\\n</Content>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      ComponentStatus,\n      InputText,\n      Button,\n      Content,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Content mdxType=\"Content\">\n    <InputText defaultValue=\"1,000,000\" placeholder=\"Invoice Total\" prefix={{\n          label: \"$\",\n          icon: \"invoice\"\n        }} suffix={{\n          label: \".00\"\n        }} mdxType=\"InputText\" />\n    <InputText placeholder=\"Search\" prefix={{\n          icon: \"search\"\n        }} suffix={{\n          icon: \"cross\",\n          ariaLabel: \"clear search\",\n          onClick: () => alert(\"This could clear a search value\")\n        }} mdxType=\"InputText\" />\n  </Content>\n    </Playground>\n    <h2 {...{\n      \"id\": \"validation-message\"\n    }}>{`Validation message`}</h2>\n    <p>{`You can add your own custom validation messages on a field. However, this\nshouldn't replace server-side validation.`}</p>\n    <p>{`🔱 Atlantis utilizes `}<a parentName=\"p\" {...{\n        \"href\": \"https://react-hook-form.com/\"\n      }}>{`React Hook Forms`}</a>{` to handle\n`}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`form`}</inlineCode>{` validation. This means that the\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://react-hook-form.com/api#register\"\n      }}>{`React Hook Forms validation options`}</a>{`\nare available out of the box.`}</p>\n    <p>{`This includes, but is not limited to:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`required`}</inlineCode>{` - A Boolean which, if true, indicates that the input must have a\nvalue.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`maxLength`}</inlineCode>{` - The maximum length of the value to accept for this input.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`minLength`}</inlineCode>{` - The minimum length of the value to accept for this input.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`pattern`}</inlineCode>{` - The regex pattern for the input.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`validate`}</inlineCode>{` - You can pass a callback function as the argument to validate, or\nyou can pass an object of callback functions to validate all of them.`}</li>\n    </ul>\n    <Playground __position={7} __code={'() => {\\n  return (\\n    <InputText\\n      name=\\\"age\\\"\\n      placeholder=\\\"What\\'s your age\\\"\\n      validations={{\\n        required: {\\n          value: true,\\n          message: \\'You have to tell us your age\\',\\n        },\\n        validate: validations,\\n      }}\\n    />\\n  )\\n  function validations(val) {\\n    if (val.length > 0 && !isNaN(val)) {\\n      return \\'Type your age in words please.\\'\\n    }\\n    if (val.length >= 10) {\\n      return \\'That seems too old.\\'\\n    }\\n    return true\\n  }\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      ComponentStatus,\n      InputText,\n      Button,\n      Content,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        return <InputText name=\"age\" placeholder=\"What's your age\" validations={{\n          required: {\n            value: true,\n            message: \"You have to tell us your age\"\n          },\n          validate: validations\n        }} mdxType=\"InputText\" />;\n\n        function validations(val) {\n          if (val.length > 0 && !isNaN(val)) {\n            return \"Type your age in words please.\";\n          }\n\n          if (val.length >= 10) {\n            return \"That seems too old.\";\n          }\n\n          return true;\n        }\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"states\"\n    }}>{`States`}</h2>\n    <h3 {...{\n      \"id\": \"disabled\"\n    }}>{`Disabled`}</h3>\n    <Playground __position={8} __code={'<InputText\\n  placeholder=\\\"Credit card\\\"\\n  value=\\\"**** **** **** 1234\\\"\\n  disabled={true}\\n  name=\\\"creditCard\\\"\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      ComponentStatus,\n      InputText,\n      Button,\n      Content,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <InputText placeholder=\"Credit card\" value=\"**** **** **** 1234\" disabled={true} name=\"creditCard\" mdxType=\"InputText\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"read-only\"\n    }}>{`Read-only`}</h3>\n    <Playground __position={9} __code={'<InputText\\n  placeholder=\\\"Your referral code\\\"\\n  value=\\\"WXYZ100\\\"\\n  readonly={true}\\n  name=\\\"referralCode\\\"\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      ComponentStatus,\n      InputText,\n      Button,\n      Content,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <InputText placeholder=\"Your referral code\" value=\"WXYZ100\" readonly={true} name=\"referralCode\" mdxType=\"InputText\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"invalid\"\n    }}>{`Invalid`}</h3>\n    <Playground __position={10} __code={'<InputText\\n  placeholder=\\\"Email\\\"\\n  value=\\\"atlantis\\\"\\n  invalid={true}\\n  name=\\\"emailAddress\\\"\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      ComponentStatus,\n      InputText,\n      Button,\n      Content,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <InputText placeholder=\"Email\" value=\"atlantis\" invalid={true} name=\"emailAddress\" mdxType=\"InputText\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"sizes\"\n    }}>{`Sizes`}</h2>\n    <h3 {...{\n      \"id\": \"small\"\n    }}>{`Small`}</h3>\n    <Playground __position={11} __code={'<InputText name=\\\"smallField\\\" size=\\\"small\\\" placeholder=\\\"Duration\\\" />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      ComponentStatus,\n      InputText,\n      Button,\n      Content,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <InputText name=\"smallField\" size=\"small\" placeholder=\"Duration\" mdxType=\"InputText\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"large\"\n    }}>{`Large`}</h3>\n    <Playground __position={12} __code={'<InputText name=\\\"largeField\\\" size=\\\"large\\\" placeholder=\\\"Your username\\\" />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      ComponentStatus,\n      InputText,\n      Button,\n      Content,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <InputText name=\"largeField\" size=\"large\" placeholder=\"Your username\" mdxType=\"InputText\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"inline\"\n    }}>{`Inline`}</h2>\n    <Playground __position={13} __code={'<Text>\\n  My name is\\n  <InputText\\n    name=\\\"durationInDays\\\"\\n    value=\\\"Jeff\\\"\\n    size=\\\"small\\\"\\n    inline={true}\\n    maxLength={4}\\n    align=\\\"center\\\"\\n  />\\n</Text>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      ComponentStatus,\n      InputText,\n      Button,\n      Content,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Text mdxType=\"Text\">\n    My name is\n    <InputText name=\"durationInDays\" value=\"Jeff\" size=\"small\" inline={true} maxLength={4} align=\"center\" mdxType=\"InputText\" />\n  </Text>\n    </Playground>\n    <h2 {...{\n      \"id\": \"insertion\"\n    }}>{`Insertion`}</h2>\n    <Playground __position={14} __code={'() => {\\n  const [text, setText] = useState(\\'Just some words here.\\')\\n  const textRef = React.createRef()\\n  const handleTextChange = newValue => {\\n    setText(newValue)\\n  }\\n  const insert = () => {\\n    textRef.current.insert(\\'🎉\\')\\n  }\\n  return (\\n    <Content>\\n      <InputText value={text} onChange={handleTextChange} ref={textRef} />\\n      <pre>{text}</pre>\\n      <Button label=\\\"Insert Emoji\\\" onClick={insert} />\\n    </Content>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      ComponentStatus,\n      InputText,\n      Button,\n      Content,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [text, setText] = useState(\"Just some words here.\");\n        const textRef = React.createRef();\n\n        const handleTextChange = newValue => {\n          setText(newValue);\n        };\n\n        const insert = () => {\n          textRef.current.insert(\"🎉\");\n        };\n\n        return <Content mdxType=\"Content\">\n        <InputText value={text} onChange={handleTextChange} ref={textRef} mdxType=\"InputText\" />\n        <pre>{text}</pre>\n        <Button label=\"Insert Emoji\" onClick={insert} mdxType=\"Button\" />\n      </Content>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"focus\"\n    }}>{`Focus`}</h2>\n    <Playground __position={15} __code={'() => {\\n  const textARef = React.createRef()\\n  const textBRef = React.createRef()\\n  const focusA = () => {\\n    textARef.current.focus()\\n  }\\n  const focusB = () => {\\n    textBRef.current.focus()\\n  }\\n  return (\\n    <Content>\\n      <InputText value=\\\"Text input A\\\" ref={textARef} />\\n      <InputText value=\\\"Text input B\\\" ref={textBRef} />\\n      <Button label=\\\"Focus text input A\\\" onClick={focusA} />\\n      <br />\\n      <Button label=\\\"Focus text input B\\\" onClick={focusB} />\\n    </Content>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      ComponentStatus,\n      InputText,\n      Button,\n      Content,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const textARef = React.createRef();\n        const textBRef = React.createRef();\n\n        const focusA = () => {\n          textARef.current.focus();\n        };\n\n        const focusB = () => {\n          textBRef.current.focus();\n        };\n\n        return <Content mdxType=\"Content\">\n        <InputText value=\"Text input A\" ref={textARef} mdxType=\"InputText\" />\n        <InputText value=\"Text input B\" ref={textBRef} mdxType=\"InputText\" />\n        <Button label=\"Focus text input A\" onClick={focusA} mdxType=\"Button\" />\n        <br />\n        <Button label=\"Focus text input B\" onClick={focusB} mdxType=\"Button\" />\n      </Content>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"keyboard\"\n    }}>{`Keyboard`}</h2>\n    <p>{`Determine what default keyboard appears on mobile web.`}</p>\n    <Playground __position={16} __code={'<InputText\\n  placeholder=\\\"Describe your age\\\"\\n  name=\\\"describeAge\\\"\\n  keyboard=\\\"numeric\\\"\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      ComponentStatus,\n      InputText,\n      Button,\n      Content,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <InputText placeholder=\"Describe your age\" name=\"describeAge\" keyboard=\"numeric\" mdxType=\"InputText\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"loading\"\n    }}>{`Loading`}</h2>\n    <p>{`Add a loading state to content. Note that `}<inlineCode parentName=\"p\">{`loading={true}`}</inlineCode>{` is unimplemented for\nmultiline input text, i.e., when `}<inlineCode parentName=\"p\">{`multiline={true}`}</inlineCode>{`.`}</p>\n    <Playground __position={17} __code={'<InputText\\n  placeholder=\\\"Checking phone number\\\"\\n  name=\\\"phoneNumber\\\"\\n  loading={true}\\n  keyboard=\\\"numeric\\\"\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      ComponentStatus,\n      InputText,\n      Button,\n      Content,\n      Text,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <InputText placeholder=\"Checking phone number\" name=\"phoneNumber\" loading={true} keyboard=\"numeric\" mdxType=\"InputText\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"using-onvalidation\"\n    }}>{`Using onValidation`}</h2>\n    <p>{`If you need to capture the error message and render it outside of the component.\nRead the `}<a parentName=\"p\" {...{\n        \"href\": \"/components/input-validation\"\n      }}>{`InputValidation`}</a>{` documentation.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}
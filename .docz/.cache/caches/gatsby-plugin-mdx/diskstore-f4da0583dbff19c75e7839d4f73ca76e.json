{"expireTime":9007200931831330000,"key":"gatsby-plugin-mdx-entire-payload-2bca311e9f44a80eced2964b14ddde13-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":114,"offset":115},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":117},"end":{"line":5,"column":29,"offset":145},"indent":[]}},{"type":"import","value":"import { ArgsTable, Canvas, Meta, Story } from \"@storybook/addon-docs\";\nimport { ExampleWithHooks } from \"mdxUtils/ExampleWithHooks\";\nimport { useState } from \"react\";\nimport { InputNumber } from \"@jobber/components/InputNumber\";\nimport { Text } from \"@jobber/components/Text\";\nimport { Button } from \"@jobber/components/Button\";\nimport { Content } from \"@jobber/components/Content\";","position":{"start":{"line":7,"column":1,"offset":147},"end":{"line":13,"column":54,"offset":530},"indent":[1,1,1,1,1,1]}},{"type":"jsx","value":"<Meta title=\"Components/InputNumber\" component={InputNumber} />","position":{"start":{"line":15,"column":1,"offset":532},"end":{"line":15,"column":64,"offset":595},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"InputNumber","position":{"start":{"line":17,"column":3,"offset":599},"end":{"line":17,"column":14,"offset":610},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":597},"end":{"line":17,"column":14,"offset":610},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"InputNumber is used in forms that accept numbers as an answer.","position":{"start":{"line":19,"column":1,"offset":612},"end":{"line":19,"column":63,"offset":674},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":612},"end":{"line":19,"column":63,"offset":674},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"import { InputNumber } from \"@jobber/components/InputNumber\";","position":{"start":{"line":21,"column":1,"offset":676},"end":{"line":23,"column":4,"offset":747},"indent":[1,1]}},{"type":"jsx","value":"<Canvas>\n  <Story\n    name=\"InputNumber\"\n    args={{\n      value: 7,\n      max: 11,\n      min: 0,\n      placeholder: \"Number\",\n    }}\n  >\n    {args => {\n      const [value, setValue] = useState(args.value);\n      return <InputNumber {...args} value={value} onChange={setValue} />;\n    }}\n  </Story>\n</Canvas>","position":{"start":{"line":25,"column":1,"offset":749},"end":{"line":40,"column":10,"offset":1057},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<ArgsTable of={InputNumber} story=\"InputNumber\" />","position":{"start":{"line":42,"column":1,"offset":1059},"end":{"line":42,"column":51,"offset":1109},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Design & usage guidelines","position":{"start":{"line":44,"column":4,"offset":1114},"end":{"line":44,"column":29,"offset":1139},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":1111},"end":{"line":44,"column":29,"offset":1139},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is best suited for input data that benefits from being modified in\nincrements, such as quantity, price, or days (ie 2 days -> 3 days).","position":{"start":{"line":46,"column":1,"offset":1141},"end":{"line":47,"column":68,"offset":1280},"indent":[1]}}],"position":{"start":{"line":46,"column":1,"offset":1141},"end":{"line":47,"column":68,"offset":1280},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"While some types of data may technically be numbers, they can be ill-suited for\nusing a number input. For example, phone numbers and credit card numbers provide\nno value to the user by offering an incrementer.","position":{"start":{"line":49,"column":1,"offset":1282},"end":{"line":51,"column":49,"offset":1491},"indent":[1,1]}}],"position":{"start":{"line":49,"column":1,"offset":1282},"end":{"line":51,"column":49,"offset":1491},"indent":[1,1]}},{"type":"thematicBreak","position":{"start":{"line":53,"column":1,"offset":1493},"end":{"line":53,"column":4,"offset":1496},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Controlled","position":{"start":{"line":55,"column":4,"offset":1501},"end":{"line":55,"column":14,"offset":1511},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":1498},"end":{"line":55,"column":14,"offset":1511},"indent":[]}},{"type":"jsx","value":"<Canvas>\n  <ExampleWithHooks>\n    {() => {\n      const [value, setValue] = useState(30);\n      return (\n        <InputNumber\n          value={value}\n          max={32}\n          min={0}\n          onChange={setValue}\n          placeholder=\"Age\"\n        />\n      );\n    }}\n  </ExampleWithHooks>\n</Canvas>","position":{"start":{"line":57,"column":1,"offset":1513},"end":{"line":72,"column":10,"offset":1815},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"States","position":{"start":{"line":74,"column":4,"offset":1820},"end":{"line":74,"column":10,"offset":1826},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":1817},"end":{"line":74,"column":10,"offset":1826},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Disabled","position":{"start":{"line":76,"column":5,"offset":1832},"end":{"line":76,"column":13,"offset":1840},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":1828},"end":{"line":76,"column":13,"offset":1840},"indent":[]}},{"type":"jsx","value":"<Canvas>\n  <InputNumber\n    placeholder=\"SIN Number\"\n    value={1234}\n    disabled={true}\n    name=\"sin\"\n  />\n</Canvas>","position":{"start":{"line":78,"column":1,"offset":1842},"end":{"line":85,"column":10,"offset":1961},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Read-only","position":{"start":{"line":87,"column":5,"offset":1967},"end":{"line":87,"column":14,"offset":1976},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":1963},"end":{"line":87,"column":14,"offset":1976},"indent":[]}},{"type":"jsx","value":"<Canvas>\n  <InputNumber\n    placeholder=\"Your pin number\"\n    value={12345}\n    readonly={true}\n    name=\"pinNumber\"\n  />\n</Canvas>","position":{"start":{"line":89,"column":1,"offset":1978},"end":{"line":96,"column":10,"offset":2109},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Invalid","position":{"start":{"line":98,"column":5,"offset":2115},"end":{"line":98,"column":12,"offset":2122},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":2111},"end":{"line":98,"column":12,"offset":2122},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For more information about available ","position":{"start":{"line":100,"column":1,"offset":2124},"end":{"line":100,"column":38,"offset":2161},"indent":[]}},{"type":"inlineCode","value":"validations","position":{"start":{"line":100,"column":38,"offset":2161},"end":{"line":100,"column":51,"offset":2174},"indent":[]}},{"type":"text","value":", see the\n","position":{"start":{"line":100,"column":51,"offset":2174},"end":{"line":101,"column":1,"offset":2184},"indent":[1]}},{"type":"link","title":null,"url":"/components/input-text/#validation-message","children":[{"type":"text","value":"InputText","position":{"start":{"line":101,"column":2,"offset":2185},"end":{"line":101,"column":11,"offset":2194},"indent":[]}}],"position":{"start":{"line":101,"column":1,"offset":2184},"end":{"line":101,"column":56,"offset":2239},"indent":[]}},{"type":"text","value":" docs.","position":{"start":{"line":101,"column":56,"offset":2239},"end":{"line":101,"column":62,"offset":2245},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":2124},"end":{"line":101,"column":62,"offset":2245},"indent":[1]}},{"type":"jsx","value":"<Canvas>\n  <InputNumber\n    placeholder=\"Give a whole number\"\n    defaultValue={1.1}\n    invalid={true}\n    name=\"wholeNumber\"\n  />\n</Canvas>","position":{"start":{"line":103,"column":1,"offset":2247},"end":{"line":110,"column":10,"offset":2388},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Sizes","position":{"start":{"line":112,"column":4,"offset":2393},"end":{"line":112,"column":9,"offset":2398},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":2390},"end":{"line":112,"column":9,"offset":2398},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Small","position":{"start":{"line":114,"column":5,"offset":2404},"end":{"line":114,"column":10,"offset":2409},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":2400},"end":{"line":114,"column":10,"offset":2409},"indent":[]}},{"type":"jsx","value":"<Canvas>\n  <InputNumber name=\"smallField\" size=\"small\" placeholder=\"Duration\" />\n  <InputNumber name=\"smallField\" size=\"small\" placeholder=\"Duration\" />\n</Canvas>","position":{"start":{"line":116,"column":1,"offset":2411},"end":{"line":119,"column":10,"offset":2573},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Large","position":{"start":{"line":121,"column":5,"offset":2579},"end":{"line":121,"column":10,"offset":2584},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":2575},"end":{"line":121,"column":10,"offset":2584},"indent":[]}},{"type":"jsx","value":"<Canvas>\n  <InputNumber\n    name=\"largeField\"\n    size=\"large\"\n    placeholder=\"Duration but bigger\"\n  />\n</Canvas>","position":{"start":{"line":123,"column":1,"offset":2586},"end":{"line":129,"column":10,"offset":2701},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Inline","position":{"start":{"line":131,"column":4,"offset":2706},"end":{"line":131,"column":10,"offset":2712},"indent":[]}}],"position":{"start":{"line":131,"column":1,"offset":2703},"end":{"line":131,"column":10,"offset":2712},"indent":[]}},{"type":"jsx","value":"<Canvas>\n  <Text>\n    Follow-up after\n    <InputNumber\n      name=\"durationInDays\"\n      defaultValue={2}\n      size=\"small\"\n      inline={true}\n      maxLength={2}\n      align=\"center\"\n    />\n    days\n  </Text>\n</Canvas>","position":{"start":{"line":133,"column":1,"offset":2714},"end":{"line":146,"column":10,"offset":2935},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Focus & blur","position":{"start":{"line":148,"column":4,"offset":2940},"end":{"line":148,"column":16,"offset":2952},"indent":[]}}],"position":{"start":{"line":148,"column":1,"offset":2937},"end":{"line":148,"column":16,"offset":2952},"indent":[]}},{"type":"jsx","value":"<Canvas>\n  <ExampleWithHooks>\n    {() => {\n      const inputNumberRef = React.createRef();\n      const focusInput = () => {\n        inputNumberRef.current.focus();\n      };\n      const blurInput = () => {\n        inputNumberRef.current.blur();\n      };\n      return (\n        <Content>\n          <InputNumber value={5} ref={inputNumberRef} />\n          <Button label=\"Focus input\" onClick={focusInput} />\n          <br />\n          <Button label=\"Blur input\" onClick={blurInput} />\n        </Content>\n      );\n    }}\n  </ExampleWithHooks>\n</Canvas>","position":{"start":{"line":150,"column":1,"offset":2954},"end":{"line":170,"column":10,"offset":3502},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Using onValidation","position":{"start":{"line":172,"column":4,"offset":3507},"end":{"line":172,"column":22,"offset":3525},"indent":[]}}],"position":{"start":{"line":172,"column":1,"offset":3504},"end":{"line":172,"column":22,"offset":3525},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you need to capture the error message and render it outside of the component.\nRead the ","position":{"start":{"line":174,"column":1,"offset":3527},"end":{"line":175,"column":10,"offset":3617},"indent":[1]}},{"type":"link","title":null,"url":"/components/input-validation","children":[{"type":"text","value":"InputValidation","position":{"start":{"line":175,"column":11,"offset":3618},"end":{"line":175,"column":26,"offset":3633},"indent":[]}}],"position":{"start":{"line":175,"column":10,"offset":3617},"end":{"line":175,"column":57,"offset":3664},"indent":[]}},{"type":"text","value":" documentation.","position":{"start":{"line":175,"column":57,"offset":3664},"end":{"line":175,"column":72,"offset":3679},"indent":[]}}],"position":{"start":{"line":174,"column":1,"offset":3527},"end":{"line":175,"column":72,"offset":3679},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"For more details about ","position":{"start":{"line":177,"column":1,"offset":3681},"end":{"line":177,"column":24,"offset":3704},"indent":[]}},{"type":"inlineCode","value":"validation","position":{"start":{"line":177,"column":24,"offset":3704},"end":{"line":177,"column":36,"offset":3716},"indent":[]}},{"type":"text","value":" using ","position":{"start":{"line":177,"column":36,"offset":3716},"end":{"line":177,"column":43,"offset":3723},"indent":[]}},{"type":"inlineCode","value":"Input","position":{"start":{"line":177,"column":43,"offset":3723},"end":{"line":177,"column":50,"offset":3730},"indent":[]}},{"type":"text","value":" components, see the\n","position":{"start":{"line":177,"column":50,"offset":3730},"end":{"line":178,"column":1,"offset":3751},"indent":[1]}},{"type":"link","title":null,"url":"/components/input-text/#validation-message","children":[{"type":"text","value":"InputText","position":{"start":{"line":178,"column":2,"offset":3752},"end":{"line":178,"column":11,"offset":3761},"indent":[]}}],"position":{"start":{"line":178,"column":1,"offset":3751},"end":{"line":178,"column":56,"offset":3806},"indent":[]}},{"type":"text","value":" documentation.","position":{"start":{"line":178,"column":56,"offset":3806},"end":{"line":178,"column":71,"offset":3821},"indent":[]}}],"position":{"start":{"line":177,"column":1,"offset":3681},"end":{"line":178,"column":71,"offset":3821},"indent":[1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":181,"column":1,"offset":3824},"end":{"line":181,"column":31,"offset":3854},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":181,"column":31,"offset":3854}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { ArgsTable, Canvas, Meta, Story } from \"@storybook/addon-docs\";\nimport { ExampleWithHooks } from \"mdxUtils/ExampleWithHooks\";\nimport { useState } from \"react\";\nimport { InputNumber } from \"@jobber/components/InputNumber\";\nimport { Text } from \"@jobber/components/Text\";\nimport { Button } from \"@jobber/components/Button\";\nimport { Content } from \"@jobber/components/Content\";\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Meta title=\"Components/InputNumber\" component={InputNumber} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"inputnumber\"\n    }}>{`InputNumber`}</h1>\n    <p>{`InputNumber is used in forms that accept numbers as an answer.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { InputNumber } from \"@jobber/components/InputNumber\";\n`}</code></pre>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"InputNumber\" args={{\n        value: 7,\n        max: 11,\n        min: 0,\n        placeholder: \"Number\"\n      }} mdxType=\"Story\">\n    {args => {\n          const [value, setValue] = useState(args.value);\n          return <InputNumber {...args} value={value} onChange={setValue} mdxType=\"InputNumber\" />;\n        }}\n  </Story>\n    </Canvas>\n    <ArgsTable of={InputNumber} story=\"InputNumber\" mdxType=\"ArgsTable\" />\n    <h2 {...{\n      \"id\": \"design--usage-guidelines\"\n    }}>{`Design & usage guidelines`}</h2>\n    <p>{`This is best suited for input data that benefits from being modified in\nincrements, such as quantity, price, or days (ie 2 days -> 3 days).`}</p>\n    <p>{`While some types of data may technically be numbers, they can be ill-suited for\nusing a number input. For example, phone numbers and credit card numbers provide\nno value to the user by offering an incrementer.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"controlled\"\n    }}>{`Controlled`}</h2>\n    <Canvas mdxType=\"Canvas\">\n  <ExampleWithHooks mdxType=\"ExampleWithHooks\">\n    {() => {\n          const [value, setValue] = useState(30);\n          return <InputNumber value={value} max={32} min={0} onChange={setValue} placeholder=\"Age\" mdxType=\"InputNumber\" />;\n        }}\n  </ExampleWithHooks>\n    </Canvas>\n    <h2 {...{\n      \"id\": \"states\"\n    }}>{`States`}</h2>\n    <h3 {...{\n      \"id\": \"disabled\"\n    }}>{`Disabled`}</h3>\n    <Canvas mdxType=\"Canvas\">\n  <InputNumber placeholder=\"SIN Number\" value={1234} disabled={true} name=\"sin\" mdxType=\"InputNumber\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"read-only\"\n    }}>{`Read-only`}</h3>\n    <Canvas mdxType=\"Canvas\">\n  <InputNumber placeholder=\"Your pin number\" value={12345} readonly={true} name=\"pinNumber\" mdxType=\"InputNumber\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"invalid\"\n    }}>{`Invalid`}</h3>\n    <p>{`For more information about available `}<inlineCode parentName=\"p\">{`validations`}</inlineCode>{`, see the\n`}<a parentName=\"p\" {...{\n        \"href\": \"/components/input-text/#validation-message\"\n      }}>{`InputText`}</a>{` docs.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <InputNumber placeholder=\"Give a whole number\" defaultValue={1.1} invalid={true} name=\"wholeNumber\" mdxType=\"InputNumber\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"sizes\"\n    }}>{`Sizes`}</h2>\n    <h3 {...{\n      \"id\": \"small\"\n    }}>{`Small`}</h3>\n    <Canvas mdxType=\"Canvas\">\n  <InputNumber name=\"smallField\" size=\"small\" placeholder=\"Duration\" mdxType=\"InputNumber\" />\n  <InputNumber name=\"smallField\" size=\"small\" placeholder=\"Duration\" mdxType=\"InputNumber\" />\n    </Canvas>\n    <h3 {...{\n      \"id\": \"large\"\n    }}>{`Large`}</h3>\n    <Canvas mdxType=\"Canvas\">\n  <InputNumber name=\"largeField\" size=\"large\" placeholder=\"Duration but bigger\" mdxType=\"InputNumber\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"inline\"\n    }}>{`Inline`}</h2>\n    <Canvas mdxType=\"Canvas\">\n  <Text mdxType=\"Text\">\n    Follow-up after\n    <InputNumber name=\"durationInDays\" defaultValue={2} size=\"small\" inline={true} maxLength={2} align=\"center\" mdxType=\"InputNumber\" />\n    days\n  </Text>\n    </Canvas>\n    <h2 {...{\n      \"id\": \"focus--blur\"\n    }}>{`Focus & blur`}</h2>\n    <Canvas mdxType=\"Canvas\">\n  <ExampleWithHooks mdxType=\"ExampleWithHooks\">\n    {() => {\n          const inputNumberRef = React.createRef();\n\n          const focusInput = () => {\n            inputNumberRef.current.focus();\n          };\n\n          const blurInput = () => {\n            inputNumberRef.current.blur();\n          };\n\n          return <Content mdxType=\"Content\">\n          <InputNumber value={5} ref={inputNumberRef} mdxType=\"InputNumber\" />\n          <Button label=\"Focus input\" onClick={focusInput} mdxType=\"Button\" />\n          <br />\n          <Button label=\"Blur input\" onClick={blurInput} mdxType=\"Button\" />\n        </Content>;\n        }}\n  </ExampleWithHooks>\n    </Canvas>\n    <h2 {...{\n      \"id\": \"using-onvalidation\"\n    }}>{`Using onValidation`}</h2>\n    <p>{`If you need to capture the error message and render it outside of the component.\nRead the `}<a parentName=\"p\" {...{\n        \"href\": \"/components/input-validation\"\n      }}>{`InputValidation`}</a>{` documentation.`}</p>\n    <p>{`For more details about `}<inlineCode parentName=\"p\">{`validation`}</inlineCode>{` using `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{` components, see the\n`}<a parentName=\"p\" {...{\n        \"href\": \"/components/input-text/#validation-message\"\n      }}>{`InputText`}</a>{` documentation.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}
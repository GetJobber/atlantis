{"expireTime":9007200931831381000,"key":"gatsby-plugin-mdx-entire-payload-794b8b41b00ab971e7753fae41c6ef92-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":114,"offset":115},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":117},"end":{"line":5,"column":29,"offset":145},"indent":[]}},{"type":"import","value":"import { Playground, Props } from \"docz\";\nimport { ComponentStatus } from \"@jobber/docx\";\nimport { RecurringSelect } from \"./RecurringSelect\";\nimport { Content } from \"@jobber/components/Content\";\nimport { Text } from \"@jobber/components/Text\";\nimport { Checkbox } from \"@jobber/components/Checkbox\";\nimport { Divider } from \"@jobber/components/Divider\";\nimport { Avatar } from \"@jobber/components/Avatar\";\nimport { useState } from \"react\";\nimport { DurationPeriod } from \"./types\";","position":{"start":{"line":8,"column":1,"offset":148},"end":{"line":17,"column":42,"offset":630},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"RecurringSelect","position":{"start":{"line":19,"column":3,"offset":634},"end":{"line":19,"column":18,"offset":649},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":632},"end":{"line":19,"column":18,"offset":649},"indent":[]}},{"type":"jsx","value":"<ComponentStatus stage=\"ready\" responsive=\"yes\" accessible=\"yes\" />","position":{"start":{"line":21,"column":1,"offset":651},"end":{"line":21,"column":68,"offset":718},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A ","position":{"start":{"line":23,"column":1,"offset":720},"end":{"line":23,"column":3,"offset":722},"indent":[]}},{"type":"inlineCode","value":"RecurringSelect","position":{"start":{"line":23,"column":3,"offset":722},"end":{"line":23,"column":20,"offset":739},"indent":[]}},{"type":"text","value":" is used to provide an intuitive, accessible pre-built UI\nallowing a user to build a custom schedule using a handful of different time\nintervals.","position":{"start":{"line":23,"column":20,"offset":739},"end":{"line":25,"column":11,"offset":884},"indent":[1,1]}}],"position":{"start":{"line":23,"column":1,"offset":720},"end":{"line":25,"column":11,"offset":884},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"While it can be used in isolation, most often makes sense to include it as part\nof a more complex scheduling component that can use the returned data as part of\na complete schedule.","position":{"start":{"line":27,"column":1,"offset":886},"end":{"line":29,"column":21,"offset":1067},"indent":[1,1]}}],"position":{"start":{"line":27,"column":1,"offset":886},"end":{"line":29,"column":21,"offset":1067},"indent":[1,1]}},{"type":"code","lang":"ts","meta":null,"value":"import { RecurringSelect } from \"@jobber/components/RecurringSelect\";","position":{"start":{"line":31,"column":1,"offset":1069},"end":{"line":33,"column":4,"offset":1148},"indent":[1,1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const [rule, setRule] = useState({ interval: 1, type: DurationPeriod.Day });\n    return <RecurringSelect value={rule} disabled={false} onChange={setRule} />;\n  }}\n</Playground>","position":{"start":{"line":35,"column":1,"offset":1150},"end":{"line":40,"column":14,"offset":1354},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Props","position":{"start":{"line":42,"column":4,"offset":1359},"end":{"line":42,"column":9,"offset":1364},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":1356},"end":{"line":42,"column":9,"offset":1364},"indent":[]}},{"type":"jsx","value":"<Props of={RecurringSelect} />","position":{"start":{"line":44,"column":1,"offset":1366},"end":{"line":44,"column":31,"offset":1396},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Design and usage guidelines","position":{"start":{"line":46,"column":4,"offset":1401},"end":{"line":46,"column":31,"offset":1428},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":1398},"end":{"line":46,"column":31,"offset":1428},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The RecurringSelect is a complex tool, so ensure the user will require the full\nsuite of recurrence options before reaching for it. For instances where you may\nonly require a simple recurrence option, such as \"Every ","position":{"start":{"line":48,"column":1,"offset":1430},"end":{"line":50,"column":57,"offset":1646},"indent":[1,1]}},{"type":"inlineCode","value":"n","position":{"start":{"line":50,"column":57,"offset":1646},"end":{"line":50,"column":60,"offset":1649},"indent":[]}},{"type":"text","value":" weeks\", you are\nlikely better served using basic form inputs such as ","position":{"start":{"line":50,"column":60,"offset":1649},"end":{"line":51,"column":54,"offset":1719},"indent":[1]}},{"type":"inlineCode","value":"InputNumber","position":{"start":{"line":51,"column":54,"offset":1719},"end":{"line":51,"column":67,"offset":1732},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":51,"column":67,"offset":1732},"end":{"line":51,"column":71,"offset":1736},"indent":[]}},{"type":"inlineCode","value":"Select","position":{"start":{"line":51,"column":71,"offset":1736},"end":{"line":51,"column":79,"offset":1744},"indent":[]}},{"type":"text","value":"\nto give the user fewer options.","position":{"start":{"line":51,"column":79,"offset":1744},"end":{"line":52,"column":32,"offset":1776},"indent":[1]}}],"position":{"start":{"line":48,"column":1,"offset":1430},"end":{"line":52,"column":32,"offset":1776},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The visual calendar selections in the RecurringSelect will scale up or down to\nadapt to the width of the RecurringSelect's container, allowing this pattern to\nbe more prominent when used as a primary interface, or work in a smaller\ncolumn-based or mobile interface. Consider this as you design solutions that may\nrequire RecurringSelect.","position":{"start":{"line":54,"column":1,"offset":1778},"end":{"line":58,"column":25,"offset":2115},"indent":[1,1,1,1]}}],"position":{"start":{"line":54,"column":1,"offset":1778},"end":{"line":58,"column":25,"offset":2115},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Disabled state","position":{"start":{"line":60,"column":5,"offset":2121},"end":{"line":60,"column":19,"offset":2135},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":2117},"end":{"line":60,"column":19,"offset":2135},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When the RecurringSelect is set to disabled, all child components become\ndisabled. As with any design, your first goal should be to ","position":{"start":{"line":62,"column":1,"offset":2137},"end":{"line":63,"column":60,"offset":2269},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"avoid","position":{"start":{"line":63,"column":61,"offset":2270},"end":{"line":63,"column":66,"offset":2275},"indent":[]}}],"position":{"start":{"line":63,"column":60,"offset":2269},"end":{"line":63,"column":67,"offset":2276},"indent":[]}},{"type":"text","value":" creating a\nflow where the user encounters a disabled state, so only use this approach if a\ndisabled state cannot be avoided.","position":{"start":{"line":63,"column":67,"offset":2276},"end":{"line":65,"column":34,"offset":2401},"indent":[1,1]}}],"position":{"start":{"line":62,"column":1,"offset":2137},"end":{"line":65,"column":34,"offset":2401},"indent":[1,1,1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const [rule, setRule] = useState({\n      interval: 1,\n      type: DurationPeriod.DayOfMonth,\n      date: new Set([2, 4, 6, 10, 12, 18, 25, \"LAST\"]),\n    });\n    return <RecurringSelect value={rule} disabled={true} onChange={setRule} />;\n  }}\n</Playground>","position":{"start":{"line":67,"column":1,"offset":2403},"end":{"line":76,"column":14,"offset":2686},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Accessibility","position":{"start":{"line":78,"column":4,"offset":2691},"end":{"line":78,"column":17,"offset":2704},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":2688},"end":{"line":78,"column":17,"offset":2704},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":80,"column":1,"offset":2706},"end":{"line":80,"column":5,"offset":2710},"indent":[]}},{"type":"inlineCode","value":"RecurringSelect","position":{"start":{"line":80,"column":5,"offset":2710},"end":{"line":80,"column":22,"offset":2727},"indent":[]}},{"type":"text","value":" component is entirely usable by keyboard.","position":{"start":{"line":80,"column":22,"offset":2727},"end":{"line":80,"column":64,"offset":2769},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":2706},"end":{"line":80,"column":64,"offset":2769},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"All selections can be done and undone with tabs and the space bar. The \"visual\"\ncalendar-style selectors are all built using radio or checkbox elements where\nnecessary, ensuring that users of assistive tech have appropriate context as to\nthe type of selection they are making.","position":{"start":{"line":82,"column":1,"offset":2771},"end":{"line":85,"column":39,"offset":3047},"indent":[1,1,1]}}],"position":{"start":{"line":82,"column":1,"offset":2771},"end":{"line":85,"column":39,"offset":3047},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Related components","position":{"start":{"line":87,"column":4,"offset":3052},"end":{"line":87,"column":22,"offset":3070},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":3049},"end":{"line":87,"column":22,"offset":3070},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To allow the user to select specific dates, use\n","position":{"start":{"line":89,"column":1,"offset":3072},"end":{"line":90,"column":1,"offset":3120},"indent":[1]}},{"type":"link","title":null,"url":"/components/date-picker","children":[{"type":"text","value":"Datepicker","position":{"start":{"line":90,"column":2,"offset":3121},"end":{"line":90,"column":12,"offset":3131},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":3120},"end":{"line":90,"column":38,"offset":3157},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":90,"column":38,"offset":3157},"end":{"line":90,"column":42,"offset":3161},"indent":[]}},{"type":"link","title":null,"url":"/components/input-date","children":[{"type":"text","value":"InputDate","position":{"start":{"line":90,"column":43,"offset":3162},"end":{"line":90,"column":52,"offset":3171},"indent":[]}}],"position":{"start":{"line":90,"column":42,"offset":3161},"end":{"line":90,"column":77,"offset":3196},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":90,"column":77,"offset":3196},"end":{"line":90,"column":78,"offset":3197},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":3072},"end":{"line":90,"column":78,"offset":3197},"indent":[1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":93,"column":1,"offset":3200},"end":{"line":93,"column":31,"offset":3230},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":93,"column":31,"offset":3230}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { Playground, Props } from \"docz\";\nimport { ComponentStatus } from \"@jobber/docx\";\nimport { RecurringSelect } from \"./RecurringSelect\";\nimport { Content } from \"@jobber/components/Content\";\nimport { Text } from \"@jobber/components/Text\";\nimport { Checkbox } from \"@jobber/components/Checkbox\";\nimport { Divider } from \"@jobber/components/Divider\";\nimport { Avatar } from \"@jobber/components/Avatar\";\nimport { useState } from \"react\";\nimport { DurationPeriod } from \"./types\";\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"recurringselect\"\n    }}>{`RecurringSelect`}</h1>\n    <ComponentStatus stage=\"ready\" responsive=\"yes\" accessible=\"yes\" mdxType=\"ComponentStatus\" />\n    <p>{`A `}<inlineCode parentName=\"p\">{`RecurringSelect`}</inlineCode>{` is used to provide an intuitive, accessible pre-built UI\nallowing a user to build a custom schedule using a handful of different time\nintervals.`}</p>\n    <p>{`While it can be used in isolation, most often makes sense to include it as part\nof a more complex scheduling component that can use the returned data as part of\na complete schedule.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { RecurringSelect } from \"@jobber/components/RecurringSelect\";\n`}</code></pre>\n    <Playground __position={1} __code={'() => {\\n  const [rule, setRule] = useState({ interval: 1, type: DurationPeriod.Day })\\n  return <RecurringSelect value={rule} disabled={false} onChange={setRule} />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      RecurringSelect,\n      Content,\n      Text,\n      Checkbox,\n      Divider,\n      Avatar,\n      useState,\n      DurationPeriod,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [rule, setRule] = useState({\n          interval: 1,\n          type: DurationPeriod.Day\n        });\n        return <RecurringSelect value={rule} disabled={false} onChange={setRule} mdxType=\"RecurringSelect\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={RecurringSelect} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"design-and-usage-guidelines\"\n    }}>{`Design and usage guidelines`}</h2>\n    <p>{`The RecurringSelect is a complex tool, so ensure the user will require the full\nsuite of recurrence options before reaching for it. For instances where you may\nonly require a simple recurrence option, such as \"Every `}<inlineCode parentName=\"p\">{`n`}</inlineCode>{` weeks\", you are\nlikely better served using basic form inputs such as `}<inlineCode parentName=\"p\">{`InputNumber`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`Select`}</inlineCode>{`\nto give the user fewer options.`}</p>\n    <p>{`The visual calendar selections in the RecurringSelect will scale up or down to\nadapt to the width of the RecurringSelect's container, allowing this pattern to\nbe more prominent when used as a primary interface, or work in a smaller\ncolumn-based or mobile interface. Consider this as you design solutions that may\nrequire RecurringSelect.`}</p>\n    <h3 {...{\n      \"id\": \"disabled-state\"\n    }}>{`Disabled state`}</h3>\n    <p>{`When the RecurringSelect is set to disabled, all child components become\ndisabled. As with any design, your first goal should be to `}<em parentName=\"p\">{`avoid`}</em>{` creating a\nflow where the user encounters a disabled state, so only use this approach if a\ndisabled state cannot be avoided.`}</p>\n    <Playground __position={3} __code={'() => {\\n  const [rule, setRule] = useState({\\n    interval: 1,\\n    type: DurationPeriod.DayOfMonth,\\n    date: new Set([2, 4, 6, 10, 12, 18, 25, \\'LAST\\']),\\n  })\\n  return <RecurringSelect value={rule} disabled={true} onChange={setRule} />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      RecurringSelect,\n      Content,\n      Text,\n      Checkbox,\n      Divider,\n      Avatar,\n      useState,\n      DurationPeriod,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [rule, setRule] = useState({\n          interval: 1,\n          type: DurationPeriod.DayOfMonth,\n          date: new Set([2, 4, 6, 10, 12, 18, 25, \"LAST\"])\n        });\n        return <RecurringSelect value={rule} disabled={true} onChange={setRule} mdxType=\"RecurringSelect\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"accessibility\"\n    }}>{`Accessibility`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`RecurringSelect`}</inlineCode>{` component is entirely usable by keyboard.`}</p>\n    <p>{`All selections can be done and undone with tabs and the space bar. The \"visual\"\ncalendar-style selectors are all built using radio or checkbox elements where\nnecessary, ensuring that users of assistive tech have appropriate context as to\nthe type of selection they are making.`}</p>\n    <h2 {...{\n      \"id\": \"related-components\"\n    }}>{`Related components`}</h2>\n    <p>{`To allow the user to select specific dates, use\n`}<a parentName=\"p\" {...{\n        \"href\": \"/components/date-picker\"\n      }}>{`Datepicker`}</a>{` or `}<a parentName=\"p\" {...{\n        \"href\": \"/components/input-date\"\n      }}>{`InputDate`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}
{"expireTime":9007200931831382000,"key":"gatsby-plugin-mdx-entire-payload-cdc6f9ad656f44954ade90169319c9ba-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":114,"offset":115},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":117},"end":{"line":5,"column":29,"offset":145},"indent":[]}},{"type":"import","value":"import { Playground, Props } from \"docz\";\nimport { Content } from \"../Content\";\nimport { Heading } from \"../Heading\";\nimport { Text } from \"../Text\";\nimport { Banner } from \"../Banner\";\nimport { Button } from \"../Button\";\nimport { Checkbox } from \"../Checkbox\";\nimport { useState, useRef } from \"react\";\nimport { Popover } from \".\";","position":{"start":{"line":8,"column":1,"offset":148},"end":{"line":16,"column":29,"offset":480},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Popover","position":{"start":{"line":18,"column":3,"offset":484},"end":{"line":18,"column":10,"offset":491},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":482},"end":{"line":18,"column":10,"offset":491},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A Popover displays floating informative and actionable content positioned in\nrelation to a target. The Popover can contain content, media, or other\ncomponents.","position":{"start":{"line":20,"column":1,"offset":493},"end":{"line":22,"column":12,"offset":652},"indent":[1,1]}}],"position":{"start":{"line":20,"column":1,"offset":493},"end":{"line":22,"column":12,"offset":652},"indent":[1,1]}},{"type":"code","lang":"ts","meta":null,"value":"import { Popover } from \"@jobber/components/Popover\";","position":{"start":{"line":24,"column":1,"offset":654},"end":{"line":26,"column":4,"offset":717},"indent":[1,1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const divRef = useRef();\n    const [showPopover, setShowPopover] = useState(false);\n    return (\n      <>\n        <span ref={divRef}>\n          <Button\n            label=\"Toggle Popover\"\n            onClick={() => setShowPopover(!showPopover)}\n          />\n        </span>\n        <Popover\n          attachTo={divRef}\n          open={showPopover}\n          preferredPlacement=\"right\"\n          onRequestClose={() => setShowPopover(false)}\n        >\n          <Content>Here is your first Popover</Content>\n        </Popover>\n      </>\n    );\n  }}\n</Playground>","position":{"start":{"line":28,"column":1,"offset":719},"end":{"line":51,"column":14,"offset":1306},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Props","position":{"start":{"line":53,"column":4,"offset":1311},"end":{"line":53,"column":9,"offset":1316},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":1308},"end":{"line":53,"column":9,"offset":1316},"indent":[]}},{"type":"jsx","value":"<Props of={Popover} />","position":{"start":{"line":55,"column":1,"offset":1318},"end":{"line":55,"column":23,"offset":1340},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Usage guidelines","position":{"start":{"line":57,"column":4,"offset":1345},"end":{"line":57,"column":20,"offset":1361},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":1342},"end":{"line":57,"column":20,"offset":1361},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Some scenarios for Popover include the following:","position":{"start":{"line":59,"column":1,"offset":1363},"end":{"line":59,"column":50,"offset":1412},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":1363},"end":{"line":59,"column":50,"offset":1412},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Informational","position":{"start":{"line":61,"column":5,"offset":1418},"end":{"line":61,"column":18,"offset":1431},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":1414},"end":{"line":61,"column":18,"offset":1431},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Introducing the user to a new experience, whether their first time using a\nproduct or to introduce a new or updated functionality in an existing\nexperience, Popover can be an excellent choice to highlight a specific piece of\nthe experience.","position":{"start":{"line":63,"column":1,"offset":1433},"end":{"line":66,"column":16,"offset":1673},"indent":[1,1,1]}}],"position":{"start":{"line":63,"column":1,"offset":1433},"end":{"line":66,"column":16,"offset":1673},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If there is an \"acknowledgement\" CTA for the user to confirm that they\nunderstand the change, use a ","position":{"start":{"line":68,"column":1,"offset":1675},"end":{"line":69,"column":30,"offset":1775},"indent":[1]}},{"type":"inlineCode","value":"learning","position":{"start":{"line":69,"column":30,"offset":1775},"end":{"line":69,"column":40,"offset":1785},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":69,"column":40,"offset":1785},"end":{"line":70,"column":1,"offset":1786},"indent":[1]}},{"type":"link","title":null,"url":"https://atlantis.getjobber.com/components/button","children":[{"type":"text","value":"Button","position":{"start":{"line":70,"column":2,"offset":1787},"end":{"line":70,"column":8,"offset":1793},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":1786},"end":{"line":70,"column":59,"offset":1844},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":70,"column":59,"offset":1844},"end":{"line":70,"column":60,"offset":1845},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":1675},"end":{"line":70,"column":60,"offset":1845},"indent":[1,1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const newFeatureButton = useRef();\n    const [showPopover, setShowPopover] = useState(false);\n    return (\n      <>\n        <span ref={newFeatureButton}>\n          <Button\n            label=\"New Feature\"\n            onClick={() => setShowPopover(!showPopover)}\n          />\n        </span>\n        <Popover\n          attachTo={newFeatureButton}\n          open={showPopover}\n          preferredPlacement=\"right\"\n          onRequestClose={() => setShowPopover(false)}\n        >\n          <Content>\n            <Heading>New feature!</Heading>\n            <Text>\n              You can now press a button that you couldn't before. This is\n              important!\n            </Text>\n            <Button\n              label=\"Got it\"\n              variation=\"learning\"\n              onClick={() => setShowPopover(!showPopover)}\n            />\n          </Content>\n        </Popover>\n      </>\n    );\n  }}\n</Playground>","position":{"start":{"line":72,"column":1,"offset":1847},"end":{"line":106,"column":14,"offset":2787},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Functional","position":{"start":{"line":108,"column":5,"offset":2793},"end":{"line":108,"column":15,"offset":2803},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":2789},"end":{"line":108,"column":15,"offset":2803},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Reveal a list of available actions to the user. For example, if the user clicks\non an element and there are four potential actions they might take, Popover is a\ngreat way to present those actions. If you're looking to provide a menu of\nactions that comes complete with a trigger button,\n","position":{"start":{"line":110,"column":1,"offset":2805},"end":{"line":114,"column":1,"offset":3092},"indent":[1,1,1,1]}},{"type":"link","title":null,"url":"https://atlantis.getjobber.com/components/menu","children":[{"type":"text","value":"Menu","position":{"start":{"line":114,"column":2,"offset":3093},"end":{"line":114,"column":6,"offset":3097},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":3092},"end":{"line":114,"column":55,"offset":3146},"indent":[]}},{"type":"text","value":" has that bundle ready to\ngo.","position":{"start":{"line":114,"column":55,"offset":3146},"end":{"line":115,"column":4,"offset":3175},"indent":[1]}}],"position":{"start":{"line":110,"column":1,"offset":2805},"end":{"line":115,"column":4,"offset":3175},"indent":[1,1,1,1,1]}},{"type":"jsx","value":"<Banner type=\"warning\" dismissible={false}>\n  A \"functional\" Popover hasn't been implemented in a componentized fashion yet.\n</Banner>","position":{"start":{"line":117,"column":1,"offset":3177},"end":{"line":119,"column":10,"offset":3311},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Related components","position":{"start":{"line":121,"column":5,"offset":3317},"end":{"line":121,"column":23,"offset":3335},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":3313},"end":{"line":121,"column":23,"offset":3335},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To add a menu button that presents multiple actions to the user, use\n","position":{"start":{"line":123,"column":1,"offset":3337},"end":{"line":124,"column":1,"offset":3406},"indent":[1]}},{"type":"link","title":null,"url":"https://atlantis.getjobber.com/components/menu","children":[{"type":"text","value":"Menu","position":{"start":{"line":124,"column":2,"offset":3407},"end":{"line":124,"column":6,"offset":3411},"indent":[]}}],"position":{"start":{"line":124,"column":1,"offset":3406},"end":{"line":124,"column":55,"offset":3460},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":124,"column":55,"offset":3460},"end":{"line":124,"column":56,"offset":3461},"indent":[]}}],"position":{"start":{"line":123,"column":1,"offset":3337},"end":{"line":124,"column":56,"offset":3461},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"To add a hint about a UI element's function in a permanent fashion (ie revealing\na Button's label on hover), use\n","position":{"start":{"line":126,"column":1,"offset":3463},"end":{"line":128,"column":1,"offset":3576},"indent":[1,1]}},{"type":"link","title":null,"url":"https://atlantis.getjobber.com/components/tooltip","children":[{"type":"text","value":"Tooltip","position":{"start":{"line":128,"column":2,"offset":3577},"end":{"line":128,"column":9,"offset":3584},"indent":[]}}],"position":{"start":{"line":128,"column":1,"offset":3576},"end":{"line":128,"column":61,"offset":3636},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":128,"column":61,"offset":3636},"end":{"line":128,"column":62,"offset":3637},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":3463},"end":{"line":128,"column":62,"offset":3637},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To add an inline informational element that the user can dismiss, consider if\n","position":{"start":{"line":130,"column":1,"offset":3639},"end":{"line":131,"column":1,"offset":3717},"indent":[1]}},{"type":"link","title":null,"url":"https://atlantis.getjobber.com/components/banner","children":[{"type":"text","value":"Banner","position":{"start":{"line":131,"column":2,"offset":3718},"end":{"line":131,"column":8,"offset":3724},"indent":[]}}],"position":{"start":{"line":131,"column":1,"offset":3717},"end":{"line":131,"column":59,"offset":3775},"indent":[]}},{"type":"text","value":" is the right fit for\nyour use case.","position":{"start":{"line":131,"column":59,"offset":3775},"end":{"line":132,"column":15,"offset":3811},"indent":[1]}}],"position":{"start":{"line":130,"column":1,"offset":3639},"end":{"line":132,"column":15,"offset":3811},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Content guidelines","position":{"start":{"line":134,"column":4,"offset":3816},"end":{"line":134,"column":22,"offset":3834},"indent":[]}}],"position":{"start":{"line":134,"column":1,"offset":3813},"end":{"line":134,"column":22,"offset":3834},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Popover text content should be concise and clear. Try not to go over three\nlines so the user can get back to what they were doing!","position":{"start":{"line":136,"column":3,"offset":3838},"end":{"line":137,"column":58,"offset":3970},"indent":[3]}}],"position":{"start":{"line":136,"column":3,"offset":3838},"end":{"line":137,"column":58,"offset":3970},"indent":[3]}}],"position":{"start":{"line":136,"column":1,"offset":3836},"end":{"line":137,"column":58,"offset":3970},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"In \"informational\" usage, Popper may have a CTA that allows the user to\n\"acknowledge\" and dismiss the Popover; this does not replace the need for the\ndismiss button","position":{"start":{"line":138,"column":3,"offset":3973},"end":{"line":140,"column":17,"offset":4141},"indent":[3,3]}}],"position":{"start":{"line":138,"column":3,"offset":3973},"end":{"line":140,"column":17,"offset":4141},"indent":[3,3]}}],"position":{"start":{"line":138,"column":1,"offset":3971},"end":{"line":140,"column":17,"offset":4141},"indent":[1,1]}}],"position":{"start":{"line":136,"column":1,"offset":3836},"end":{"line":140,"column":17,"offset":4141},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Accessibility","position":{"start":{"line":142,"column":4,"offset":4146},"end":{"line":142,"column":17,"offset":4159},"indent":[]}}],"position":{"start":{"line":142,"column":1,"offset":4143},"end":{"line":142,"column":17,"offset":4159},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Popover has a role of ","position":{"start":{"line":144,"column":1,"offset":4161},"end":{"line":144,"column":23,"offset":4183},"indent":[]}},{"type":"inlineCode","value":"dialog","position":{"start":{"line":144,"column":23,"offset":4183},"end":{"line":144,"column":31,"offset":4191},"indent":[]}},{"type":"text","value":" as it is an element that the user will be \"in\ndialogue\" with, whether selecting an action, confirming acknowledgement, or\ndismissing the Popover.","position":{"start":{"line":144,"column":31,"offset":4191},"end":{"line":146,"column":24,"offset":4337},"indent":[1,1]}}],"position":{"start":{"line":144,"column":1,"offset":4161},"end":{"line":146,"column":24,"offset":4337},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Depending on your use case, you may need to add focus management to your usage\nof Popover; for example, if selecting a Button opens a Popover, you will want to\nthen set focus to the Popover, and if the user dismisses the Popover, return\nfocus to the button that opened the Popover.","position":{"start":{"line":148,"column":1,"offset":4339},"end":{"line":151,"column":45,"offset":4620},"indent":[1,1,1]}}],"position":{"start":{"line":148,"column":1,"offset":4339},"end":{"line":151,"column":45,"offset":4620},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If your element is effectively acting as an inline DOM element that the user\nwould otherwise encounter when traversing the page, this focus management may\nnot be necessary.","position":{"start":{"line":153,"column":1,"offset":4622},"end":{"line":155,"column":18,"offset":4794},"indent":[1,1]}}],"position":{"start":{"line":153,"column":1,"offset":4622},"end":{"line":155,"column":18,"offset":4794},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"preferredPlacement options","position":{"start":{"line":157,"column":4,"offset":4799},"end":{"line":157,"column":30,"offset":4825},"indent":[]}}],"position":{"start":{"line":157,"column":1,"offset":4796},"end":{"line":157,"column":30,"offset":4825},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You have 5 ","position":{"start":{"line":159,"column":1,"offset":4827},"end":{"line":159,"column":12,"offset":4838},"indent":[]}},{"type":"inlineCode","value":"preferredPlacement","position":{"start":{"line":159,"column":12,"offset":4838},"end":{"line":159,"column":32,"offset":4858},"indent":[]}},{"type":"text","value":" options you can use:","position":{"start":{"line":159,"column":32,"offset":4858},"end":{"line":159,"column":53,"offset":4879},"indent":[]}}],"position":{"start":{"line":159,"column":1,"offset":4827},"end":{"line":159,"column":53,"offset":4879},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"right","position":{"start":{"line":161,"column":3,"offset":4883},"end":{"line":161,"column":10,"offset":4890},"indent":[]}}],"position":{"start":{"line":161,"column":3,"offset":4883},"end":{"line":161,"column":10,"offset":4890},"indent":[]}}],"position":{"start":{"line":161,"column":1,"offset":4881},"end":{"line":161,"column":10,"offset":4890},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"top","position":{"start":{"line":162,"column":3,"offset":4893},"end":{"line":162,"column":8,"offset":4898},"indent":[]}}],"position":{"start":{"line":162,"column":3,"offset":4893},"end":{"line":162,"column":8,"offset":4898},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":4891},"end":{"line":162,"column":8,"offset":4898},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"bottom","position":{"start":{"line":163,"column":3,"offset":4901},"end":{"line":163,"column":11,"offset":4909},"indent":[]}}],"position":{"start":{"line":163,"column":3,"offset":4901},"end":{"line":163,"column":11,"offset":4909},"indent":[]}}],"position":{"start":{"line":163,"column":1,"offset":4899},"end":{"line":163,"column":11,"offset":4909},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"auto","position":{"start":{"line":164,"column":3,"offset":4912},"end":{"line":164,"column":9,"offset":4918},"indent":[]}}],"position":{"start":{"line":164,"column":3,"offset":4912},"end":{"line":164,"column":9,"offset":4918},"indent":[]}}],"position":{"start":{"line":164,"column":1,"offset":4910},"end":{"line":164,"column":9,"offset":4918},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"left","position":{"start":{"line":165,"column":3,"offset":4921},"end":{"line":165,"column":9,"offset":4927},"indent":[]}}],"position":{"start":{"line":165,"column":3,"offset":4921},"end":{"line":165,"column":9,"offset":4927},"indent":[]}}],"position":{"start":{"line":165,"column":1,"offset":4919},"end":{"line":165,"column":9,"offset":4927},"indent":[]}}],"position":{"start":{"line":161,"column":1,"offset":4881},"end":{"line":165,"column":9,"offset":4927},"indent":[1,1,1,1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const topRef = useRef();\n    const leftRef = useRef();\n    const rightRef = useRef();\n    const bottomRef = useRef();\n    const [showPopover, setShowPopover] = useState(true);\n    return (\n      <div>\n        <Content>\n          <span ref={topRef}>\n            <Button label=\"Top Reference\" />\n          </span>\n        </Content>\n        <Popover attachTo={topRef} open={showPopover} preferredPlacement=\"top\">\n          <Content>Top Popover</Content>\n        </Popover>\n        <Content>\n          <span ref={leftRef}>\n            <Button label=\"Left Reference\" />\n          </span>\n        </Content>\n        <Popover\n          attachTo={leftRef}\n          open={showPopover}\n          preferredPlacement=\"left\"\n        >\n          <Content>Left Popover</Content>\n        </Popover>\n        <Content>\n          <span ref={rightRef}>\n            <Button label=\"Right Reference\" />\n          </span>\n        </Content>\n        <Popover\n          attachTo={rightRef}\n          open={showPopover}\n          preferredPlacement=\"right\"\n        >\n          <Content>Right Popover</Content>\n        </Popover>\n        <Content>\n          <span ref={bottomRef}>\n            <Button label=\"Bottom Reference\" />\n          </span>\n        </Content>\n        <Popover\n          attachTo={bottomRef}\n          open={showPopover}\n          preferredPlacement=\"bottom\"\n        >\n          <Content>Bottom Popover</Content>\n        </Popover>\n      </div>\n    );\n  }}\n</Playground>","position":{"start":{"line":167,"column":1,"offset":4929},"end":{"line":223,"column":14,"offset":6423},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Notes","position":{"start":{"line":225,"column":4,"offset":6428},"end":{"line":225,"column":9,"offset":6433},"indent":[]}}],"position":{"start":{"line":225,"column":1,"offset":6425},"end":{"line":225,"column":9,"offset":6433},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"There is no componentized way to pass in actions for a \"functional\" Popover\nyet, but we have a good idea of what that would look like. We believe there\nmay be some opportunity to share elements of Popover with Menu and vice-versa.","position":{"start":{"line":227,"column":3,"offset":6437},"end":{"line":229,"column":81,"offset":6671},"indent":[3,3]}}],"position":{"start":{"line":227,"column":3,"offset":6437},"end":{"line":229,"column":81,"offset":6671},"indent":[3,3]}}],"position":{"start":{"line":227,"column":1,"offset":6435},"end":{"line":229,"column":81,"offset":6671},"indent":[1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"There is no built-in focus management in Popover, as the specific\nimplementation should drive those considerations","position":{"start":{"line":230,"column":3,"offset":6674},"end":{"line":231,"column":51,"offset":6790},"indent":[3]}}],"position":{"start":{"line":230,"column":3,"offset":6674},"end":{"line":231,"column":51,"offset":6790},"indent":[3]}}],"position":{"start":{"line":230,"column":1,"offset":6672},"end":{"line":231,"column":51,"offset":6790},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Popover uses a plugin called ","position":{"start":{"line":232,"column":3,"offset":6793},"end":{"line":232,"column":32,"offset":6822},"indent":[]}},{"type":"link","title":null,"url":"https://popper.js.org/react-popper/v2/","children":[{"type":"text","value":"Popper","position":{"start":{"line":232,"column":33,"offset":6823},"end":{"line":232,"column":39,"offset":6829},"indent":[]}}],"position":{"start":{"line":232,"column":32,"offset":6822},"end":{"line":232,"column":80,"offset":6870},"indent":[]}},{"type":"text","value":"\nto power its' positioning","position":{"start":{"line":232,"column":80,"offset":6870},"end":{"line":233,"column":28,"offset":6898},"indent":[3]}}],"position":{"start":{"line":232,"column":3,"offset":6793},"end":{"line":233,"column":28,"offset":6898},"indent":[3]}}],"position":{"start":{"line":232,"column":1,"offset":6791},"end":{"line":233,"column":28,"offset":6898},"indent":[1]}}],"position":{"start":{"line":227,"column":1,"offset":6435},"end":{"line":233,"column":28,"offset":6898},"indent":[1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":236,"column":1,"offset":6901},"end":{"line":236,"column":31,"offset":6931},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":236,"column":31,"offset":6931}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { Playground, Props } from \"docz\";\nimport { Content } from \"../Content\";\nimport { Heading } from \"../Heading\";\nimport { Text } from \"../Text\";\nimport { Banner } from \"../Banner\";\nimport { Button } from \"../Button\";\nimport { Checkbox } from \"../Checkbox\";\nimport { useState, useRef } from \"react\";\nimport { Popover } from \".\";\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"popover\"\n    }}>{`Popover`}</h1>\n    <p>{`A Popover displays floating informative and actionable content positioned in\nrelation to a target. The Popover can contain content, media, or other\ncomponents.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { Popover } from \"@jobber/components/Popover\";\n`}</code></pre>\n    <Playground __position={0} __code={'() => {\\n  const divRef = useRef()\\n  const [showPopover, setShowPopover] = useState(false)\\n  return (\\n    <>\\n      <span ref={divRef}>\\n        <Button\\n          label=\\\"Toggle Popover\\\"\\n          onClick={() => setShowPopover(!showPopover)}\\n        />\\n      </span>\\n      <Popover\\n        attachTo={divRef}\\n        open={showPopover}\\n        preferredPlacement=\\\"right\\\"\\n        onRequestClose={() => setShowPopover(false)}\\n      >\\n        <Content>Here is your first Popover</Content>\\n      </Popover>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Content,\n      Heading,\n      Text,\n      Banner,\n      Button,\n      Checkbox,\n      useState,\n      useRef,\n      Popover,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const divRef = useRef();\n        const [showPopover, setShowPopover] = useState(false);\n        return <>\n        <span ref={divRef}>\n          <Button label=\"Toggle Popover\" onClick={() => setShowPopover(!showPopover)} mdxType=\"Button\" />\n        </span>\n        <Popover attachTo={divRef} open={showPopover} preferredPlacement=\"right\" onRequestClose={() => setShowPopover(false)} mdxType=\"Popover\">\n          <Content mdxType=\"Content\">Here is your first Popover</Content>\n        </Popover>\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Popover} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"usage-guidelines\"\n    }}>{`Usage guidelines`}</h2>\n    <p>{`Some scenarios for Popover include the following:`}</p>\n    <h3 {...{\n      \"id\": \"informational\"\n    }}>{`Informational`}</h3>\n    <p>{`Introducing the user to a new experience, whether their first time using a\nproduct or to introduce a new or updated functionality in an existing\nexperience, Popover can be an excellent choice to highlight a specific piece of\nthe experience.`}</p>\n    <p>{`If there is an \"acknowledgement\" CTA for the user to confirm that they\nunderstand the change, use a `}<inlineCode parentName=\"p\">{`learning`}</inlineCode>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://atlantis.getjobber.com/components/button\"\n      }}>{`Button`}</a>{`.`}</p>\n    <Playground __position={2} __code={'() => {\\n  const newFeatureButton = useRef()\\n  const [showPopover, setShowPopover] = useState(false)\\n  return (\\n    <>\\n      <span ref={newFeatureButton}>\\n        <Button\\n          label=\\\"New Feature\\\"\\n          onClick={() => setShowPopover(!showPopover)}\\n        />\\n      </span>\\n      <Popover\\n        attachTo={newFeatureButton}\\n        open={showPopover}\\n        preferredPlacement=\\\"right\\\"\\n        onRequestClose={() => setShowPopover(false)}\\n      >\\n        <Content>\\n          <Heading>New feature!</Heading>\\n          <Text>\\n            You can now press a button that you couldn\\'t before. This is\\n            important!\\n          </Text>\\n          <Button\\n            label=\\\"Got it\\\"\\n            variation=\\\"learning\\\"\\n            onClick={() => setShowPopover(!showPopover)}\\n          />\\n        </Content>\\n      </Popover>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Content,\n      Heading,\n      Text,\n      Banner,\n      Button,\n      Checkbox,\n      useState,\n      useRef,\n      Popover,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const newFeatureButton = useRef();\n        const [showPopover, setShowPopover] = useState(false);\n        return <>\n        <span ref={newFeatureButton}>\n          <Button label=\"New Feature\" onClick={() => setShowPopover(!showPopover)} mdxType=\"Button\" />\n        </span>\n        <Popover attachTo={newFeatureButton} open={showPopover} preferredPlacement=\"right\" onRequestClose={() => setShowPopover(false)} mdxType=\"Popover\">\n          <Content mdxType=\"Content\">\n            <Heading mdxType=\"Heading\">New feature!</Heading>\n            <Text mdxType=\"Text\">\n              You can now press a button that you couldn't before. This is\n              important!\n            </Text>\n            <Button label=\"Got it\" variation=\"learning\" onClick={() => setShowPopover(!showPopover)} mdxType=\"Button\" />\n          </Content>\n        </Popover>\n      </>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"functional\"\n    }}>{`Functional`}</h3>\n    <p>{`Reveal a list of available actions to the user. For example, if the user clicks\non an element and there are four potential actions they might take, Popover is a\ngreat way to present those actions. If you're looking to provide a menu of\nactions that comes complete with a trigger button,\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://atlantis.getjobber.com/components/menu\"\n      }}>{`Menu`}</a>{` has that bundle ready to\ngo.`}</p>\n    <Banner type=\"warning\" dismissible={false} mdxType=\"Banner\">\n  A \"functional\" Popover hasn't been implemented in a componentized fashion yet.\n    </Banner>\n    <h3 {...{\n      \"id\": \"related-components\"\n    }}>{`Related components`}</h3>\n    <p>{`To add a menu button that presents multiple actions to the user, use\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://atlantis.getjobber.com/components/menu\"\n      }}>{`Menu`}</a>{`.`}</p>\n    <p>{`To add a hint about a UI element's function in a permanent fashion (ie revealing\na Button's label on hover), use\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://atlantis.getjobber.com/components/tooltip\"\n      }}>{`Tooltip`}</a>{`.`}</p>\n    <p>{`To add an inline informational element that the user can dismiss, consider if\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://atlantis.getjobber.com/components/banner\"\n      }}>{`Banner`}</a>{` is the right fit for\nyour use case.`}</p>\n    <h2 {...{\n      \"id\": \"content-guidelines\"\n    }}>{`Content guidelines`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Popover text content should be concise and clear. Try not to go over three\nlines so the user can get back to what they were doing!`}</li>\n      <li parentName=\"ul\">{`In \"informational\" usage, Popper may have a CTA that allows the user to\n\"acknowledge\" and dismiss the Popover; this does not replace the need for the\ndismiss button`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"accessibility\"\n    }}>{`Accessibility`}</h2>\n    <p>{`Popover has a role of `}<inlineCode parentName=\"p\">{`dialog`}</inlineCode>{` as it is an element that the user will be \"in\ndialogue\" with, whether selecting an action, confirming acknowledgement, or\ndismissing the Popover.`}</p>\n    <p>{`Depending on your use case, you may need to add focus management to your usage\nof Popover; for example, if selecting a Button opens a Popover, you will want to\nthen set focus to the Popover, and if the user dismisses the Popover, return\nfocus to the button that opened the Popover.`}</p>\n    <p>{`If your element is effectively acting as an inline DOM element that the user\nwould otherwise encounter when traversing the page, this focus management may\nnot be necessary.`}</p>\n    <h2 {...{\n      \"id\": \"preferredplacement-options\"\n    }}>{`preferredPlacement options`}</h2>\n    <p>{`You have 5 `}<inlineCode parentName=\"p\">{`preferredPlacement`}</inlineCode>{` options you can use:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`right`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`top`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`bottom`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`auto`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`left`}</inlineCode></li>\n    </ul>\n    <Playground __position={4} __code={'() => {\\n  const topRef = useRef()\\n  const leftRef = useRef()\\n  const rightRef = useRef()\\n  const bottomRef = useRef()\\n  const [showPopover, setShowPopover] = useState(true)\\n  return (\\n    <div>\\n      <Content>\\n        <span ref={topRef}>\\n          <Button label=\\\"Top Reference\\\" />\\n        </span>\\n      </Content>\\n      <Popover attachTo={topRef} open={showPopover} preferredPlacement=\\\"top\\\">\\n        <Content>Top Popover</Content>\\n      </Popover>\\n      <Content>\\n        <span ref={leftRef}>\\n          <Button label=\\\"Left Reference\\\" />\\n        </span>\\n      </Content>\\n      <Popover\\n        attachTo={leftRef}\\n        open={showPopover}\\n        preferredPlacement=\\\"left\\\"\\n      >\\n        <Content>Left Popover</Content>\\n      </Popover>\\n      <Content>\\n        <span ref={rightRef}>\\n          <Button label=\\\"Right Reference\\\" />\\n        </span>\\n      </Content>\\n      <Popover\\n        attachTo={rightRef}\\n        open={showPopover}\\n        preferredPlacement=\\\"right\\\"\\n      >\\n        <Content>Right Popover</Content>\\n      </Popover>\\n      <Content>\\n        <span ref={bottomRef}>\\n          <Button label=\\\"Bottom Reference\\\" />\\n        </span>\\n      </Content>\\n      <Popover\\n        attachTo={bottomRef}\\n        open={showPopover}\\n        preferredPlacement=\\\"bottom\\\"\\n      >\\n        <Content>Bottom Popover</Content>\\n      </Popover>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Content,\n      Heading,\n      Text,\n      Banner,\n      Button,\n      Checkbox,\n      useState,\n      useRef,\n      Popover,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const topRef = useRef();\n        const leftRef = useRef();\n        const rightRef = useRef();\n        const bottomRef = useRef();\n        const [showPopover, setShowPopover] = useState(true);\n        return <div>\n        <Content mdxType=\"Content\">\n          <span ref={topRef}>\n            <Button label=\"Top Reference\" mdxType=\"Button\" />\n          </span>\n        </Content>\n        <Popover attachTo={topRef} open={showPopover} preferredPlacement=\"top\" mdxType=\"Popover\">\n          <Content mdxType=\"Content\">Top Popover</Content>\n        </Popover>\n        <Content mdxType=\"Content\">\n          <span ref={leftRef}>\n            <Button label=\"Left Reference\" mdxType=\"Button\" />\n          </span>\n        </Content>\n        <Popover attachTo={leftRef} open={showPopover} preferredPlacement=\"left\" mdxType=\"Popover\">\n          <Content mdxType=\"Content\">Left Popover</Content>\n        </Popover>\n        <Content mdxType=\"Content\">\n          <span ref={rightRef}>\n            <Button label=\"Right Reference\" mdxType=\"Button\" />\n          </span>\n        </Content>\n        <Popover attachTo={rightRef} open={showPopover} preferredPlacement=\"right\" mdxType=\"Popover\">\n          <Content mdxType=\"Content\">Right Popover</Content>\n        </Popover>\n        <Content mdxType=\"Content\">\n          <span ref={bottomRef}>\n            <Button label=\"Bottom Reference\" mdxType=\"Button\" />\n          </span>\n        </Content>\n        <Popover attachTo={bottomRef} open={showPopover} preferredPlacement=\"bottom\" mdxType=\"Popover\">\n          <Content mdxType=\"Content\">Bottom Popover</Content>\n        </Popover>\n      </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"notes\"\n    }}>{`Notes`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`There is no componentized way to pass in actions for a \"functional\" Popover\nyet, but we have a good idea of what that would look like. We believe there\nmay be some opportunity to share elements of Popover with Menu and vice-versa.`}</li>\n      <li parentName=\"ul\">{`There is no built-in focus management in Popover, as the specific\nimplementation should drive those considerations`}</li>\n      <li parentName=\"ul\">{`Popover uses a plugin called `}<a parentName=\"li\" {...{\n          \"href\": \"https://popper.js.org/react-popper/v2/\"\n        }}>{`Popper`}</a>{`\nto power its' positioning`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}
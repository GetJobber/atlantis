{"expireTime":9007200931831330000,"key":"gatsby-plugin-mdx-entire-payload-b63c1f50472a4be08863169d31003e1a-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":114,"offset":115},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":117},"end":{"line":5,"column":29,"offset":145},"indent":[]}},{"type":"import","value":"import { Playground, Props } from \"docz\";\nimport { ComponentStatus } from \"@jobber/docx\";\nimport { Autocomplete } from \"../Autocomplete\";\nimport { InputGroup } from \".\";\nimport { InputText } from \"../InputText\";\nimport { InputTime } from \"../InputTime\";\nimport { CivilTime } from \"@std-proposal/temporal\";\nimport { useState } from \"react\";","position":{"start":{"line":8,"column":1,"offset":148},"end":{"line":15,"column":34,"offset":487},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"InputGroup","position":{"start":{"line":17,"column":3,"offset":491},"end":{"line":17,"column":13,"offset":501},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":489},"end":{"line":17,"column":13,"offset":501},"indent":[]}},{"type":"jsx","value":"<ComponentStatus stage=\"rc\" responsive=\"no\" accessible=\"yes\" />","position":{"start":{"line":19,"column":1,"offset":503},"end":{"line":19,"column":64,"offset":566},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Use InputGroup to show a visual relationship between related input fields. If a\nnumber of form fields, once submitted, make up a group of content (ie. an\naddress, or first and last name becoming a full name, start and end times of an\nevent) they are great candidates for an InputGroup.","position":{"start":{"line":21,"column":1,"offset":568},"end":{"line":24,"column":52,"offset":853},"indent":[1,1,1]}}],"position":{"start":{"line":21,"column":1,"offset":568},"end":{"line":24,"column":52,"offset":853},"indent":[1,1,1]}},{"type":"jsx","value":"<Playground>\n  <InputGroup flowDirection=\"horizontal\">\n    <InputTime defaultValue={new CivilTime(8, 0)} />\n    <InputTime defaultValue={new CivilTime(17, 0)} />\n  </InputGroup>\n</Playground>","position":{"start":{"line":26,"column":1,"offset":855},"end":{"line":31,"column":14,"offset":1046},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Props","position":{"start":{"line":33,"column":4,"offset":1051},"end":{"line":33,"column":9,"offset":1056},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1048},"end":{"line":33,"column":9,"offset":1056},"indent":[]}},{"type":"jsx","value":"<Props of={InputGroup} />","position":{"start":{"line":35,"column":1,"offset":1058},"end":{"line":35,"column":26,"offset":1083},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":37,"column":1,"offset":1085},"end":{"line":37,"column":4,"offset":1088},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Nested example","position":{"start":{"line":39,"column":4,"offset":1093},"end":{"line":39,"column":18,"offset":1107},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1090},"end":{"line":39,"column":18,"offset":1107},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The default layout is for fields to flow in a vertical direction, one above the\nnext. Use the ","position":{"start":{"line":41,"column":1,"offset":1109},"end":{"line":42,"column":15,"offset":1203},"indent":[1]}},{"type":"inlineCode","value":"flowDirection","position":{"start":{"line":42,"column":15,"offset":1203},"end":{"line":42,"column":30,"offset":1218},"indent":[]}},{"type":"text","value":" prop to specify when you want fields to flow in a\nhorizontal direction.","position":{"start":{"line":42,"column":30,"offset":1218},"end":{"line":43,"column":22,"offset":1290},"indent":[1]}}],"position":{"start":{"line":41,"column":1,"offset":1109},"end":{"line":43,"column":22,"offset":1290},"indent":[1,1]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":45,"column":5,"offset":1296},"end":{"line":45,"column":10,"offset":1301},"indent":[]}}],"position":{"start":{"line":45,"column":3,"offset":1294},"end":{"line":45,"column":12,"offset":1303},"indent":[]}},{"type":"text","value":" Nested ","position":{"start":{"line":45,"column":12,"offset":1303},"end":{"line":45,"column":20,"offset":1311},"indent":[]}},{"type":"inlineCode","value":"InputGroup","position":{"start":{"line":45,"column":20,"offset":1311},"end":{"line":45,"column":32,"offset":1323},"indent":[]}},{"type":"text","value":" components need to be of\n","position":{"start":{"line":45,"column":32,"offset":1323},"end":{"line":46,"column":3,"offset":1351},"indent":[3]}},{"type":"inlineCode","value":"flowDirection=\"horizontal\"","position":{"start":{"line":46,"column":3,"offset":1351},"end":{"line":46,"column":31,"offset":1379},"indent":[]}},{"type":"text","value":" to avoid layout issues caused by nesting. Any\nnon-horizontal nested groups will log an error to the console and not be\nrendered.","position":{"start":{"line":46,"column":31,"offset":1379},"end":{"line":48,"column":12,"offset":1512},"indent":[3,3]}}],"position":{"start":{"line":45,"column":3,"offset":1294},"end":{"line":48,"column":12,"offset":1512},"indent":[3,3,3]}}],"position":{"start":{"line":45,"column":1,"offset":1292},"end":{"line":48,"column":12,"offset":1512},"indent":[1,1,1]}},{"type":"jsx","value":"<Playground>\n  <InputGroup>\n    <InputText placeholder=\"Street 1\" />\n    <InputText placeholder=\"Street 2\" />\n    <InputGroup flowDirection=\"horizontal\">\n      <InputText placeholder=\"City\" />\n      <InputText placeholder=\"Province\" />\n    </InputGroup>\n    <InputGroup flowDirection=\"horizontal\">\n      <InputText placeholder=\"Zip code\" />\n      <InputText placeholder=\"Country\" />\n    </InputGroup>\n  </InputGroup>\n</Playground>","position":{"start":{"line":50,"column":1,"offset":1514},"end":{"line":63,"column":14,"offset":1944},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":65,"column":1,"offset":1946},"end":{"line":65,"column":4,"offset":1949},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Nested with Autocomplete","position":{"start":{"line":67,"column":4,"offset":1954},"end":{"line":67,"column":28,"offset":1978},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":1951},"end":{"line":67,"column":28,"offset":1978},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":69,"column":1,"offset":1980},"end":{"line":69,"column":5,"offset":1984},"indent":[]}},{"type":"link","title":null,"url":"/components/autocomplete","children":[{"type":"text","value":"Autocomplete component","position":{"start":{"line":69,"column":6,"offset":1985},"end":{"line":69,"column":28,"offset":2007},"indent":[]}}],"position":{"start":{"line":69,"column":5,"offset":1984},"end":{"line":69,"column":55,"offset":2034},"indent":[]}},{"type":"text","value":" also works inside the\n","position":{"start":{"line":69,"column":55,"offset":2034},"end":{"line":70,"column":1,"offset":2057},"indent":[1]}},{"type":"inlineCode","value":"InputGroup","position":{"start":{"line":70,"column":1,"offset":2057},"end":{"line":70,"column":13,"offset":2069},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":70,"column":13,"offset":2069},"end":{"line":70,"column":14,"offset":2070},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":1980},"end":{"line":70,"column":14,"offset":2070},"indent":[1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const options = [\n      { value: 1, label: \"Nostromo\" },\n      { value: 2, label: \"Rodger Young\" },\n      { value: 3, label: \"Serenity\" },\n      { value: 4, label: \"Sleeper Service\" },\n      { value: 5, label: \"Enterprise\" },\n      { value: 6, label: \"Enterprise-D\" },\n    ];\n    const [value, setValue] = useState();\n    return (\n      <InputGroup>\n        <InputText placeholder=\"Street 1\" />\n        <InputText placeholder=\"Street 2\" />\n        <InputGroup flowDirection=\"horizontal\">\n          <InputText placeholder=\"City\" />\n          <Autocomplete\n            value={value}\n            initialOptions={[]}\n            onChange={setValue}\n            getOptions={getOptions}\n            placeholder=\"Autocomplete this!\"\n          />\n        </InputGroup>\n        <InputGroup flowDirection=\"horizontal\">\n          <InputText placeholder=\"Zip code\" />\n          <InputText placeholder=\"Country\" />\n        </InputGroup>\n      </InputGroup>\n    );\n    function getOptions(text) {\n      if (text === \"\") {\n        return options;\n      }\n      const filterRegex = new RegExp(text, \"i\");\n      return options.filter(option => option.label.match(filterRegex));\n    }\n  }}\n</Playground>","position":{"start":{"line":72,"column":1,"offset":2072},"end":{"line":111,"column":14,"offset":3285},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":114,"column":1,"offset":3288},"end":{"line":114,"column":31,"offset":3318},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":114,"column":31,"offset":3318}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { Playground, Props } from \"docz\";\nimport { ComponentStatus } from \"@jobber/docx\";\nimport { Autocomplete } from \"../Autocomplete\";\nimport { InputGroup } from \".\";\nimport { InputText } from \"../InputText\";\nimport { InputTime } from \"../InputTime\";\nimport { CivilTime } from \"@std-proposal/temporal\";\nimport { useState } from \"react\";\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"inputgroup\"\n    }}>{`InputGroup`}</h1>\n    <ComponentStatus stage=\"rc\" responsive=\"no\" accessible=\"yes\" mdxType=\"ComponentStatus\" />\n    <p>{`Use InputGroup to show a visual relationship between related input fields. If a\nnumber of form fields, once submitted, make up a group of content (ie. an\naddress, or first and last name becoming a full name, start and end times of an\nevent) they are great candidates for an InputGroup.`}</p>\n    <Playground __position={1} __code={'<InputGroup flowDirection=\\\"horizontal\\\">\\n  <InputTime defaultValue={new CivilTime(8, 0)} />\\n  <InputTime defaultValue={new CivilTime(17, 0)} />\\n</InputGroup>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      Autocomplete,\n      InputGroup,\n      InputText,\n      InputTime,\n      CivilTime,\n      useState,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <InputGroup flowDirection=\"horizontal\" mdxType=\"InputGroup\">\n    <InputTime defaultValue={new CivilTime(8, 0)} mdxType=\"InputTime\" />\n    <InputTime defaultValue={new CivilTime(17, 0)} mdxType=\"InputTime\" />\n  </InputGroup>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={InputGroup} mdxType=\"Props\" />\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"nested-example\"\n    }}>{`Nested example`}</h2>\n    <p>{`The default layout is for fields to flow in a vertical direction, one above the\nnext. Use the `}<inlineCode parentName=\"p\">{`flowDirection`}</inlineCode>{` prop to specify when you want fields to flow in a\nhorizontal direction.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note:`}</strong>{` Nested `}<inlineCode parentName=\"p\">{`InputGroup`}</inlineCode>{` components need to be of\n`}<inlineCode parentName=\"p\">{`flowDirection=\"horizontal\"`}</inlineCode>{` to avoid layout issues caused by nesting. Any\nnon-horizontal nested groups will log an error to the console and not be\nrendered.`}</p>\n    </blockquote>\n    <Playground __position={3} __code={'<InputGroup>\\n  <InputText placeholder=\\\"Street 1\\\" />\\n  <InputText placeholder=\\\"Street 2\\\" />\\n  <InputGroup flowDirection=\\\"horizontal\\\">\\n    <InputText placeholder=\\\"City\\\" />\\n    <InputText placeholder=\\\"Province\\\" />\\n  </InputGroup>\\n  <InputGroup flowDirection=\\\"horizontal\\\">\\n    <InputText placeholder=\\\"Zip code\\\" />\\n    <InputText placeholder=\\\"Country\\\" />\\n  </InputGroup>\\n</InputGroup>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      Autocomplete,\n      InputGroup,\n      InputText,\n      InputTime,\n      CivilTime,\n      useState,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <InputGroup mdxType=\"InputGroup\">\n    <InputText placeholder=\"Street 1\" mdxType=\"InputText\" />\n    <InputText placeholder=\"Street 2\" mdxType=\"InputText\" />\n    <InputGroup flowDirection=\"horizontal\" mdxType=\"InputGroup\">\n      <InputText placeholder=\"City\" mdxType=\"InputText\" />\n      <InputText placeholder=\"Province\" mdxType=\"InputText\" />\n    </InputGroup>\n    <InputGroup flowDirection=\"horizontal\" mdxType=\"InputGroup\">\n      <InputText placeholder=\"Zip code\" mdxType=\"InputText\" />\n      <InputText placeholder=\"Country\" mdxType=\"InputText\" />\n    </InputGroup>\n  </InputGroup>\n    </Playground>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"nested-with-autocomplete\"\n    }}>{`Nested with Autocomplete`}</h2>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"/components/autocomplete\"\n      }}>{`Autocomplete component`}</a>{` also works inside the\n`}<inlineCode parentName=\"p\">{`InputGroup`}</inlineCode>{`.`}</p>\n    <Playground __position={4} __code={'() => {\\n  const options = [\\n    { value: 1, label: \\'Nostromo\\' },\\n    { value: 2, label: \\'Rodger Young\\' },\\n    { value: 3, label: \\'Serenity\\' },\\n    { value: 4, label: \\'Sleeper Service\\' },\\n    { value: 5, label: \\'Enterprise\\' },\\n    { value: 6, label: \\'Enterprise-D\\' },\\n  ]\\n  const [value, setValue] = useState()\\n  return (\\n    <InputGroup>\\n      <InputText placeholder=\\\"Street 1\\\" />\\n      <InputText placeholder=\\\"Street 2\\\" />\\n      <InputGroup flowDirection=\\\"horizontal\\\">\\n        <InputText placeholder=\\\"City\\\" />\\n        <Autocomplete\\n          value={value}\\n          initialOptions={[]}\\n          onChange={setValue}\\n          getOptions={getOptions}\\n          placeholder=\\\"Autocomplete this!\\\"\\n        />\\n      </InputGroup>\\n      <InputGroup flowDirection=\\\"horizontal\\\">\\n        <InputText placeholder=\\\"Zip code\\\" />\\n        <InputText placeholder=\\\"Country\\\" />\\n      </InputGroup>\\n    </InputGroup>\\n  )\\n  function getOptions(text) {\\n    if (text === \\'\\') {\\n      return options\\n    }\\n    const filterRegex = new RegExp(text, \\'i\\')\\n    return options.filter(option => option.label.match(filterRegex))\\n  }\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      Autocomplete,\n      InputGroup,\n      InputText,\n      InputTime,\n      CivilTime,\n      useState,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const options = [{\n          value: 1,\n          label: \"Nostromo\"\n        }, {\n          value: 2,\n          label: \"Rodger Young\"\n        }, {\n          value: 3,\n          label: \"Serenity\"\n        }, {\n          value: 4,\n          label: \"Sleeper Service\"\n        }, {\n          value: 5,\n          label: \"Enterprise\"\n        }, {\n          value: 6,\n          label: \"Enterprise-D\"\n        }];\n        const [value, setValue] = useState();\n        return <InputGroup mdxType=\"InputGroup\">\n        <InputText placeholder=\"Street 1\" mdxType=\"InputText\" />\n        <InputText placeholder=\"Street 2\" mdxType=\"InputText\" />\n        <InputGroup flowDirection=\"horizontal\" mdxType=\"InputGroup\">\n          <InputText placeholder=\"City\" mdxType=\"InputText\" />\n          <Autocomplete value={value} initialOptions={[]} onChange={setValue} getOptions={getOptions} placeholder=\"Autocomplete this!\" mdxType=\"Autocomplete\" />\n        </InputGroup>\n        <InputGroup flowDirection=\"horizontal\" mdxType=\"InputGroup\">\n          <InputText placeholder=\"Zip code\" mdxType=\"InputText\" />\n          <InputText placeholder=\"Country\" mdxType=\"InputText\" />\n        </InputGroup>\n      </InputGroup>;\n\n        function getOptions(text) {\n          if (text === \"\") {\n            return options;\n          }\n\n          const filterRegex = new RegExp(text, \"i\");\n          return options.filter(option => option.label.match(filterRegex));\n        }\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}
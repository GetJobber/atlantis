{"expireTime":9007200931831329000,"key":"gatsby-plugin-mdx-entire-payload-66ca8bbb8340eb72e099652ec47594f6-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":114,"offset":115},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":117},"end":{"line":5,"column":29,"offset":145},"indent":[]}},{"type":"import","value":"import { ArgsTable, Canvas, Meta, Story } from \"@storybook/addon-docs\";\nimport { useState } from \"react\";\nimport { Heading } from \"@jobber/components/Heading\";\nimport { Content } from \"@jobber/components/Content\";\nimport { Emphasis } from \"@jobber/components/Emphasis\";\nimport { Text } from \"@jobber/components/Text\";\nimport { Button } from \"@jobber/components/Button\";\nimport { Countdown } from \".\";","position":{"start":{"line":7,"column":1,"offset":147},"end":{"line":14,"column":31,"offset":547},"indent":[1,1,1,1,1,1,1]}},{"type":"jsx","value":"<Meta title=\"Components/Countdown\" component={Countdown} />","position":{"start":{"line":16,"column":1,"offset":549},"end":{"line":16,"column":60,"offset":608},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Countdown","position":{"start":{"line":18,"column":3,"offset":612},"end":{"line":18,"column":12,"offset":621},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":610},"end":{"line":18,"column":12,"offset":621},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Countdown is used to ensure that a \"countdown\" to a specified end time is\ndisplayed in a consistent format. No text styling is applied to Countdown; it is\nonly concerned with the text content that will be presented.","position":{"start":{"line":20,"column":1,"offset":623},"end":{"line":22,"column":61,"offset":838},"indent":[1,1]}}],"position":{"start":{"line":20,"column":1,"offset":623},"end":{"line":22,"column":61,"offset":838},"indent":[1,1]}},{"type":"code","lang":"ts","meta":null,"value":"import { Countdown } from \"@jobber/components/Countdown\";","position":{"start":{"line":24,"column":1,"offset":840},"end":{"line":26,"column":4,"offset":907},"indent":[1,1]}},{"type":"jsx","value":"<Canvas>\n  <Story\n    name=\"Countdown\"\n    args={{\n      date: new Date(new Date().getTime() + 25 * 3600 * 1000),\n      granularity: \"dhms\",\n      showUnits: true,\n    }}\n  >\n    {args => <Countdown {...args} />}\n  </Story>\n</Canvas>","position":{"start":{"line":28,"column":1,"offset":909},"end":{"line":39,"column":10,"offset":1142},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Props","position":{"start":{"line":41,"column":4,"offset":1147},"end":{"line":41,"column":9,"offset":1152},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":1144},"end":{"line":41,"column":9,"offset":1152},"indent":[]}},{"type":"jsx","value":"<ArgsTable of={Countdown} story=\"Countdown\" />","position":{"start":{"line":43,"column":1,"offset":1154},"end":{"line":43,"column":47,"offset":1200},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Design & usage guidelines","position":{"start":{"line":45,"column":4,"offset":1205},"end":{"line":45,"column":29,"offset":1230},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1202},"end":{"line":45,"column":29,"offset":1230},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Use Countdown when:","position":{"start":{"line":47,"column":1,"offset":1232},"end":{"line":47,"column":20,"offset":1251},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":1232},"end":{"line":47,"column":20,"offset":1251},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"There is a need to make a deadline, such as time left to update important\ndetails about your account, apparent to the user","position":{"start":{"line":49,"column":3,"offset":1255},"end":{"line":50,"column":51,"offset":1379},"indent":[3]}}],"position":{"start":{"line":49,"column":3,"offset":1255},"end":{"line":50,"column":51,"offset":1379},"indent":[3]}}],"position":{"start":{"line":49,"column":1,"offset":1253},"end":{"line":50,"column":51,"offset":1379},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"There is a desire to convey urgency to the user for conversion optimization\npurposes, such as in a time-bound promotional offer","position":{"start":{"line":51,"column":3,"offset":1382},"end":{"line":52,"column":54,"offset":1511},"indent":[3]}}],"position":{"start":{"line":51,"column":3,"offset":1382},"end":{"line":52,"column":54,"offset":1511},"indent":[3]}}],"position":{"start":{"line":51,"column":1,"offset":1380},"end":{"line":52,"column":54,"offset":1511},"indent":[1]}}],"position":{"start":{"line":49,"column":1,"offset":1253},"end":{"line":52,"column":54,"offset":1511},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"When choosing which units of time to display via the ","position":{"start":{"line":54,"column":1,"offset":1513},"end":{"line":54,"column":54,"offset":1566},"indent":[]}},{"type":"inlineCode","value":"granularity","position":{"start":{"line":54,"column":54,"offset":1566},"end":{"line":54,"column":67,"offset":1579},"indent":[]}},{"type":"text","value":" property,\nconsider the time range that the countdown will start at, and the required level\nof urgency. For example, you may not want to display a 4-day countdown using\nonly seconds; and conversely, a 2-hour countdown would not be conducive to\nrendering with only days and hours.","position":{"start":{"line":54,"column":67,"offset":1579},"end":{"line":58,"column":36,"offset":1858},"indent":[1,1,1,1]}}],"position":{"start":{"line":54,"column":1,"offset":1513},"end":{"line":58,"column":36,"offset":1858},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Content guidelines","position":{"start":{"line":60,"column":4,"offset":1863},"end":{"line":60,"column":22,"offset":1881},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":1860},"end":{"line":60,"column":22,"offset":1881},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Countdown only displays numbers and the units of time that it represents. You\ncan choose to show or hide the units themselves, in which case the units are\nremoved and only the ","position":{"start":{"line":62,"column":1,"offset":1883},"end":{"line":64,"column":22,"offset":2059},"indent":[1,1]}},{"type":"inlineCode","value":":","position":{"start":{"line":64,"column":22,"offset":2059},"end":{"line":64,"column":25,"offset":2062},"indent":[]}},{"type":"text","value":" between digits remains.","position":{"start":{"line":64,"column":25,"offset":2062},"end":{"line":64,"column":49,"offset":2086},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":1883},"end":{"line":64,"column":49,"offset":2086},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Consider the context of the countdown and whether the user will have enough\ncontext to interpret appropriately without labeled units when making the\ndecision on whether to show or hide the units.","position":{"start":{"line":66,"column":1,"offset":2088},"end":{"line":68,"column":47,"offset":2283},"indent":[1,1]}}],"position":{"start":{"line":66,"column":1,"offset":2088},"end":{"line":68,"column":47,"offset":2283},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"onComplete","position":{"start":{"line":70,"column":4,"offset":2288},"end":{"line":70,"column":14,"offset":2298},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":2285},"end":{"line":70,"column":14,"offset":2298},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"onComplete","position":{"start":{"line":72,"column":1,"offset":2300},"end":{"line":72,"column":13,"offset":2312},"indent":[]}},{"type":"text","value":" is a callback that will fire once the countdown to the specified\ntime has been completed.","position":{"start":{"line":72,"column":13,"offset":2312},"end":{"line":73,"column":25,"offset":2402},"indent":[1]}}],"position":{"start":{"line":72,"column":1,"offset":2300},"end":{"line":73,"column":25,"offset":2402},"indent":[1]}},{"type":"export","value":"export function OnCompleteExample() {\n  const [start, setStart] = useState(false);\n  const inTenSeconds = new Date(new Date().getTime() + 10 * 1000);\n  return (\n    <>\n      <Button label={\"Start Timer\"} onClick={() => setStart(true)} />\n      {start && (\n        <Heading variation={\"highlight\"}>\n          <Countdown\n            date={inTenSeconds}\n            granularity={\"s\"}\n            showUnits={true}\n            onComplete={() => alert(\"Completed Timer!\")}\n          />\n        </Heading>\n      )}\n    </>\n  );\n}","position":{"start":{"line":75,"column":1,"offset":2404},"end":{"line":93,"column":2,"offset":2926},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<Canvas withSource=\"none\">\n  <OnCompleteExample />\n</Canvas>","position":{"start":{"line":95,"column":1,"offset":2928},"end":{"line":97,"column":10,"offset":2988},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Styling","position":{"start":{"line":99,"column":4,"offset":2993},"end":{"line":99,"column":11,"offset":3000},"indent":[]}}],"position":{"start":{"line":99,"column":1,"offset":2990},"end":{"line":99,"column":11,"offset":3000},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Countdown is un-opinionated about its' styling. You can wrap a Countdown in\n","position":{"start":{"line":101,"column":1,"offset":3002},"end":{"line":102,"column":1,"offset":3078},"indent":[1]}},{"type":"link","title":null,"url":"/packages-components-src-heading-heading","children":[{"type":"text","value":"Heading","position":{"start":{"line":102,"column":2,"offset":3079},"end":{"line":102,"column":9,"offset":3086},"indent":[]}}],"position":{"start":{"line":102,"column":1,"offset":3078},"end":{"line":102,"column":52,"offset":3129},"indent":[]}},{"type":"text","value":" or\n","position":{"start":{"line":102,"column":52,"offset":3129},"end":{"line":103,"column":1,"offset":3133},"indent":[1]}},{"type":"link","title":null,"url":"/packages-components-src-text-text","children":[{"type":"text","value":"Text","position":{"start":{"line":103,"column":2,"offset":3134},"end":{"line":103,"column":6,"offset":3138},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":3133},"end":{"line":103,"column":43,"offset":3175},"indent":[]}},{"type":"text","value":" to achieve the desired typographic\ntreatment for your use case.","position":{"start":{"line":103,"column":43,"offset":3175},"end":{"line":104,"column":29,"offset":3239},"indent":[1]}}],"position":{"start":{"line":101,"column":1,"offset":3002},"end":{"line":104,"column":29,"offset":3239},"indent":[1,1,1]}},{"type":"jsx","value":"<Canvas>\n  <Content>\n    <Text>\n      <Countdown\n        date={new Date(new Date().getTime() + 36000 * 1000)}\n        granularity={\"ms\"}\n        showUnits={true}\n      />\n    </Text>\n    <div />\n    <Heading level={1}>\n      <Emphasis variation=\"highlight\">\n        <Countdown\n          date={new Date(new Date().getTime() + 36000 * 1000)}\n          granularity={\"s\"}\n          showUnits={true}\n        />\n      </Emphasis>\n    </Heading>\n  </Content>\n</Canvas>","position":{"start":{"line":106,"column":1,"offset":3241},"end":{"line":126,"column":10,"offset":3702},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Related components","position":{"start":{"line":128,"column":4,"offset":3707},"end":{"line":128,"column":22,"offset":3725},"indent":[]}}],"position":{"start":{"line":128,"column":1,"offset":3704},"end":{"line":128,"column":22,"offset":3725},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"To display a unit of time that has already passed, use\n","position":{"start":{"line":130,"column":3,"offset":3729},"end":{"line":131,"column":3,"offset":3786},"indent":[3]}},{"type":"link","title":null,"url":"/components/format-relative-date-time","children":[{"type":"text","value":"FormatRelativeDateTime","position":{"start":{"line":131,"column":4,"offset":3787},"end":{"line":131,"column":26,"offset":3809},"indent":[]}}],"position":{"start":{"line":131,"column":3,"offset":3786},"end":{"line":131,"column":66,"offset":3849},"indent":[]}}],"position":{"start":{"line":130,"column":3,"offset":3729},"end":{"line":131,"column":66,"offset":3849},"indent":[3]}}],"position":{"start":{"line":130,"column":1,"offset":3727},"end":{"line":131,"column":66,"offset":3849},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"To display time as a static unit, use ","position":{"start":{"line":132,"column":3,"offset":3852},"end":{"line":132,"column":41,"offset":3890},"indent":[]}},{"type":"link","title":null,"url":"/components/time-formatter","children":[{"type":"text","value":"FormatTime","position":{"start":{"line":132,"column":42,"offset":3891},"end":{"line":132,"column":52,"offset":3901},"indent":[]}}],"position":{"start":{"line":132,"column":41,"offset":3890},"end":{"line":132,"column":81,"offset":3930},"indent":[]}}],"position":{"start":{"line":132,"column":3,"offset":3852},"end":{"line":132,"column":81,"offset":3930},"indent":[]}}],"position":{"start":{"line":132,"column":1,"offset":3850},"end":{"line":132,"column":81,"offset":3930},"indent":[]}}],"position":{"start":{"line":130,"column":1,"offset":3727},"end":{"line":132,"column":81,"offset":3930},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":135,"column":1,"offset":3933},"end":{"line":135,"column":31,"offset":3963},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":135,"column":31,"offset":3963}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { ArgsTable, Canvas, Meta, Story } from \"@storybook/addon-docs\";\nimport { useState } from \"react\";\nimport { Heading } from \"@jobber/components/Heading\";\nimport { Content } from \"@jobber/components/Content\";\nimport { Emphasis } from \"@jobber/components/Emphasis\";\nimport { Text } from \"@jobber/components/Text\";\nimport { Button } from \"@jobber/components/Button\";\nimport { Countdown } from \".\";\nexport function OnCompleteExample() {\n  const [start, setStart] = useState(false);\n  const inTenSeconds = new Date(new Date().getTime() + 10 * 1000);\n  return <>\n      <Button label={\"Start Timer\"} onClick={() => setStart(true)} mdxType=\"Button\" />\n      {start && <Heading variation={\"highlight\"} mdxType=\"Heading\">\n          <Countdown date={inTenSeconds} granularity={\"s\"} showUnits={true} onComplete={() => alert(\"Completed Timer!\")} mdxType=\"Countdown\" />\n        </Heading>}\n    </>;\n}\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  OnCompleteExample,\n_frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Meta title=\"Components/Countdown\" component={Countdown} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"countdown\"\n    }}>{`Countdown`}</h1>\n    <p>{`Countdown is used to ensure that a \"countdown\" to a specified end time is\ndisplayed in a consistent format. No text styling is applied to Countdown; it is\nonly concerned with the text content that will be presented.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { Countdown } from \"@jobber/components/Countdown\";\n`}</code></pre>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"Countdown\" args={{\n        date: new Date(new Date().getTime() + 25 * 3600 * 1000),\n        granularity: \"dhms\",\n        showUnits: true\n      }} mdxType=\"Story\">\n    {args => <Countdown {...args} mdxType=\"Countdown\" />}\n  </Story>\n    </Canvas>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <ArgsTable of={Countdown} story=\"Countdown\" mdxType=\"ArgsTable\" />\n    <h2 {...{\n      \"id\": \"design--usage-guidelines\"\n    }}>{`Design & usage guidelines`}</h2>\n    <p>{`Use Countdown when:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`There is a need to make a deadline, such as time left to update important\ndetails about your account, apparent to the user`}</li>\n      <li parentName=\"ul\">{`There is a desire to convey urgency to the user for conversion optimization\npurposes, such as in a time-bound promotional offer`}</li>\n    </ul>\n    <p>{`When choosing which units of time to display via the `}<inlineCode parentName=\"p\">{`granularity`}</inlineCode>{` property,\nconsider the time range that the countdown will start at, and the required level\nof urgency. For example, you may not want to display a 4-day countdown using\nonly seconds; and conversely, a 2-hour countdown would not be conducive to\nrendering with only days and hours.`}</p>\n    <h2 {...{\n      \"id\": \"content-guidelines\"\n    }}>{`Content guidelines`}</h2>\n    <p>{`Countdown only displays numbers and the units of time that it represents. You\ncan choose to show or hide the units themselves, in which case the units are\nremoved and only the `}<inlineCode parentName=\"p\">{`:`}</inlineCode>{` between digits remains.`}</p>\n    <p>{`Consider the context of the countdown and whether the user will have enough\ncontext to interpret appropriately without labeled units when making the\ndecision on whether to show or hide the units.`}</p>\n    <h2 {...{\n      \"id\": \"oncomplete\"\n    }}>{`onComplete`}</h2>\n    <p><inlineCode parentName=\"p\">{`onComplete`}</inlineCode>{` is a callback that will fire once the countdown to the specified\ntime has been completed.`}</p>\n\n    <Canvas withSource=\"none\" mdxType=\"Canvas\">\n  <OnCompleteExample mdxType=\"OnCompleteExample\" />\n    </Canvas>\n    <h2 {...{\n      \"id\": \"styling\"\n    }}>{`Styling`}</h2>\n    <p>{`Countdown is un-opinionated about its' styling. You can wrap a Countdown in\n`}<a parentName=\"p\" {...{\n        \"href\": \"/packages-components-src-heading-heading\"\n      }}>{`Heading`}</a>{` or\n`}<a parentName=\"p\" {...{\n        \"href\": \"/packages-components-src-text-text\"\n      }}>{`Text`}</a>{` to achieve the desired typographic\ntreatment for your use case.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <Content mdxType=\"Content\">\n    <Text mdxType=\"Text\">\n      <Countdown date={new Date(new Date().getTime() + 36000 * 1000)} granularity={\"ms\"} showUnits={true} mdxType=\"Countdown\" />\n    </Text>\n    <div />\n    <Heading level={1} mdxType=\"Heading\">\n      <Emphasis variation=\"highlight\" mdxType=\"Emphasis\">\n        <Countdown date={new Date(new Date().getTime() + 36000 * 1000)} granularity={\"s\"} showUnits={true} mdxType=\"Countdown\" />\n      </Emphasis>\n    </Heading>\n  </Content>\n    </Canvas>\n    <h2 {...{\n      \"id\": \"related-components\"\n    }}>{`Related components`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`To display a unit of time that has already passed, use\n`}<a parentName=\"li\" {...{\n          \"href\": \"/components/format-relative-date-time\"\n        }}>{`FormatRelativeDateTime`}</a></li>\n      <li parentName=\"ul\">{`To display time as a static unit, use `}<a parentName=\"li\" {...{\n          \"href\": \"/components/time-formatter\"\n        }}>{`FormatTime`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}
{"expireTime":9007200931831372000,"key":"gatsby-plugin-mdx-entire-payload-c775924d56398439a5030207f057d84e-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":114,"offset":115},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":117},"end":{"line":5,"column":29,"offset":145},"indent":[]}},{"type":"import","value":"import { Playground } from \"docz\";\nimport { useState } from \"react\";\nimport { useResizeObserver, Breakpoints } from \"./useResizeObserver\";\nimport { Text } from \"@jobber/components/Text\";\nimport { Card } from \"@jobber/components/Card\";\nimport { Content } from \"@jobber/components/Content\";","position":{"start":{"line":8,"column":1,"offset":148},"end":{"line":13,"column":54,"offset":436},"indent":[1,1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"useResizeObserver","position":{"start":{"line":15,"column":3,"offset":440},"end":{"line":15,"column":20,"offset":457},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":438},"end":{"line":15,"column":20,"offset":457},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"useResizeObserver","position":{"start":{"line":17,"column":1,"offset":459},"end":{"line":17,"column":20,"offset":478},"indent":[]}},{"type":"text","value":" is a hook that will allow for responsive styling of\ncomponents based on their size, instead of the browser size.","position":{"start":{"line":17,"column":20,"offset":478},"end":{"line":18,"column":61,"offset":591},"indent":[1]}}],"position":{"start":{"line":17,"column":1,"offset":459},"end":{"line":18,"column":61,"offset":591},"indent":[1]}},{"type":"code","lang":"tsx","meta":null,"value":"import { useResizeObserver } from \"@jobber/hooks\";","position":{"start":{"line":20,"column":1,"offset":593},"end":{"line":22,"column":4,"offset":654},"indent":[1,1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const [ref, { width, exactWidth, exactHeight, height }] =\n      useResizeObserver();\n    return (\n      <div ref={ref}>\n        <Card title={`Check out my àçƈéñŦ`} accent={getAccent()}>\n          <Content>\n            <Text>Width Step: {width}</Text>\n            <Text>Height Step: {height}</Text>\n            <Text>Exact Width: {exactWidth}</Text>\n            <Text>Exact Height: {exactHeight}</Text>\n          </Content>\n        </Card>\n      </div>\n    );\n    function getAccent() {\n      if (exactWidth < Breakpoints.smaller) return \"red\";\n      if (width < Breakpoints.small) return \"orange\";\n      if (width < Breakpoints.base) return \"yellow\";\n      if (width < Breakpoints.large) return \"green\";\n      if (width < Breakpoints.larger) return \"lightBlue\";\n      return \"purple\";\n    }\n  }}\n</Playground>","position":{"start":{"line":24,"column":1,"offset":656},"end":{"line":49,"column":14,"offset":1493},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Typing","position":{"start":{"line":51,"column":4,"offset":1498},"end":{"line":51,"column":10,"offset":1504},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":1495},"end":{"line":51,"column":10,"offset":1504},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When using ","position":{"start":{"line":53,"column":1,"offset":1506},"end":{"line":53,"column":12,"offset":1517},"indent":[]}},{"type":"inlineCode","value":"useResizeObserver","position":{"start":{"line":53,"column":12,"offset":1517},"end":{"line":53,"column":31,"offset":1536},"indent":[]}},{"type":"text","value":" in a component, you will need to pass it a type\nto represent the ","position":{"start":{"line":53,"column":31,"offset":1536},"end":{"line":54,"column":18,"offset":1602},"indent":[1]}},{"type":"inlineCode","value":"ref","position":{"start":{"line":54,"column":18,"offset":1602},"end":{"line":54,"column":23,"offset":1607},"indent":[]}},{"type":"text","value":". In the example below, we pass it the type of\n","position":{"start":{"line":54,"column":23,"offset":1607},"end":{"line":55,"column":1,"offset":1654},"indent":[1]}},{"type":"inlineCode","value":"HTMLDivElement","position":{"start":{"line":55,"column":1,"offset":1654},"end":{"line":55,"column":17,"offset":1670},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":55,"column":17,"offset":1670},"end":{"line":55,"column":18,"offset":1671},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":1506},"end":{"line":55,"column":18,"offset":1671},"indent":[1,1]}},{"type":"code","lang":"tsx","meta":null,"value":"const [ref, { width, height }] = useResizeObserver<HTMLDivElement>();\nreturn <div ref={ref}>...</div>;","position":{"start":{"line":57,"column":1,"offset":1673},"end":{"line":60,"column":4,"offset":1786},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Breakpoints","position":{"start":{"line":62,"column":4,"offset":1791},"end":{"line":62,"column":15,"offset":1802},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":1788},"end":{"line":62,"column":15,"offset":1802},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"useResizeObserver","position":{"start":{"line":64,"column":1,"offset":1804},"end":{"line":64,"column":20,"offset":1823},"indent":[]}},{"type":"text","value":" exports an object of ","position":{"start":{"line":64,"column":20,"offset":1823},"end":{"line":64,"column":42,"offset":1845},"indent":[]}},{"type":"inlineCode","value":"Breakpoints","position":{"start":{"line":64,"column":42,"offset":1845},"end":{"line":64,"column":55,"offset":1858},"indent":[]}},{"type":"text","value":". This can be used for\nhigh level components such as ","position":{"start":{"line":64,"column":55,"offset":1858},"end":{"line":65,"column":31,"offset":1911},"indent":[1]}},{"type":"inlineCode","value":"Page","position":{"start":{"line":65,"column":31,"offset":1911},"end":{"line":65,"column":37,"offset":1917},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":1804},"end":{"line":65,"column":37,"offset":1917},"indent":[1]}},{"type":"code","lang":"tsx","meta":null,"value":"import { Breakpoints } from \"@jobber/hooks\";","position":{"start":{"line":67,"column":1,"offset":1919},"end":{"line":69,"column":4,"offset":1974},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"The ","position":{"start":{"line":71,"column":5,"offset":1980},"end":{"line":71,"column":9,"offset":1984},"indent":[]}},{"type":"inlineCode","value":"Breakpoints","position":{"start":{"line":71,"column":9,"offset":1984},"end":{"line":71,"column":22,"offset":1997},"indent":[]}},{"type":"text","value":" object:","position":{"start":{"line":71,"column":22,"offset":1997},"end":{"line":71,"column":30,"offset":2005},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":1976},"end":{"line":71,"column":30,"offset":2005},"indent":[]}},{"type":"export","value":"export function Sizes() {\n  return <code>{JSON.stringify(Breakpoints)}</code>;\n}","position":{"start":{"line":73,"column":1,"offset":2007},"end":{"line":75,"column":2,"offset":2087},"indent":[1,1]}},{"type":"jsx","value":"<Sizes />","position":{"start":{"line":77,"column":1,"offset":2089},"end":{"line":77,"column":10,"offset":2098},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Custom Sizes","position":{"start":{"line":79,"column":4,"offset":2103},"end":{"line":79,"column":16,"offset":2115},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":2100},"end":{"line":79,"column":16,"offset":2115},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"useResizeObserver","position":{"start":{"line":81,"column":1,"offset":2117},"end":{"line":81,"column":20,"offset":2136},"indent":[]}},{"type":"text","value":" can take a custom ","position":{"start":{"line":81,"column":20,"offset":2136},"end":{"line":81,"column":39,"offset":2155},"indent":[]}},{"type":"inlineCode","value":"widths","position":{"start":{"line":81,"column":39,"offset":2155},"end":{"line":81,"column":47,"offset":2163},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":81,"column":47,"offset":2163},"end":{"line":81,"column":51,"offset":2167},"indent":[]}},{"type":"inlineCode","value":"heights","position":{"start":{"line":81,"column":51,"offset":2167},"end":{"line":81,"column":60,"offset":2176},"indent":[]}},{"type":"text","value":" object if you do not\nwant to use ","position":{"start":{"line":81,"column":60,"offset":2176},"end":{"line":82,"column":13,"offset":2210},"indent":[1]}},{"type":"inlineCode","value":"Breakpoints","position":{"start":{"line":82,"column":13,"offset":2210},"end":{"line":82,"column":26,"offset":2223},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":82,"column":26,"offset":2223},"end":{"line":82,"column":27,"offset":2224},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":2117},"end":{"line":82,"column":27,"offset":2224},"indent":[1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const customWidths = {\n      small: 480,\n      medium: 640,\n      large: 768,\n    };\n    const [ref, { width, exactWidth }] = useResizeObserver({\n      widths: customWidths,\n    });\n    return (\n      <div ref={ref}>\n        <Card title={`Width: ${getCurrentWidth()}`} accent={getAccent()}>\n          <Content>\n            <Text>Width Step: {width}</Text>\n            <Text>Exact Width: {exactWidth}</Text>\n          </Content>\n        </Card>\n      </div>\n    );\n    function getAccent() {\n      if (width < customWidths.medium) return \"red\";\n      if (width < customWidths.large) return \"green\";\n      return \"indigo\";\n    }\n    function getCurrentWidth() {\n      return Object.keys(customWidths).find(key => customWidths[key] === width);\n    }\n  }}\n</Playground>","position":{"start":{"line":84,"column":1,"offset":2226},"end":{"line":113,"column":14,"offset":3019},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Testing with Jest","position":{"start":{"line":115,"column":4,"offset":3024},"end":{"line":115,"column":21,"offset":3041},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":3021},"end":{"line":115,"column":21,"offset":3041},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Use ","position":{"start":{"line":117,"column":1,"offset":3043},"end":{"line":117,"column":5,"offset":3047},"indent":[]}},{"type":"inlineCode","value":"jest.mock","position":{"start":{"line":117,"column":5,"offset":3047},"end":{"line":117,"column":16,"offset":3058},"indent":[]}},{"type":"text","value":" to set your desired window attributes.","position":{"start":{"line":117,"column":16,"offset":3058},"end":{"line":117,"column":55,"offset":3097},"indent":[]}}],"position":{"start":{"line":117,"column":1,"offset":3043},"end":{"line":117,"column":55,"offset":3097},"indent":[]}},{"type":"code","lang":"tsx","meta":null,"value":"jest.mock(\"@jobber/hooks\", () => {\n  return {\n    useResizeObserver: () => [\n      { current: undefined },\n      { width: 1000, height: 100 },\n    ],\n    Breakpoints: {\n      base: 640,\n      small: 500,\n      smaller: 265,\n      large: 750,\n      larger: 1024,\n    },\n  };\n});","position":{"start":{"line":119,"column":1,"offset":3099},"end":{"line":135,"column":4,"offset":3387},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":138,"column":1,"offset":3390},"end":{"line":138,"column":31,"offset":3420},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":138,"column":31,"offset":3420}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { Playground } from \"docz\";\nimport { useState } from \"react\";\nimport { useResizeObserver, Breakpoints } from \"./useResizeObserver\";\nimport { Text } from \"@jobber/components/Text\";\nimport { Card } from \"@jobber/components/Card\";\nimport { Content } from \"@jobber/components/Content\";\nexport function Sizes() {\n  return <code>{JSON.stringify(Breakpoints)}</code>;\n}\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  Sizes,\n_frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"useresizeobserver\"\n    }}>{`useResizeObserver`}</h1>\n    <p><inlineCode parentName=\"p\">{`useResizeObserver`}</inlineCode>{` is a hook that will allow for responsive styling of\ncomponents based on their size, instead of the browser size.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { useResizeObserver } from \"@jobber/hooks\";\n`}</code></pre>\n    <Playground __position={0} __code={'() => {\\n  const [\\n    ref,\\n    { width, exactWidth, exactHeight, height },\\n  ] = useResizeObserver()\\n  return (\\n    <div ref={ref}>\\n      <Card title={`Check out my àçƈéñŦ`} accent={getAccent()}>\\n        <Content>\\n          <Text>Width Step: {width}</Text>\\n          <Text>Height Step: {height}</Text>\\n          <Text>Exact Width: {exactWidth}</Text>\\n          <Text>Exact Height: {exactHeight}</Text>\\n        </Content>\\n      </Card>\\n    </div>\\n  )\\n  function getAccent() {\\n    if (exactWidth < Breakpoints.smaller) return \\'red\\'\\n    if (width < Breakpoints.small) return \\'orange\\'\\n    if (width < Breakpoints.base) return \\'yellow\\'\\n    if (width < Breakpoints.large) return \\'green\\'\\n    if (width < Breakpoints.larger) return \\'lightBlue\\'\\n    return \\'purple\\'\\n  }\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useState,\n      useResizeObserver,\n      Breakpoints,\n      Text,\n      Card,\n      Content,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [ref, {\n          width,\n          exactWidth,\n          exactHeight,\n          height\n        }] = useResizeObserver();\n        return <div ref={ref}>\n        <Card title={`Check out my àçƈéñŦ`} accent={getAccent()} mdxType=\"Card\">\n          <Content mdxType=\"Content\">\n            <Text mdxType=\"Text\">Width Step: {width}</Text>\n            <Text mdxType=\"Text\">Height Step: {height}</Text>\n            <Text mdxType=\"Text\">Exact Width: {exactWidth}</Text>\n            <Text mdxType=\"Text\">Exact Height: {exactHeight}</Text>\n          </Content>\n        </Card>\n      </div>;\n\n        function getAccent() {\n          if (exactWidth < Breakpoints.smaller) return \"red\";\n          if (width < Breakpoints.small) return \"orange\";\n          if (width < Breakpoints.base) return \"yellow\";\n          if (width < Breakpoints.large) return \"green\";\n          if (width < Breakpoints.larger) return \"lightBlue\";\n          return \"purple\";\n        }\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"typing\"\n    }}>{`Typing`}</h2>\n    <p>{`When using `}<inlineCode parentName=\"p\">{`useResizeObserver`}</inlineCode>{` in a component, you will need to pass it a type\nto represent the `}<inlineCode parentName=\"p\">{`ref`}</inlineCode>{`. In the example below, we pass it the type of\n`}<inlineCode parentName=\"p\">{`HTMLDivElement`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const [ref, { width, height }] = useResizeObserver<HTMLDivElement>();\nreturn <div ref={ref}>...</div>;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"breakpoints\"\n    }}>{`Breakpoints`}</h2>\n    <p><inlineCode parentName=\"p\">{`useResizeObserver`}</inlineCode>{` exports an object of `}<inlineCode parentName=\"p\">{`Breakpoints`}</inlineCode>{`. This can be used for\nhigh level components such as `}<inlineCode parentName=\"p\">{`Page`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { Breakpoints } from \"@jobber/hooks\";\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"the-breakpoints-object\"\n    }}>{`The `}<inlineCode parentName=\"h3\">{`Breakpoints`}</inlineCode>{` object:`}</h3>\n\n    <Sizes mdxType=\"Sizes\" />\n    <h2 {...{\n      \"id\": \"custom-sizes\"\n    }}>{`Custom Sizes`}</h2>\n    <p><inlineCode parentName=\"p\">{`useResizeObserver`}</inlineCode>{` can take a custom `}<inlineCode parentName=\"p\">{`widths`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`heights`}</inlineCode>{` object if you do not\nwant to use `}<inlineCode parentName=\"p\">{`Breakpoints`}</inlineCode>{`.`}</p>\n    <Playground __position={2} __code={'() => {\\n  const customWidths = {\\n    small: 480,\\n    medium: 640,\\n    large: 768,\\n  }\\n  const [ref, { width, exactWidth }] = useResizeObserver({\\n    widths: customWidths,\\n  })\\n  return (\\n    <div ref={ref}>\\n      <Card title={`Width: ${getCurrentWidth()}`} accent={getAccent()}>\\n        <Content>\\n          <Text>Width Step: {width}</Text>\\n          <Text>Exact Width: {exactWidth}</Text>\\n        </Content>\\n      </Card>\\n    </div>\\n  )\\n  function getAccent() {\\n    if (width < customWidths.medium) return \\'red\\'\\n    if (width < customWidths.large) return \\'green\\'\\n    return \\'indigo\\'\\n  }\\n  function getCurrentWidth() {\\n    return Object.keys(customWidths).find(key => customWidths[key] === width)\\n  }\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useState,\n      useResizeObserver,\n      Breakpoints,\n      Text,\n      Card,\n      Content,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const customWidths = {\n          small: 480,\n          medium: 640,\n          large: 768\n        };\n        const [ref, {\n          width,\n          exactWidth\n        }] = useResizeObserver({\n          widths: customWidths\n        });\n        return <div ref={ref}>\n        <Card title={`Width: ${getCurrentWidth()}`} accent={getAccent()} mdxType=\"Card\">\n          <Content mdxType=\"Content\">\n            <Text mdxType=\"Text\">Width Step: {width}</Text>\n            <Text mdxType=\"Text\">Exact Width: {exactWidth}</Text>\n          </Content>\n        </Card>\n      </div>;\n\n        function getAccent() {\n          if (width < customWidths.medium) return \"red\";\n          if (width < customWidths.large) return \"green\";\n          return \"indigo\";\n        }\n\n        function getCurrentWidth() {\n          return Object.keys(customWidths).find(key => customWidths[key] === width);\n        }\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"testing-with-jest\"\n    }}>{`Testing with Jest`}</h2>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`jest.mock`}</inlineCode>{` to set your desired window attributes.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`jest.mock(\"@jobber/hooks\", () => {\n  return {\n    useResizeObserver: () => [\n      { current: undefined },\n      { width: 1000, height: 100 },\n    ],\n    Breakpoints: {\n      base: 640,\n      small: 500,\n      smaller: 265,\n      large: 750,\n      larger: 1024,\n    },\n  };\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}
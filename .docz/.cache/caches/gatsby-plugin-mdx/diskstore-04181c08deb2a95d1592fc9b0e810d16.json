{"expireTime":9007200931831330000,"key":"gatsby-plugin-mdx-entire-payload-80e5a55279c73454200036c9cf60fd3b-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":114,"offset":115},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":117},"end":{"line":5,"column":29,"offset":145},"indent":[]}},{"type":"import","value":"import { Playground, Props } from \"docz\";\nimport { ComponentStatus } from \"@jobber/docx\";\nimport { InputTime } from \".\";\nimport { Button } from \"../Button\";\nimport { Content } from \"../Content\";\nimport { useState } from \"react\";\nimport { CivilTime } from \"@std-proposal/temporal\";","position":{"start":{"line":8,"column":1,"offset":148},"end":{"line":14,"column":52,"offset":428},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"InputTime","position":{"start":{"line":16,"column":3,"offset":432},"end":{"line":16,"column":12,"offset":441},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":430},"end":{"line":16,"column":12,"offset":441},"indent":[]}},{"type":"jsx","value":"<ComponentStatus stage=\"ready\" responsive=\"yes\" accessible=\"yes\" />","position":{"start":{"line":18,"column":1,"offset":443},"end":{"line":18,"column":68,"offset":510},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Select a time of day. For example the time a messages should be sent or when a\njob started/ended.","position":{"start":{"line":20,"column":1,"offset":512},"end":{"line":21,"column":19,"offset":609},"indent":[1]}}],"position":{"start":{"line":20,"column":1,"offset":512},"end":{"line":21,"column":19,"offset":609},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"This component obeys the system locale settings to determine 24 or 12 hour time.","position":{"start":{"line":23,"column":1,"offset":611},"end":{"line":23,"column":81,"offset":691},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":611},"end":{"line":23,"column":81,"offset":691},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"import { InputTime } \"@jobber/components/InputTime\";","position":{"start":{"line":25,"column":1,"offset":693},"end":{"line":27,"column":4,"offset":755},"indent":[1,1]}},{"type":"jsx","value":"<Playground>\n  <InputTime defaultValue={new CivilTime(2, 35)} />\n</Playground>","position":{"start":{"line":29,"column":1,"offset":757},"end":{"line":31,"column":14,"offset":835},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Props","position":{"start":{"line":33,"column":4,"offset":840},"end":{"line":33,"column":9,"offset":845},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":837},"end":{"line":33,"column":9,"offset":845},"indent":[]}},{"type":"jsx","value":"<Props of={InputTime} />","position":{"start":{"line":35,"column":1,"offset":847},"end":{"line":35,"column":25,"offset":871},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":37,"column":1,"offset":873},"end":{"line":37,"column":4,"offset":876},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"States","position":{"start":{"line":39,"column":4,"offset":881},"end":{"line":39,"column":10,"offset":887},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":878},"end":{"line":39,"column":10,"offset":887},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Disabled","position":{"start":{"line":41,"column":5,"offset":893},"end":{"line":41,"column":13,"offset":901},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":889},"end":{"line":41,"column":13,"offset":901},"indent":[]}},{"type":"jsx","value":"<Playground>\n  <InputTime defaultValue={new CivilTime(3, 52)} disabled={true} />\n</Playground>","position":{"start":{"line":43,"column":1,"offset":903},"end":{"line":45,"column":14,"offset":997},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Read-only","position":{"start":{"line":47,"column":5,"offset":1003},"end":{"line":47,"column":14,"offset":1012},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":999},"end":{"line":47,"column":14,"offset":1012},"indent":[]}},{"type":"jsx","value":"<Playground>\n  <InputTime defaultValue={new CivilTime(5, 23)} readonly={true} />\n</Playground>","position":{"start":{"line":49,"column":1,"offset":1014},"end":{"line":51,"column":14,"offset":1108},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Invalid","position":{"start":{"line":53,"column":5,"offset":1114},"end":{"line":53,"column":12,"offset":1121},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":1110},"end":{"line":53,"column":12,"offset":1121},"indent":[]}},{"type":"jsx","value":"<Playground>\n  <InputTime defaultValue={new CivilTime(2, 35)} invalid={true} />\n</Playground>","position":{"start":{"line":55,"column":1,"offset":1123},"end":{"line":57,"column":14,"offset":1216},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Events","position":{"start":{"line":59,"column":4,"offset":1221},"end":{"line":59,"column":10,"offset":1227},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":1218},"end":{"line":59,"column":10,"offset":1227},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If the input starts empty the ","position":{"start":{"line":61,"column":1,"offset":1229},"end":{"line":61,"column":31,"offset":1259},"indent":[]}},{"type":"inlineCode","value":"ChangeEvent","position":{"start":{"line":61,"column":31,"offset":1259},"end":{"line":61,"column":44,"offset":1272},"indent":[]}},{"type":"text","value":" isn't fired until a full time is\nset. Setting just the hour or minute or ","position":{"start":{"line":61,"column":44,"offset":1272},"end":{"line":62,"column":41,"offset":1346},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"period","position":{"start":{"line":62,"column":42,"offset":1347},"end":{"line":62,"column":48,"offset":1353},"indent":[]}}],"position":{"start":{"line":62,"column":41,"offset":1346},"end":{"line":62,"column":49,"offset":1354},"indent":[]}},{"type":"text","value":" (AM/PM) won't fire the event.\nWhen the last element is set the change event will fire.","position":{"start":{"line":62,"column":49,"offset":1354},"end":{"line":63,"column":57,"offset":1441},"indent":[1]}}],"position":{"start":{"line":61,"column":1,"offset":1229},"end":{"line":63,"column":57,"offset":1441},"indent":[1,1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const [time, setTime] = useState(new CivilTime(3, 52));\n    const resetTime = () => {\n      setTime(new CivilTime(3, 52));\n    };\n    const handleChange = newTime => {\n      setTime(newTime);\n    };\n    return (\n      <Content>\n        <InputTime value={time} onChange={handleChange} />\n        <pre>{time && time.toString()}</pre>\n        <Button label=\"Reset\" onClick={resetTime} />\n      </Content>\n    );\n  }}\n</Playground>","position":{"start":{"line":65,"column":1,"offset":1443},"end":{"line":82,"column":14,"offset":1898},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":85,"column":1,"offset":1901},"end":{"line":85,"column":31,"offset":1931},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":85,"column":31,"offset":1931}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { Playground, Props } from \"docz\";\nimport { ComponentStatus } from \"@jobber/docx\";\nimport { InputTime } from \".\";\nimport { Button } from \"../Button\";\nimport { Content } from \"../Content\";\nimport { useState } from \"react\";\nimport { CivilTime } from \"@std-proposal/temporal\";\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"inputtime\"\n    }}>{`InputTime`}</h1>\n    <ComponentStatus stage=\"ready\" responsive=\"yes\" accessible=\"yes\" mdxType=\"ComponentStatus\" />\n    <p>{`Select a time of day. For example the time a messages should be sent or when a\njob started/ended.`}</p>\n    <p>{`This component obeys the system locale settings to determine 24 or 12 hour time.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { InputTime } \"@jobber/components/InputTime\";\n`}</code></pre>\n    <Playground __position={1} __code={'<InputTime defaultValue={new CivilTime(2, 35)} />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      InputTime,\n      Button,\n      Content,\n      useState,\n      CivilTime,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <InputTime defaultValue={new CivilTime(2, 35)} mdxType=\"InputTime\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={InputTime} mdxType=\"Props\" />\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"states\"\n    }}>{`States`}</h2>\n    <h3 {...{\n      \"id\": \"disabled\"\n    }}>{`Disabled`}</h3>\n    <Playground __position={3} __code={'<InputTime defaultValue={new CivilTime(3, 52)} disabled={true} />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      InputTime,\n      Button,\n      Content,\n      useState,\n      CivilTime,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <InputTime defaultValue={new CivilTime(3, 52)} disabled={true} mdxType=\"InputTime\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"read-only\"\n    }}>{`Read-only`}</h3>\n    <Playground __position={4} __code={'<InputTime defaultValue={new CivilTime(5, 23)} readonly={true} />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      InputTime,\n      Button,\n      Content,\n      useState,\n      CivilTime,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <InputTime defaultValue={new CivilTime(5, 23)} readonly={true} mdxType=\"InputTime\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"invalid\"\n    }}>{`Invalid`}</h3>\n    <Playground __position={5} __code={'<InputTime defaultValue={new CivilTime(2, 35)} invalid={true} />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      InputTime,\n      Button,\n      Content,\n      useState,\n      CivilTime,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <InputTime defaultValue={new CivilTime(2, 35)} invalid={true} mdxType=\"InputTime\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"events\"\n    }}>{`Events`}</h2>\n    <p>{`If the input starts empty the `}<inlineCode parentName=\"p\">{`ChangeEvent`}</inlineCode>{` isn't fired until a full time is\nset. Setting just the hour or minute or `}<em parentName=\"p\">{`period`}</em>{` (AM/PM) won't fire the event.\nWhen the last element is set the change event will fire.`}</p>\n    <Playground __position={6} __code={'() => {\\n  const [time, setTime] = useState(new CivilTime(3, 52))\\n  const resetTime = () => {\\n    setTime(new CivilTime(3, 52))\\n  }\\n  const handleChange = newTime => {\\n    setTime(newTime)\\n  }\\n  return (\\n    <Content>\\n      <InputTime value={time} onChange={handleChange} />\\n      <pre>{time && time.toString()}</pre>\\n      <Button label=\\\"Reset\\\" onClick={resetTime} />\\n    </Content>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      InputTime,\n      Button,\n      Content,\n      useState,\n      CivilTime,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [time, setTime] = useState(new CivilTime(3, 52));\n\n        const resetTime = () => {\n          setTime(new CivilTime(3, 52));\n        };\n\n        const handleChange = newTime => {\n          setTime(newTime);\n        };\n\n        return <Content mdxType=\"Content\">\n        <InputTime value={time} onChange={handleChange} mdxType=\"InputTime\" />\n        <pre>{time && time.toString()}</pre>\n        <Button label=\"Reset\" onClick={resetTime} mdxType=\"Button\" />\n      </Content>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}
{"expireTime":9007200931831330000,"key":"gatsby-plugin-mdx-entire-payload-f3ee7320a3a02bd98ebea15d5d32f41d-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":114,"offset":115},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":117},"end":{"line":5,"column":29,"offset":145},"indent":[]}},{"type":"import","value":"import { Playground, Props } from \"docz\";\nimport { ComponentStatus } from \"@jobber/docx\";\nimport { useState } from \"react\";\nimport { v1 as uuidv1 } from \"uuid\";\nimport { InputFile, updateFiles } from \".\";\nimport { Content } from \"@jobber/components/Content\";\nimport { Heading } from \"@jobber/components/Heading\";\nimport { FormatFile } from \"@jobber/components/FormatFile\";\nimport { ProgressBar } from \"@jobber/components/ProgressBar\";","position":{"start":{"line":8,"column":1,"offset":148},"end":{"line":16,"column":62,"offset":582},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Input File","position":{"start":{"line":18,"column":3,"offset":586},"end":{"line":18,"column":13,"offset":596},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":584},"end":{"line":18,"column":13,"offset":596},"indent":[]}},{"type":"jsx","value":"<ComponentStatus stage=\"rc\" responsive=\"yes\" accessible=\"yes\" />","position":{"start":{"line":20,"column":1,"offset":598},"end":{"line":20,"column":65,"offset":662},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"InputFile","position":{"start":{"line":22,"column":1,"offset":664},"end":{"line":22,"column":12,"offset":675},"indent":[]}},{"type":"text","value":" allows users to upload a file, or multiple files by dragging and\ndropping them into an area on the page or by clicking a button.","position":{"start":{"line":22,"column":12,"offset":675},"end":{"line":23,"column":64,"offset":804},"indent":[1]}}],"position":{"start":{"line":22,"column":1,"offset":664},"end":{"line":23,"column":64,"offset":804},"indent":[1]}},{"type":"code","lang":"ts","meta":null,"value":"import { InputFile, updateFiles } from \"@jobber/components/InputFile\";","position":{"start":{"line":25,"column":1,"offset":806},"end":{"line":27,"column":4,"offset":886},"indent":[1,1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const [files, setFiles] = useState([]);\n    return (\n      <Content>\n        <InputFile\n          allowMultiple={true}\n          getUploadParams={() =>\n            Promise.resolve({ url: \"https://httpbin.org/post\" })\n          }\n          onUploadStart={handleUpload}\n          onUploadProgress={handleUpload}\n          onUploadComplete={handleUpload}\n        />\n        {files.map(file => (\n          <FormatFile file={file} />\n        ))}\n      </Content>\n    );\n    function handleUpload(file) {\n      setFiles(oldFiles => updateFiles(file, oldFiles));\n    }\n  }}\n</Playground>","position":{"start":{"line":29,"column":1,"offset":888},"end":{"line":52,"column":14,"offset":1496},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Design & usage guidelines","position":{"start":{"line":54,"column":4,"offset":1501},"end":{"line":54,"column":29,"offset":1526},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":1498},"end":{"line":54,"column":29,"offset":1526},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When contributing to, or consuming the ","position":{"start":{"line":56,"column":1,"offset":1528},"end":{"line":56,"column":40,"offset":1567},"indent":[]}},{"type":"inlineCode","value":"InputFile","position":{"start":{"line":56,"column":40,"offset":1567},"end":{"line":56,"column":51,"offset":1578},"indent":[]}},{"type":"text","value":" component, consider the\nfollowing:","position":{"start":{"line":56,"column":51,"offset":1578},"end":{"line":57,"column":11,"offset":1613},"indent":[1]}}],"position":{"start":{"line":56,"column":1,"offset":1528},"end":{"line":57,"column":11,"offset":1613},"indent":[1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Provide feedback once the file(s) have been dropped and uploading begins.","position":{"start":{"line":59,"column":3,"offset":1617},"end":{"line":59,"column":76,"offset":1690},"indent":[]}}],"position":{"start":{"line":59,"column":3,"offset":1617},"end":{"line":59,"column":76,"offset":1690},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":1615},"end":{"line":59,"column":76,"offset":1690},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":1615},"end":{"line":59,"column":76,"offset":1690},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Props","position":{"start":{"line":61,"column":4,"offset":1695},"end":{"line":61,"column":9,"offset":1700},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":1692},"end":{"line":61,"column":9,"offset":1700},"indent":[]}},{"type":"jsx","value":"<Props of={InputFile} />","position":{"start":{"line":63,"column":1,"offset":1702},"end":{"line":63,"column":25,"offset":1726},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"getUploadParams","position":{"start":{"line":65,"column":4,"offset":1731},"end":{"line":65,"column":19,"offset":1746},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":1728},"end":{"line":65,"column":19,"offset":1746},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"getUploadParams","position":{"start":{"line":67,"column":1,"offset":1748},"end":{"line":67,"column":18,"offset":1765},"indent":[]}},{"type":"text","value":" is a necessary callback that tells ","position":{"start":{"line":67,"column":18,"offset":1765},"end":{"line":67,"column":54,"offset":1801},"indent":[]}},{"type":"inlineCode","value":"InputFile","position":{"start":{"line":67,"column":54,"offset":1801},"end":{"line":67,"column":65,"offset":1812},"indent":[]}},{"type":"text","value":" where and how\nto upload files that are passed to it. It must return an object conforming to\nthe ","position":{"start":{"line":67,"column":65,"offset":1812},"end":{"line":69,"column":5,"offset":1909},"indent":[1,1]}},{"type":"inlineCode","value":"UploadParams","position":{"start":{"line":69,"column":5,"offset":1909},"end":{"line":69,"column":19,"offset":1923},"indent":[]}},{"type":"text","value":" interface. ","position":{"start":{"line":69,"column":19,"offset":1923},"end":{"line":69,"column":31,"offset":1935},"indent":[]}},{"type":"inlineCode","value":"getUploadParams","position":{"start":{"line":69,"column":31,"offset":1935},"end":{"line":69,"column":48,"offset":1952},"indent":[]}},{"type":"text","value":" can be async, allowing for a\nnetwork request to fetch any extra fields.","position":{"start":{"line":69,"column":48,"offset":1952},"end":{"line":70,"column":43,"offset":2024},"indent":[1]}}],"position":{"start":{"line":67,"column":1,"offset":1748},"end":{"line":70,"column":43,"offset":2024},"indent":[1,1,1]}},{"type":"code","lang":"ts","meta":null,"value":"interface UploadParams {\n  /**\n   * Url to POST file to.\n   */\n  readonly url: string;\n\n  /**\n   * Key to identify file.\n   * If unspecified a random `uuid` will be used.\n   */\n  readonly key?: string;\n\n  /**\n   * Any extra fields to send with the upload POST.\n   * If unspecified only the file will be included.\n   */\n  readonly fields?: { [field: string]: string };\n}","position":{"start":{"line":72,"column":1,"offset":2026},"end":{"line":91,"column":4,"offset":2405},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"updateFiles helper","position":{"start":{"line":93,"column":4,"offset":2410},"end":{"line":93,"column":22,"offset":2428},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":2407},"end":{"line":93,"column":22,"offset":2428},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"InputFile","position":{"start":{"line":95,"column":1,"offset":2430},"end":{"line":95,"column":12,"offset":2441},"indent":[]}},{"type":"text","value":" also exports a ","position":{"start":{"line":95,"column":12,"offset":2441},"end":{"line":95,"column":28,"offset":2457},"indent":[]}},{"type":"inlineCode","value":"updateFiles","position":{"start":{"line":95,"column":28,"offset":2457},"end":{"line":95,"column":41,"offset":2470},"indent":[]}},{"type":"text","value":" method. This method allows for easily\nupdating an array of ","position":{"start":{"line":95,"column":41,"offset":2470},"end":{"line":96,"column":22,"offset":2530},"indent":[1]}},{"type":"inlineCode","value":"FileUpload","position":{"start":{"line":96,"column":22,"offset":2530},"end":{"line":96,"column":34,"offset":2542},"indent":[]}},{"type":"text","value":"s based on their ","position":{"start":{"line":96,"column":34,"offset":2542},"end":{"line":96,"column":51,"offset":2559},"indent":[]}},{"type":"inlineCode","value":"key","position":{"start":{"line":96,"column":51,"offset":2559},"end":{"line":96,"column":56,"offset":2564},"indent":[]}},{"type":"text","value":" as uploads progress.","position":{"start":{"line":96,"column":56,"offset":2564},"end":{"line":96,"column":77,"offset":2585},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":2430},"end":{"line":96,"column":77,"offset":2585},"indent":[1]}},{"type":"code","lang":"ts","meta":null,"value":"/**\n * Upsert a given `FileUpload` into an array of `FileUpload`s.\n * `key` is used to uniquely identify files.\n *\n * @param updatedFile FileUpload File that was updated.\n * @param files Existing array of FileUploads.\n * @returns FileUpload[] updated set of files.\n */\nexport function updateFiles(updatedFile: FileUpload, files: FileUpload[]);","position":{"start":{"line":98,"column":1,"offset":2587},"end":{"line":108,"column":4,"offset":2940},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Only allow images","position":{"start":{"line":110,"column":4,"offset":2945},"end":{"line":110,"column":21,"offset":2962},"indent":[]}}],"position":{"start":{"line":110,"column":1,"offset":2942},"end":{"line":110,"column":21,"offset":2962},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Using the ","position":{"start":{"line":112,"column":1,"offset":2964},"end":{"line":112,"column":11,"offset":2974},"indent":[]}},{"type":"inlineCode","value":"allowedTypes","position":{"start":{"line":112,"column":11,"offset":2974},"end":{"line":112,"column":25,"offset":2988},"indent":[]}},{"type":"text","value":" prop you can choose to allow all files types or only\nimages. To upload multiple images you can use the ","position":{"start":{"line":112,"column":25,"offset":2988},"end":{"line":113,"column":51,"offset":3092},"indent":[1]}},{"type":"inlineCode","value":"multiple","position":{"start":{"line":113,"column":51,"offset":3092},"end":{"line":113,"column":61,"offset":3102},"indent":[]}},{"type":"text","value":" prop;","position":{"start":{"line":113,"column":61,"offset":3102},"end":{"line":113,"column":67,"offset":3108},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":2964},"end":{"line":113,"column":67,"offset":3108},"indent":[1]}},{"type":"export","value":"export function fetchUploadParams() {\n  return Promise.resolve({ url: \"https://httpbin.org/post\" });\n}","position":{"start":{"line":115,"column":1,"offset":3110},"end":{"line":117,"column":2,"offset":3212},"indent":[1,1]}},{"type":"jsx","value":"<Playground>\n  <Content>\n    <InputFile allowedTypes=\"images\" getUploadParams={fetchUploadParams} />\n    <InputFile\n      allowedTypes=\"images\"\n      allowMultiple={true}\n      getUploadParams={fetchUploadParams}\n    />\n  </Content>\n</Playground>","position":{"start":{"line":119,"column":1,"offset":3214},"end":{"line":128,"column":14,"offset":3460},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Variations & size","position":{"start":{"line":130,"column":4,"offset":3465},"end":{"line":130,"column":21,"offset":3482},"indent":[]}}],"position":{"start":{"line":130,"column":1,"offset":3462},"end":{"line":130,"column":21,"offset":3482},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"InputFile supports two variations (","position":{"start":{"line":132,"column":1,"offset":3484},"end":{"line":132,"column":36,"offset":3519},"indent":[]}},{"type":"inlineCode","value":"dropzone","position":{"start":{"line":132,"column":36,"offset":3519},"end":{"line":132,"column":46,"offset":3529},"indent":[]}},{"type":"text","value":" & ","position":{"start":{"line":132,"column":46,"offset":3529},"end":{"line":132,"column":49,"offset":3532},"indent":[]}},{"type":"inlineCode","value":"button","position":{"start":{"line":132,"column":49,"offset":3532},"end":{"line":132,"column":57,"offset":3540},"indent":[]}},{"type":"text","value":") each with two sizes\n(","position":{"start":{"line":132,"column":57,"offset":3540},"end":{"line":133,"column":2,"offset":3563},"indent":[1]}},{"type":"inlineCode","value":"small","position":{"start":{"line":133,"column":2,"offset":3563},"end":{"line":133,"column":9,"offset":3570},"indent":[]}},{"type":"text","value":" & ","position":{"start":{"line":133,"column":9,"offset":3570},"end":{"line":133,"column":12,"offset":3573},"indent":[]}},{"type":"inlineCode","value":"base","position":{"start":{"line":133,"column":12,"offset":3573},"end":{"line":133,"column":18,"offset":3579},"indent":[]}},{"type":"text","value":"). Both variations of InputFile allow for drag and drop however\nif you have the space ","position":{"start":{"line":133,"column":18,"offset":3579},"end":{"line":134,"column":23,"offset":3665},"indent":[1]}},{"type":"inlineCode","value":"dropzone","position":{"start":{"line":134,"column":23,"offset":3665},"end":{"line":134,"column":33,"offset":3675},"indent":[]}},{"type":"text","value":" is preferred to better indicate this.","position":{"start":{"line":134,"column":33,"offset":3675},"end":{"line":134,"column":71,"offset":3713},"indent":[]}}],"position":{"start":{"line":132,"column":1,"offset":3484},"end":{"line":134,"column":71,"offset":3713},"indent":[1,1]}},{"type":"jsx","value":"<Playground>\n  <Content>\n    <Heading level={2}>Dropzone</Heading>\n    <InputFile getUploadParams={fetchUploadParams} />\n    <InputFile size=\"small\" getUploadParams={fetchUploadParams} />\n    <Heading level={2}>Button</Heading>\n    <InputFile variation=\"button\" getUploadParams={fetchUploadParams} />\n    <InputFile\n      variation=\"button\"\n      size=\"small\"\n      getUploadParams={fetchUploadParams}\n    />\n  </Content>\n</Playground>","position":{"start":{"line":136,"column":1,"offset":3715},"end":{"line":149,"column":14,"offset":4150},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":152,"column":1,"offset":4153},"end":{"line":152,"column":31,"offset":4183},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":152,"column":31,"offset":4183}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { Playground, Props } from \"docz\";\nimport { ComponentStatus } from \"@jobber/docx\";\nimport { useState } from \"react\";\nimport { v1 as uuidv1 } from \"uuid\";\nimport { InputFile, updateFiles } from \".\";\nimport { Content } from \"@jobber/components/Content\";\nimport { Heading } from \"@jobber/components/Heading\";\nimport { FormatFile } from \"@jobber/components/FormatFile\";\nimport { ProgressBar } from \"@jobber/components/ProgressBar\";\nexport function fetchUploadParams() {\n  return Promise.resolve({\n    url: \"https://httpbin.org/post\"\n  });\n}\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  fetchUploadParams,\n_frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"input-file\"\n    }}>{`Input File`}</h1>\n    <ComponentStatus stage=\"rc\" responsive=\"yes\" accessible=\"yes\" mdxType=\"ComponentStatus\" />\n    <p><inlineCode parentName=\"p\">{`InputFile`}</inlineCode>{` allows users to upload a file, or multiple files by dragging and\ndropping them into an area on the page or by clicking a button.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { InputFile, updateFiles } from \"@jobber/components/InputFile\";\n`}</code></pre>\n    <Playground __position={1} __code={'() => {\\n  const [files, setFiles] = useState([])\\n  return (\\n    <Content>\\n      <InputFile\\n        allowMultiple={true}\\n        getUploadParams={() =>\\n          Promise.resolve({ url: \\'https://httpbin.org/post\\' })\\n        }\\n        onUploadStart={handleUpload}\\n        onUploadProgress={handleUpload}\\n        onUploadComplete={handleUpload}\\n      />\\n      {files.map(file => (\\n        <FormatFile file={file} />\\n      ))}\\n    </Content>\\n  )\\n  function handleUpload(file) {\\n    setFiles(oldFiles => updateFiles(file, oldFiles))\\n  }\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      useState,\n      uuidv1,\n      InputFile,\n      updateFiles,\n      Content,\n      Heading,\n      FormatFile,\n      ProgressBar,\n      DefaultLayout,\n      fetchUploadParams,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [files, setFiles] = useState([]);\n        return <Content mdxType=\"Content\">\n        <InputFile allowMultiple={true} getUploadParams={() => Promise.resolve({\n            url: \"https://httpbin.org/post\"\n          })} onUploadStart={handleUpload} onUploadProgress={handleUpload} onUploadComplete={handleUpload} mdxType=\"InputFile\" />\n        {files.map(file => <FormatFile file={file} mdxType=\"FormatFile\" />)}\n      </Content>;\n\n        function handleUpload(file) {\n          setFiles(oldFiles => updateFiles(file, oldFiles));\n        }\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"design--usage-guidelines\"\n    }}>{`Design & usage guidelines`}</h2>\n    <p>{`When contributing to, or consuming the `}<inlineCode parentName=\"p\">{`InputFile`}</inlineCode>{` component, consider the\nfollowing:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Provide feedback once the file(s) have been dropped and uploading begins.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={InputFile} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"getuploadparams\"\n    }}>{`getUploadParams`}</h2>\n    <p><inlineCode parentName=\"p\">{`getUploadParams`}</inlineCode>{` is a necessary callback that tells `}<inlineCode parentName=\"p\">{`InputFile`}</inlineCode>{` where and how\nto upload files that are passed to it. It must return an object conforming to\nthe `}<inlineCode parentName=\"p\">{`UploadParams`}</inlineCode>{` interface. `}<inlineCode parentName=\"p\">{`getUploadParams`}</inlineCode>{` can be async, allowing for a\nnetwork request to fetch any extra fields.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface UploadParams {\n  /**\n   * Url to POST file to.\n   */\n  readonly url: string;\n\n  /**\n   * Key to identify file.\n   * If unspecified a random \\`uuid\\` will be used.\n   */\n  readonly key?: string;\n\n  /**\n   * Any extra fields to send with the upload POST.\n   * If unspecified only the file will be included.\n   */\n  readonly fields?: { [field: string]: string };\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"updatefiles-helper\"\n    }}>{`updateFiles helper`}</h2>\n    <p><inlineCode parentName=\"p\">{`InputFile`}</inlineCode>{` also exports a `}<inlineCode parentName=\"p\">{`updateFiles`}</inlineCode>{` method. This method allows for easily\nupdating an array of `}<inlineCode parentName=\"p\">{`FileUpload`}</inlineCode>{`s based on their `}<inlineCode parentName=\"p\">{`key`}</inlineCode>{` as uploads progress.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`/**\n * Upsert a given \\`FileUpload\\` into an array of \\`FileUpload\\`s.\n * \\`key\\` is used to uniquely identify files.\n *\n * @param updatedFile FileUpload File that was updated.\n * @param files Existing array of FileUploads.\n * @returns FileUpload[] updated set of files.\n */\nexport function updateFiles(updatedFile: FileUpload, files: FileUpload[]);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"only-allow-images\"\n    }}>{`Only allow images`}</h2>\n    <p>{`Using the `}<inlineCode parentName=\"p\">{`allowedTypes`}</inlineCode>{` prop you can choose to allow all files types or only\nimages. To upload multiple images you can use the `}<inlineCode parentName=\"p\">{`multiple`}</inlineCode>{` prop;`}</p>\n\n    <Playground __position={3} __code={'<Content>\\n  <InputFile allowedTypes=\\\"images\\\" getUploadParams={fetchUploadParams} />\\n  <InputFile\\n    allowedTypes=\\\"images\\\"\\n    allowMultiple={true}\\n    getUploadParams={fetchUploadParams}\\n  />\\n</Content>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      useState,\n      uuidv1,\n      InputFile,\n      updateFiles,\n      Content,\n      Heading,\n      FormatFile,\n      ProgressBar,\n      DefaultLayout,\n      fetchUploadParams,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Content mdxType=\"Content\">\n    <InputFile allowedTypes=\"images\" getUploadParams={fetchUploadParams} mdxType=\"InputFile\" />\n    <InputFile allowedTypes=\"images\" allowMultiple={true} getUploadParams={fetchUploadParams} mdxType=\"InputFile\" />\n  </Content>\n    </Playground>\n    <h2 {...{\n      \"id\": \"variations--size\"\n    }}>{`Variations & size`}</h2>\n    <p>{`InputFile supports two variations (`}<inlineCode parentName=\"p\">{`dropzone`}</inlineCode>{` & `}<inlineCode parentName=\"p\">{`button`}</inlineCode>{`) each with two sizes\n(`}<inlineCode parentName=\"p\">{`small`}</inlineCode>{` & `}<inlineCode parentName=\"p\">{`base`}</inlineCode>{`). Both variations of InputFile allow for drag and drop however\nif you have the space `}<inlineCode parentName=\"p\">{`dropzone`}</inlineCode>{` is preferred to better indicate this.`}</p>\n    <Playground __position={4} __code={'<Content>\\n  <Heading level={2}>Dropzone</Heading>\\n  <InputFile getUploadParams={fetchUploadParams} />\\n  <InputFile size=\\\"small\\\" getUploadParams={fetchUploadParams} />\\n  <Heading level={2}>Button</Heading>\\n  <InputFile variation=\\\"button\\\" getUploadParams={fetchUploadParams} />\\n  <InputFile\\n    variation=\\\"button\\\"\\n    size=\\\"small\\\"\\n    getUploadParams={fetchUploadParams}\\n  />\\n</Content>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      useState,\n      uuidv1,\n      InputFile,\n      updateFiles,\n      Content,\n      Heading,\n      FormatFile,\n      ProgressBar,\n      DefaultLayout,\n      fetchUploadParams,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Content mdxType=\"Content\">\n    <Heading level={2} mdxType=\"Heading\">Dropzone</Heading>\n    <InputFile getUploadParams={fetchUploadParams} mdxType=\"InputFile\" />\n    <InputFile size=\"small\" getUploadParams={fetchUploadParams} mdxType=\"InputFile\" />\n    <Heading level={2} mdxType=\"Heading\">Button</Heading>\n    <InputFile variation=\"button\" getUploadParams={fetchUploadParams} mdxType=\"InputFile\" />\n    <InputFile variation=\"button\" size=\"small\" getUploadParams={fetchUploadParams} mdxType=\"InputFile\" />\n  </Content>\n    </Playground>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}
{"expireTime":9007200931831381000,"key":"gatsby-plugin-mdx-entire-payload-6bcb22886a1569f65ba2bd8d673befae-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":114,"offset":115},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":117},"end":{"line":5,"column":29,"offset":145},"indent":[]}},{"type":"import","value":"import { Playground, Props } from \"docz\";\nimport { ComponentStatus } from \"@jobber/docx\";\nimport { useState } from \"react\";\nimport { Switch } from \".\";","position":{"start":{"line":8,"column":1,"offset":148},"end":{"line":11,"column":28,"offset":299},"indent":[1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Switch","position":{"start":{"line":13,"column":3,"offset":303},"end":{"line":13,"column":9,"offset":309},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":301},"end":{"line":13,"column":9,"offset":309},"indent":[]}},{"type":"jsx","value":"<ComponentStatus stage=\"ready\" responsive=\"yes\" accessible=\"yes\" />","position":{"start":{"line":15,"column":1,"offset":311},"end":{"line":15,"column":68,"offset":378},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A switch toggles the state of a single setting to on or off.","position":{"start":{"line":17,"column":1,"offset":380},"end":{"line":17,"column":61,"offset":440},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":380},"end":{"line":17,"column":61,"offset":440},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"import { Switch } from \"@jobber/components/Switch\";","position":{"start":{"line":19,"column":1,"offset":442},"end":{"line":21,"column":4,"offset":503},"indent":[1,1]}},{"type":"jsx","value":"<Playground>\n  <Switch ariaLabel=\"Visible to clients\" />\n</Playground>","position":{"start":{"line":23,"column":1,"offset":505},"end":{"line":25,"column":14,"offset":575},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Props","position":{"start":{"line":27,"column":4,"offset":580},"end":{"line":27,"column":9,"offset":585},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":577},"end":{"line":27,"column":9,"offset":585},"indent":[]}},{"type":"jsx","value":"<Props of={Switch} />","position":{"start":{"line":29,"column":1,"offset":587},"end":{"line":29,"column":22,"offset":608},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":31,"column":1,"offset":610},"end":{"line":31,"column":4,"offset":613},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Design & usage guidelines","position":{"start":{"line":33,"column":4,"offset":618},"end":{"line":33,"column":29,"offset":643},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":615},"end":{"line":33,"column":29,"offset":643},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The switch is a useful component for manipulating settings with binary\n(true/false, yes/no, on/off) conditions. For this reason its' label is limited\nto ON/OFF.","position":{"start":{"line":35,"column":1,"offset":645},"end":{"line":37,"column":11,"offset":805},"indent":[1,1]}}],"position":{"start":{"line":35,"column":1,"offset":645},"end":{"line":37,"column":11,"offset":805},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Switches, Checkboxes and Radio Buttons","position":{"start":{"line":39,"column":5,"offset":811},"end":{"line":39,"column":43,"offset":849},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":807},"end":{"line":39,"column":43,"offset":849},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A switch, a checkbox, and a pair of radio buttons can seem similar in theory, as\nall can represent an ","position":{"start":{"line":41,"column":1,"offset":851},"end":{"line":42,"column":22,"offset":953},"indent":[1]}},{"type":"inlineCode","value":"either/or decision","position":{"start":{"line":42,"column":22,"offset":953},"end":{"line":42,"column":42,"offset":973},"indent":[]}},{"type":"text","value":" for the user. Use a switch when the\nuser must make a decision to turn something on or off, and a single checkbox\nwhen a user is opting in to a choice. A pair of radio buttons can be used to\nhelp the user decide between two discrete options, such as “fixed price” and\n“per visit” invoicing options.","position":{"start":{"line":42,"column":42,"offset":973},"end":{"line":46,"column":31,"offset":1271},"indent":[1,1,1,1]}}],"position":{"start":{"line":41,"column":1,"offset":851},"end":{"line":46,"column":31,"offset":1271},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Controlled Switch","position":{"start":{"line":48,"column":4,"offset":1276},"end":{"line":48,"column":21,"offset":1293},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":1273},"end":{"line":48,"column":21,"offset":1293},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A controlled switch can turn something on or off, and can be controlled by\nanother UI element on the page. This can useful for two-way interactions where\nmanipulating another part of the interface should logically drive the same state\nchange.","position":{"start":{"line":50,"column":1,"offset":1295},"end":{"line":53,"column":8,"offset":1537},"indent":[1,1,1]}}],"position":{"start":{"line":50,"column":1,"offset":1295},"end":{"line":53,"column":8,"offset":1537},"indent":[1,1,1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const [toggleState, setToggleState] = useState(true);\n    const label = \"Toggle example\";\n    return (\n      <>\n        <button onClick={() => setToggleState(!toggleState)}>{label}</button>\n        <br />\n        <Switch\n          value={toggleState}\n          onChange={newToggleState => setToggleState(newToggleState)}\n          ariaLabel={label}\n        />\n      </>\n    );\n  }}\n</Playground>","position":{"start":{"line":55,"column":1,"offset":1539},"end":{"line":71,"column":14,"offset":1962},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Disabled","position":{"start":{"line":73,"column":4,"offset":1967},"end":{"line":73,"column":12,"offset":1975},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":1964},"end":{"line":73,"column":12,"offset":1975},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A disabled switch cannot be operated by the user. If presenting a disabled \"On\"\nswitch to the user, provide a clear description for the user on how to enable\nthe switch to avoid creating a sense that the user has lost control of the\ninterface.","position":{"start":{"line":75,"column":1,"offset":1977},"end":{"line":78,"column":11,"offset":2220},"indent":[1,1,1]}}],"position":{"start":{"line":75,"column":1,"offset":1977},"end":{"line":78,"column":11,"offset":2220},"indent":[1,1,1]}},{"type":"jsx","value":"<Playground>\n  <Switch value={false} ariaLabel=\"Visible to clients\" disabled={true} />\n</Playground>","position":{"start":{"line":80,"column":1,"offset":2222},"end":{"line":82,"column":14,"offset":2322},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":85,"column":1,"offset":2325},"end":{"line":85,"column":31,"offset":2355},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":85,"column":31,"offset":2355}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { Playground, Props } from \"docz\";\nimport { ComponentStatus } from \"@jobber/docx\";\nimport { useState } from \"react\";\nimport { Switch } from \".\";\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"switch\"\n    }}>{`Switch`}</h1>\n    <ComponentStatus stage=\"ready\" responsive=\"yes\" accessible=\"yes\" mdxType=\"ComponentStatus\" />\n    <p>{`A switch toggles the state of a single setting to on or off.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { Switch } from \"@jobber/components/Switch\";\n`}</code></pre>\n    <Playground __position={1} __code={'<Switch ariaLabel=\\\"Visible to clients\\\" />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      useState,\n      Switch,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Switch ariaLabel=\"Visible to clients\" mdxType=\"Switch\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Switch} mdxType=\"Props\" />\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"design--usage-guidelines\"\n    }}>{`Design & usage guidelines`}</h2>\n    <p>{`The switch is a useful component for manipulating settings with binary\n(true/false, yes/no, on/off) conditions. For this reason its' label is limited\nto ON/OFF.`}</p>\n    <h3 {...{\n      \"id\": \"switches-checkboxes-and-radio-buttons\"\n    }}>{`Switches, Checkboxes and Radio Buttons`}</h3>\n    <p>{`A switch, a checkbox, and a pair of radio buttons can seem similar in theory, as\nall can represent an `}<inlineCode parentName=\"p\">{`either/or decision`}</inlineCode>{` for the user. Use a switch when the\nuser must make a decision to turn something on or off, and a single checkbox\nwhen a user is opting in to a choice. A pair of radio buttons can be used to\nhelp the user decide between two discrete options, such as “fixed price” and\n“per visit” invoicing options.`}</p>\n    <h2 {...{\n      \"id\": \"controlled-switch\"\n    }}>{`Controlled Switch`}</h2>\n    <p>{`A controlled switch can turn something on or off, and can be controlled by\nanother UI element on the page. This can useful for two-way interactions where\nmanipulating another part of the interface should logically drive the same state\nchange.`}</p>\n    <Playground __position={3} __code={'() => {\\n  const [toggleState, setToggleState] = useState(true)\\n  const label = \\'Toggle example\\'\\n  return (\\n    <>\\n      <button onClick={() => setToggleState(!toggleState)}>{label}</button>\\n      <br />\\n      <Switch\\n        value={toggleState}\\n        onChange={newToggleState => setToggleState(newToggleState)}\\n        ariaLabel={label}\\n      />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      useState,\n      Switch,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [toggleState, setToggleState] = useState(true);\n        const label = \"Toggle example\";\n        return <>\n        <button onClick={() => setToggleState(!toggleState)}>{label}</button>\n        <br />\n        <Switch value={toggleState} onChange={newToggleState => setToggleState(newToggleState)} ariaLabel={label} mdxType=\"Switch\" />\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"disabled\"\n    }}>{`Disabled`}</h2>\n    <p>{`A disabled switch cannot be operated by the user. If presenting a disabled \"On\"\nswitch to the user, provide a clear description for the user on how to enable\nthe switch to avoid creating a sense that the user has lost control of the\ninterface.`}</p>\n    <Playground __position={4} __code={'<Switch value={false} ariaLabel=\\\"Visible to clients\\\" disabled={true} />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      useState,\n      Switch,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Switch value={false} ariaLabel=\"Visible to clients\" disabled={true} mdxType=\"Switch\" />\n    </Playground>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}
{"expireTime":9007200931831330000,"key":"gatsby-plugin-mdx-entire-payload-c2df8e9be3e5696ccdd9ffbfa8f1cf87-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":114,"offset":115},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":117},"end":{"line":5,"column":29,"offset":145},"indent":[]}},{"type":"import","value":"import { Playground, Props } from \"docz\";\nimport { useRef, useState } from \"react\";\nimport { ComponentStatus } from \"@jobber/docx\";\nimport { useFormState } from \"@jobber/hooks\";\nimport { Form } from \"@jobber/components/Form\";\nimport { Content } from \"@jobber/components/Content\";\nimport { Card } from \"@jobber/components/Card\";\nimport { InputText } from \"@jobber/components/InputText\";\nimport { Button } from \"@jobber/components/Button\";","position":{"start":{"line":8,"column":1,"offset":148},"end":{"line":16,"column":52,"offset":585},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Form","position":{"start":{"line":18,"column":3,"offset":589},"end":{"line":18,"column":7,"offset":593},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":587},"end":{"line":18,"column":7,"offset":593},"indent":[]}},{"type":"jsx","value":"<ComponentStatus stage=\"pre\" responsive=\"no\" accessible=\"no\" />","position":{"start":{"line":20,"column":1,"offset":595},"end":{"line":20,"column":64,"offset":658},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":22,"column":1,"offset":660},"end":{"line":22,"column":5,"offset":664},"indent":[]}},{"type":"inlineCode","value":"Form","position":{"start":{"line":22,"column":5,"offset":664},"end":{"line":22,"column":11,"offset":670},"indent":[]}},{"type":"text","value":" component is a wrapper component that handles the submission and\nvalidation of forms.","position":{"start":{"line":22,"column":11,"offset":670},"end":{"line":23,"column":21,"offset":756},"indent":[1]}}],"position":{"start":{"line":22,"column":1,"offset":660},"end":{"line":23,"column":21,"offset":756},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"For more information about ","position":{"start":{"line":25,"column":1,"offset":758},"end":{"line":25,"column":28,"offset":785},"indent":[]}},{"type":"inlineCode","value":"validations","position":{"start":{"line":25,"column":28,"offset":785},"end":{"line":25,"column":41,"offset":798},"indent":[]}},{"type":"text","value":" using any of the ","position":{"start":{"line":25,"column":41,"offset":798},"end":{"line":25,"column":59,"offset":816},"indent":[]}},{"type":"inlineCode","value":"Input","position":{"start":{"line":25,"column":59,"offset":816},"end":{"line":25,"column":66,"offset":823},"indent":[]}},{"type":"text","value":" components,\nsee the ","position":{"start":{"line":25,"column":66,"offset":823},"end":{"line":26,"column":9,"offset":844},"indent":[1]}},{"type":"link","title":null,"url":"/components/input-text/#validation-message","children":[{"type":"text","value":"InputText","position":{"start":{"line":26,"column":10,"offset":845},"end":{"line":26,"column":19,"offset":854},"indent":[]}}],"position":{"start":{"line":26,"column":9,"offset":844},"end":{"line":26,"column":64,"offset":899},"indent":[]}},{"type":"text","value":" documentation.","position":{"start":{"line":26,"column":64,"offset":899},"end":{"line":26,"column":79,"offset":914},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":758},"end":{"line":26,"column":79,"offset":914},"indent":[1]}},{"type":"code","lang":"ts","meta":null,"value":"import { Form } from \"@jobber/components/Form\";","position":{"start":{"line":28,"column":1,"offset":916},"end":{"line":30,"column":4,"offset":973},"indent":[1,1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const [{ isDirty, isValid }, setFormState] = useFormState();\n    const [first, setFirst] = useState(\"\");\n    return (\n      <Form\n        onSubmit={() => alert(\"Submitted ðŸŽ‰ðŸŽ‰ðŸŽ‰\")}\n        onStateChange={setFormState}\n      >\n        <Content>\n          <InputText\n            placeholder=\"First Name\"\n            name=\"firstName\"\n            value={first}\n            onChange={setFirst}\n            validations={{\n              required: {\n                value: true,\n                message: \"Tell us your name\",\n              },\n              minLength: {\n                value: 3,\n                message: \"Your name is to short.\",\n              },\n            }}\n          />\n          <InputText\n            placeholder=\"Last Name\"\n            name=\"lastName\"\n            validations={{\n              required: {\n                value: true,\n                message: \"Tell us your last name.\",\n              },\n            }}\n          />\n          <Button\n            label=\"Submit Form\"\n            submit={true}\n            disabled={!isDirty || !isValid}\n          />\n        </Content>\n      </Form>\n    );\n  }}\n</Playground>","position":{"start":{"line":32,"column":1,"offset":975},"end":{"line":77,"column":14,"offset":2141},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Props","position":{"start":{"line":79,"column":4,"offset":2146},"end":{"line":79,"column":9,"offset":2151},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":2143},"end":{"line":79,"column":9,"offset":2151},"indent":[]}},{"type":"jsx","value":"<Props of={Form} />","position":{"start":{"line":81,"column":1,"offset":2153},"end":{"line":81,"column":20,"offset":2172},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"onStateChange","position":{"start":{"line":83,"column":4,"offset":2177},"end":{"line":83,"column":17,"offset":2190},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":2174},"end":{"line":83,"column":17,"offset":2190},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"onStateChange","position":{"start":{"line":85,"column":1,"offset":2192},"end":{"line":85,"column":16,"offset":2207},"indent":[]}},{"type":"text","value":" will call whenever the state of the form is changed. It is best\npractice to use the ","position":{"start":{"line":85,"column":16,"offset":2207},"end":{"line":86,"column":21,"offset":2292},"indent":[1]}},{"type":"link","title":null,"url":"/hooks/useFormState","children":[{"type":"inlineCode","value":"useFormState","position":{"start":{"line":86,"column":22,"offset":2293},"end":{"line":86,"column":36,"offset":2307},"indent":[]}}],"position":{"start":{"line":86,"column":21,"offset":2292},"end":{"line":86,"column":58,"offset":2329},"indent":[]}},{"type":"text","value":" hook with the\n","position":{"start":{"line":86,"column":58,"offset":2329},"end":{"line":87,"column":1,"offset":2344},"indent":[1]}},{"type":"inlineCode","value":"onStateChange","position":{"start":{"line":87,"column":1,"offset":2344},"end":{"line":87,"column":16,"offset":2359},"indent":[]}},{"type":"text","value":" prop.","position":{"start":{"line":87,"column":16,"offset":2359},"end":{"line":87,"column":22,"offset":2365},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":2192},"end":{"line":87,"column":22,"offset":2365},"indent":[1,1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const [formState, setFormState] = useFormState();\n    return (\n      <>\n        <Form onSubmit={() => alert(\"submitted\")} onStateChange={setFormState}>\n          <InputText\n            placeholder=\"First Name\"\n            name=\"firstName\"\n            validations={{\n              required: {\n                value: true,\n                message: \"Tell us your name\",\n              },\n              minLength: {\n                value: 3,\n                message: \"Your name is to short.\",\n              },\n            }}\n          />\n        </Form>\n        <pre>{JSON.stringify(formState, null, 2)}</pre>\n      </>\n    );\n  }}\n</Playground>","position":{"start":{"line":89,"column":1,"offset":2367},"end":{"line":114,"column":14,"offset":3035},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Triggering submission","position":{"start":{"line":116,"column":4,"offset":3040},"end":{"line":116,"column":25,"offset":3061},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":3037},"end":{"line":116,"column":25,"offset":3061},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Submission of a ","position":{"start":{"line":118,"column":1,"offset":3063},"end":{"line":118,"column":17,"offset":3079},"indent":[]}},{"type":"inlineCode","value":"Form","position":{"start":{"line":118,"column":17,"offset":3079},"end":{"line":118,"column":23,"offset":3085},"indent":[]}},{"type":"text","value":" can be done outside of the ","position":{"start":{"line":118,"column":23,"offset":3085},"end":{"line":118,"column":51,"offset":3113},"indent":[]}},{"type":"inlineCode","value":"Form","position":{"start":{"line":118,"column":51,"offset":3113},"end":{"line":118,"column":57,"offset":3119},"indent":[]}},{"type":"text","value":" itself by using the\n","position":{"start":{"line":118,"column":57,"offset":3119},"end":{"line":119,"column":1,"offset":3140},"indent":[1]}},{"type":"inlineCode","value":"validate","position":{"start":{"line":119,"column":1,"offset":3140},"end":{"line":119,"column":11,"offset":3150},"indent":[]}},{"type":"text","value":" function that is exposed.","position":{"start":{"line":119,"column":11,"offset":3150},"end":{"line":119,"column":37,"offset":3176},"indent":[]}}],"position":{"start":{"line":118,"column":1,"offset":3063},"end":{"line":119,"column":37,"offset":3176},"indent":[1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const formRef = useRef();\n    return (\n      <Content>\n        <Form onSubmit={() => alert(\"Submitted ðŸŽ‰ðŸŽ‰ðŸŽ‰\")} ref={formRef}>\n          <Content>\n            <InputText\n              placeholder=\"First Name\"\n              name=\"firstName\"\n              validations={{\n                required: {\n                  value: true,\n                  message: \"Tell us your name\",\n                },\n              }}\n            />\n            <InputText\n              placeholder=\"Last Name\"\n              name=\"lastName\"\n              validations={{\n                required: {\n                  value: true,\n                  message: \"Tell us your last name.\",\n                },\n              }}\n            />\n          </Content>\n        </Form>\n        <Button\n          label=\"Submit Form from the outside\"\n          onClick={() => formRef.current.submit()}\n        />\n      </Content>\n    );\n  }}\n</Playground>","position":{"start":{"line":121,"column":1,"offset":3178},"end":{"line":157,"column":14,"offset":4121},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":160,"column":1,"offset":4124},"end":{"line":160,"column":31,"offset":4154},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":160,"column":31,"offset":4154}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { Playground, Props } from \"docz\";\nimport { useRef, useState } from \"react\";\nimport { ComponentStatus } from \"@jobber/docx\";\nimport { useFormState } from \"@jobber/hooks\";\nimport { Form } from \"@jobber/components/Form\";\nimport { Content } from \"@jobber/components/Content\";\nimport { Card } from \"@jobber/components/Card\";\nimport { InputText } from \"@jobber/components/InputText\";\nimport { Button } from \"@jobber/components/Button\";\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"form\"\n    }}>{`Form`}</h1>\n    <ComponentStatus stage=\"pre\" responsive=\"no\" accessible=\"no\" mdxType=\"ComponentStatus\" />\n    <p>{`The `}<inlineCode parentName=\"p\">{`Form`}</inlineCode>{` component is a wrapper component that handles the submission and\nvalidation of forms.`}</p>\n    <p>{`For more information about `}<inlineCode parentName=\"p\">{`validations`}</inlineCode>{` using any of the `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{` components,\nsee the `}<a parentName=\"p\" {...{\n        \"href\": \"/components/input-text/#validation-message\"\n      }}>{`InputText`}</a>{` documentation.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { Form } from \"@jobber/components/Form\";\n`}</code></pre>\n    <Playground __position={1} __code={'() => {\\n  const [{ isDirty, isValid }, setFormState] = useFormState()\\n  const [first, setFirst] = useState(\\'\\')\\n  return (\\n    <Form\\n      onSubmit={() => alert(\\'Submitted ðŸŽ‰ðŸŽ‰ðŸŽ‰\\')}\\n      onStateChange={setFormState}\\n    >\\n      <Content>\\n        <InputText\\n          placeholder=\\\"First Name\\\"\\n          name=\\\"firstName\\\"\\n          value={first}\\n          onChange={setFirst}\\n          validations={{\\n            required: {\\n              value: true,\\n              message: \\'Tell us your name\\',\\n            },\\n            minLength: {\\n              value: 3,\\n              message: \\'Your name is to short.\\',\\n            },\\n          }}\\n        />\\n        <InputText\\n          placeholder=\\\"Last Name\\\"\\n          name=\\\"lastName\\\"\\n          validations={{\\n            required: {\\n              value: true,\\n              message: \\'Tell us your last name.\\',\\n            },\\n          }}\\n        />\\n        <Button\\n          label=\\\"Submit Form\\\"\\n          submit={true}\\n          disabled={!isDirty || !isValid}\\n        />\\n      </Content>\\n    </Form>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useRef,\n      useState,\n      ComponentStatus,\n      useFormState,\n      Form,\n      Content,\n      Card,\n      InputText,\n      Button,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [{\n          isDirty,\n          isValid\n        }, setFormState] = useFormState();\n        const [first, setFirst] = useState(\"\");\n        return <Form onSubmit={() => alert(\"Submitted ðŸŽ‰ðŸŽ‰ðŸŽ‰\")} onStateChange={setFormState} mdxType=\"Form\">\n        <Content mdxType=\"Content\">\n          <InputText placeholder=\"First Name\" name=\"firstName\" value={first} onChange={setFirst} validations={{\n              required: {\n                value: true,\n                message: \"Tell us your name\"\n              },\n              minLength: {\n                value: 3,\n                message: \"Your name is to short.\"\n              }\n            }} mdxType=\"InputText\" />\n          <InputText placeholder=\"Last Name\" name=\"lastName\" validations={{\n              required: {\n                value: true,\n                message: \"Tell us your last name.\"\n              }\n            }} mdxType=\"InputText\" />\n          <Button label=\"Submit Form\" submit={true} disabled={!isDirty || !isValid} mdxType=\"Button\" />\n        </Content>\n      </Form>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Form} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"onstatechange\"\n    }}>{`onStateChange`}</h2>\n    <p><inlineCode parentName=\"p\">{`onStateChange`}</inlineCode>{` will call whenever the state of the form is changed. It is best\npractice to use the `}<a parentName=\"p\" {...{\n        \"href\": \"/hooks/useFormState\"\n      }}><inlineCode parentName=\"a\">{`useFormState`}</inlineCode></a>{` hook with the\n`}<inlineCode parentName=\"p\">{`onStateChange`}</inlineCode>{` prop.`}</p>\n    <Playground __position={3} __code={'() => {\\n  const [formState, setFormState] = useFormState()\\n  return (\\n    <>\\n      <Form onSubmit={() => alert(\\'submitted\\')} onStateChange={setFormState}>\\n        <InputText\\n          placeholder=\\\"First Name\\\"\\n          name=\\\"firstName\\\"\\n          validations={{\\n            required: {\\n              value: true,\\n              message: \\'Tell us your name\\',\\n            },\\n            minLength: {\\n              value: 3,\\n              message: \\'Your name is to short.\\',\\n            },\\n          }}\\n        />\\n      </Form>\\n      <pre>{JSON.stringify(formState, null, 2)}</pre>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useRef,\n      useState,\n      ComponentStatus,\n      useFormState,\n      Form,\n      Content,\n      Card,\n      InputText,\n      Button,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [formState, setFormState] = useFormState();\n        return <>\n        <Form onSubmit={() => alert(\"submitted\")} onStateChange={setFormState} mdxType=\"Form\">\n          <InputText placeholder=\"First Name\" name=\"firstName\" validations={{\n              required: {\n                value: true,\n                message: \"Tell us your name\"\n              },\n              minLength: {\n                value: 3,\n                message: \"Your name is to short.\"\n              }\n            }} mdxType=\"InputText\" />\n        </Form>\n        <pre>{JSON.stringify(formState, null, 2)}</pre>\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"triggering-submission\"\n    }}>{`Triggering submission`}</h2>\n    <p>{`Submission of a `}<inlineCode parentName=\"p\">{`Form`}</inlineCode>{` can be done outside of the `}<inlineCode parentName=\"p\">{`Form`}</inlineCode>{` itself by using the\n`}<inlineCode parentName=\"p\">{`validate`}</inlineCode>{` function that is exposed.`}</p>\n    <Playground __position={4} __code={'() => {\\n  const formRef = useRef()\\n  return (\\n    <Content>\\n      <Form onSubmit={() => alert(\\'Submitted ðŸŽ‰ðŸŽ‰ðŸŽ‰\\')} ref={formRef}>\\n        <Content>\\n          <InputText\\n            placeholder=\\\"First Name\\\"\\n            name=\\\"firstName\\\"\\n            validations={{\\n              required: {\\n                value: true,\\n                message: \\'Tell us your name\\',\\n              },\\n            }}\\n          />\\n          <InputText\\n            placeholder=\\\"Last Name\\\"\\n            name=\\\"lastName\\\"\\n            validations={{\\n              required: {\\n                value: true,\\n                message: \\'Tell us your last name.\\',\\n              },\\n            }}\\n          />\\n        </Content>\\n      </Form>\\n      <Button\\n        label=\\\"Submit Form from the outside\\\"\\n        onClick={() => formRef.current.submit()}\\n      />\\n    </Content>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useRef,\n      useState,\n      ComponentStatus,\n      useFormState,\n      Form,\n      Content,\n      Card,\n      InputText,\n      Button,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const formRef = useRef();\n        return <Content mdxType=\"Content\">\n        <Form onSubmit={() => alert(\"Submitted ðŸŽ‰ðŸŽ‰ðŸŽ‰\")} ref={formRef} mdxType=\"Form\">\n          <Content mdxType=\"Content\">\n            <InputText placeholder=\"First Name\" name=\"firstName\" validations={{\n                required: {\n                  value: true,\n                  message: \"Tell us your name\"\n                }\n              }} mdxType=\"InputText\" />\n            <InputText placeholder=\"Last Name\" name=\"lastName\" validations={{\n                required: {\n                  value: true,\n                  message: \"Tell us your last name.\"\n                }\n              }} mdxType=\"InputText\" />\n          </Content>\n        </Form>\n        <Button label=\"Submit Form from the outside\" onClick={() => formRef.current.submit()} mdxType=\"Button\" />\n      </Content>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}
{"expireTime":9007200931831329000,"key":"gatsby-plugin-mdx-entire-payload-15bf40d400bd2ae0ed06be2543ebdcd9-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":114,"offset":115},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":117},"end":{"line":5,"column":29,"offset":145},"indent":[]}},{"type":"import","value":"import { ArgsTable, Canvas, Meta, Story } from \"@storybook/addon-docs\";\nimport { useState } from \"react\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport { ExampleWithHooks } from \"mdxUtils/ExampleWithHooks\";\nimport { Button } from \"@jobber/components/Button\";\nimport { Autocomplete } from \"@jobber/components/Autocomplete\";","position":{"start":{"line":7,"column":1,"offset":147},"end":{"line":12,"column":64,"offset":472},"indent":[1,1,1,1,1]}},{"type":"jsx","value":"<Meta title=\"Components/Autocomplete\" component={Autocomplete} />","position":{"start":{"line":14,"column":1,"offset":474},"end":{"line":14,"column":66,"offset":539},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Autocomplete","position":{"start":{"line":16,"column":3,"offset":543},"end":{"line":16,"column":15,"offset":555},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":541},"end":{"line":16,"column":15,"offset":555},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"An autocomplete allows a user to quickly pick a preset value from a larger list\nof possible options.","position":{"start":{"line":18,"column":1,"offset":557},"end":{"line":19,"column":21,"offset":657},"indent":[1]}}],"position":{"start":{"line":18,"column":1,"offset":557},"end":{"line":19,"column":21,"offset":657},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"If the number of available options is smaller consider a ","position":{"start":{"line":21,"column":1,"offset":659},"end":{"line":21,"column":58,"offset":716},"indent":[]}},{"type":"link","title":null,"url":"select","children":[{"type":"text","value":"Select","position":{"start":{"line":21,"column":59,"offset":717},"end":{"line":21,"column":65,"offset":723},"indent":[]}}],"position":{"start":{"line":21,"column":58,"offset":716},"end":{"line":21,"column":74,"offset":732},"indent":[]}},{"type":"text","value":"\ninstead.","position":{"start":{"line":21,"column":74,"offset":732},"end":{"line":22,"column":9,"offset":741},"indent":[1]}}],"position":{"start":{"line":21,"column":1,"offset":659},"end":{"line":22,"column":9,"offset":741},"indent":[1]}},{"type":"code","lang":"ts","meta":null,"value":"import { Autocomplete } from \"@jobber/components/Autocomplete\";","position":{"start":{"line":24,"column":1,"offset":743},"end":{"line":26,"column":4,"offset":816},"indent":[1,1]}},{"type":"jsx","value":"<Canvas>\n  <Story\n    name=\"Autocomplete\"\n    args={{\n      initialOptions: [],\n      placeholder: \"Search for something\",\n    }}\n  >\n    {args => {\n      const options = [\n        { value: 1, label: \"Nostromo\" },\n        { value: 2, label: \"Rodger Young\" },\n        { value: 3, label: \"Serenity\" },\n        { value: 4, label: \"Sleeper Service\" },\n        { value: 5, label: \"Enterprise\" },\n        { value: 6, label: \"Enterprise-D\" },\n      ];\n      const [value, setValue] = useState();\n      return (\n        <Autocomplete\n          {...args}\n          value={value}\n          onChange={setValue}\n          getOptions={getOptions}\n        />\n      );\n      function getOptions(text) {\n        if (text === \"\") {\n          return options;\n        }\n        const filterRegex = new RegExp(text, \"i\");\n        return options.filter(option => option.label.match(filterRegex));\n      }\n    }}\n  </Story>\n</Canvas>","position":{"start":{"line":28,"column":1,"offset":818},"end":{"line":63,"column":10,"offset":1729},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Props","position":{"start":{"line":65,"column":4,"offset":1734},"end":{"line":65,"column":9,"offset":1739},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":1731},"end":{"line":65,"column":9,"offset":1739},"indent":[]}},{"type":"jsx","value":"<ArgsTable of={Autocomplete} story=\"Autocomplete\" />","position":{"start":{"line":67,"column":1,"offset":1741},"end":{"line":67,"column":53,"offset":1793},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":69,"column":1,"offset":1795},"end":{"line":69,"column":4,"offset":1798},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"With details","position":{"start":{"line":71,"column":4,"offset":1803},"end":{"line":71,"column":16,"offset":1815},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":1800},"end":{"line":71,"column":16,"offset":1815},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can add a description to an option, which will appear below the option's\nlabel. You can also add detail to an option that shows on the option's the\nbottom right. Both of these are optional per option.","position":{"start":{"line":73,"column":1,"offset":1817},"end":{"line":75,"column":53,"offset":2021},"indent":[1,1]}}],"position":{"start":{"line":73,"column":1,"offset":1817},"end":{"line":75,"column":53,"offset":2021},"indent":[1,1]}},{"type":"jsx","value":"<Canvas>\n  <ExampleWithHooks>\n    {() => {\n      const options = [\n        {\n          value: 1,\n          label: \"Sulaco\",\n          description: \"They mostly come at night, mostly.\",\n          details: \"LV-426\",\n        },\n        { value: 2, label: \"Nostromo\", details: \"LV-426\" },\n        { value: 3, label: \"Serenity\", description: \"I aim to misbehave.\" },\n        { value: 4, label: \"Sleeper Service\" },\n        { value: 5, label: \"Enterprise\" },\n        {\n          value: 6,\n          label: \"Enterprise-D\",\n          description: \"Tea, earl grey, hot.\",\n          details: \"NCC-1701D\",\n        },\n      ];\n      const [value, setValue] = useState();\n      return (\n        <Autocomplete\n          value={value}\n          initialOptions={options}\n          onChange={setValue}\n          getOptions={getOptions}\n          placeholder=\"Search for something\"\n        />\n      );\n      function getOptions(text) {\n        if (text === \"\") {\n          return options;\n        }\n        const filterRegex = new RegExp(text, \"i\");\n        return options.filter(option =>\n          option.heading ? true : option.label.match(filterRegex)\n        );\n      }\n    }}\n  </ExampleWithHooks>\n</Canvas>","position":{"start":{"line":77,"column":1,"offset":2023},"end":{"line":119,"column":10,"offset":3218},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Section headings","position":{"start":{"line":121,"column":4,"offset":3223},"end":{"line":121,"column":20,"offset":3239},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":3220},"end":{"line":121,"column":20,"offset":3239},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"An autocomplete can provide section headings to break up the options.","position":{"start":{"line":123,"column":1,"offset":3241},"end":{"line":123,"column":70,"offset":3310},"indent":[]}}],"position":{"start":{"line":123,"column":1,"offset":3241},"end":{"line":123,"column":70,"offset":3310},"indent":[]}},{"type":"jsx","value":"<Canvas>\n  <ExampleWithHooks>\n    {() => {\n      const options = [\n        {\n          label: \"Ships\",\n          options: [\n            { value: 1, label: \"Sulaco\" },\n            { value: 2, label: \"Nostromo\" },\n            { value: 3, label: \"Serenity\" },\n            { value: 4, label: \"Sleeper Service\" },\n            { value: 5, label: \"Enterprise\" },\n            { value: 6, label: \"Enterprise-D\" },\n          ],\n        },\n        {\n          label: \"Planets\",\n          options: [\n            { value: 7, label: \"Endor\" },\n            { value: 8, label: \"Vulcan\" },\n            { value: 9, label: \"Bespin\" },\n            { value: 10, label: \"Tatooine\" },\n          ],\n        },\n      ];\n      const [value, setValue] = useState();\n      return (\n        <Autocomplete\n          value={value}\n          separators={true}\n          initialOptions={options}\n          onChange={setValue}\n          getOptions={getOptions}\n          placeholder=\"Search for something\"\n        />\n      );\n      function getOptions(text) {\n        const workingOptions = cloneDeep(options);\n        return filterOptions(text, workingOptions);\n      }\n      /**\n       * This is an example of a synchronous filter function.\n       * In reality an api should return this pre-formatted structure.\n       */\n      function filterOptions(text, options = []) {\n        return options.filter(option => {\n          if (option.options) {\n            option.options = filterOptions(text, option.options);\n            return true;\n          }\n          const filterRegex = new RegExp(text, \"i\");\n          return option.label.match(filterRegex);\n        });\n      }\n    }}\n  </ExampleWithHooks>\n</Canvas>","position":{"start":{"line":125,"column":1,"offset":3312},"end":{"line":181,"column":10,"offset":4991},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Kitchen sink","position":{"start":{"line":183,"column":4,"offset":4996},"end":{"line":183,"column":16,"offset":5008},"indent":[]}}],"position":{"start":{"line":183,"column":1,"offset":4993},"end":{"line":183,"column":16,"offset":5008},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This autocomplete uses section headings, details, descriptions and option\nseparators.","position":{"start":{"line":185,"column":1,"offset":5010},"end":{"line":186,"column":12,"offset":5095},"indent":[1]}}],"position":{"start":{"line":185,"column":1,"offset":5010},"end":{"line":186,"column":12,"offset":5095},"indent":[1]}},{"type":"jsx","value":"<Canvas>\n  <ExampleWithHooks>\n    {() => {\n      const options = [\n        {\n          label: \"Ships\",\n          options: [\n            {\n              value: 1,\n              label: \"Sulaco\",\n              description: \"They mostly come at night, mostly.\",\n              details: \"LV-426\",\n            },\n            { value: 2, label: \"Nostromo\", details: \"LV-426\" },\n            { value: 3, label: \"Serenity\", description: \"I aim to misbehave.\" },\n            { value: 4, label: \"Sleeper Service\" },\n            { value: 5, label: \"Enterprise\" },\n            {\n              value: 6,\n              label: \"Enterprise-D\",\n              description: \"Tea, earl grey, hot.\",\n              details: \"NCC-1701D\",\n            },\n          ],\n        },\n        {\n          label: \"Planets\",\n          options: [\n            { value: 7, label: \"Endor\" },\n            { value: 8, label: \"Vulcan\" },\n            { value: 9, label: \"Bespin\" },\n            { value: 10, label: \"Tatooine\" },\n            { value: 11, label: \"Enterprise\" },\n            { value: 12, label: \"Ariel\" },\n          ],\n        },\n      ];\n      const [value, setValue] = useState();\n      return (\n        <Autocomplete\n          value={value}\n          initialOptions={options}\n          onChange={setValue}\n          getOptions={getOptions}\n          size={\"small\"}\n          placeholder=\"Search for something\"\n        />\n      );\n      function getOptions(text) {\n        const workingOptions = cloneDeep(options);\n        return filterOptions(text, workingOptions);\n      }\n      /**\n       * This is an example of a synchronous filter function.\n       * In reality an api should return this pre-formatted structure.\n       */\n      function filterOptions(text, options = []) {\n        return options.filter(option => {\n          if (option.options) {\n            option.options = filterOptions(text, option.options);\n            return true;\n          }\n          const filterRegex = new RegExp(text, \"i\");\n          return option.label.match(filterRegex);\n        });\n      }\n    }}\n  </ExampleWithHooks>\n</Canvas>","position":{"start":{"line":188,"column":1,"offset":5097},"end":{"line":256,"column":10,"offset":7186},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Setting a value","position":{"start":{"line":258,"column":4,"offset":7191},"end":{"line":258,"column":19,"offset":7206},"indent":[]}}],"position":{"start":{"line":258,"column":1,"offset":7188},"end":{"line":258,"column":19,"offset":7206},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can supply a value to ","position":{"start":{"line":260,"column":1,"offset":7208},"end":{"line":260,"column":27,"offset":7234},"indent":[]}},{"type":"inlineCode","value":"Autocomplete","position":{"start":{"line":260,"column":27,"offset":7234},"end":{"line":260,"column":41,"offset":7248},"indent":[]}},{"type":"text","value":" in the form of an active ","position":{"start":{"line":260,"column":41,"offset":7248},"end":{"line":260,"column":67,"offset":7274},"indent":[]}},{"type":"inlineCode","value":"Option","position":{"start":{"line":260,"column":67,"offset":7274},"end":{"line":260,"column":75,"offset":7282},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":260,"column":75,"offset":7282},"end":{"line":260,"column":76,"offset":7283},"indent":[]}}],"position":{"start":{"line":260,"column":1,"offset":7208},"end":{"line":260,"column":76,"offset":7283},"indent":[]}},{"type":"jsx","value":"<Canvas>\n  <ExampleWithHooks>\n    {() => {\n      const options = [\n        { value: 1, label: \"Nostromo\" },\n        { value: 2, label: \"Rodger Young\" },\n        { value: 3, label: \"Serenity\" },\n        { value: 4, label: \"Sleeper Service\" },\n        { value: 5, label: \"Enterprise\" },\n        { value: 6, label: \"Enterprise-D\" },\n      ];\n      const [value, setValue] = useState();\n      return (\n        <>\n          <pre>{JSON.stringify(value, undefined, 2)}</pre>\n          <Autocomplete\n            value={value}\n            initialOptions={[]}\n            onChange={setValue}\n            getOptions={getOptions}\n            placeholder=\"Search for something\"\n          />\n          <Button\n            label=\"Choose the Enterprise\"\n            onClick={() => {\n              setValue(options[4]);\n            }}\n          />\n          <Button\n            label=\"Reset\"\n            onClick={() => {\n              setValue();\n            }}\n          />\n        </>\n      );\n      function getOptions(text) {\n        if (text === \"\") {\n          return options;\n        }\n        const filterRegex = new RegExp(text, \"i\");\n        return options.filter(option => option.label.match(filterRegex));\n      }\n    }}\n  </ExampleWithHooks>\n</Canvas>","position":{"start":{"line":262,"column":1,"offset":7285},"end":{"line":307,"column":10,"offset":8532},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Async requests for options","position":{"start":{"line":309,"column":4,"offset":8537},"end":{"line":309,"column":30,"offset":8563},"indent":[]}}],"position":{"start":{"line":309,"column":1,"offset":8534},"end":{"line":309,"column":30,"offset":8563},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":311,"column":1,"offset":8565},"end":{"line":311,"column":5,"offset":8569},"indent":[]}},{"type":"inlineCode","value":"getOptions","position":{"start":{"line":311,"column":5,"offset":8569},"end":{"line":311,"column":17,"offset":8581},"indent":[]}},{"type":"text","value":" method expected to be async so you can do any desired requests\nusing either promises or ","position":{"start":{"line":311,"column":17,"offset":8581},"end":{"line":312,"column":26,"offset":8670},"indent":[1]}},{"type":"inlineCode","value":"await","position":{"start":{"line":312,"column":26,"offset":8670},"end":{"line":312,"column":33,"offset":8677},"indent":[]}},{"type":"text","value":" in ","position":{"start":{"line":312,"column":33,"offset":8677},"end":{"line":312,"column":37,"offset":8681},"indent":[]}},{"type":"inlineCode","value":"getOptions","position":{"start":{"line":312,"column":37,"offset":8681},"end":{"line":312,"column":49,"offset":8693},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":312,"column":49,"offset":8693},"end":{"line":312,"column":50,"offset":8694},"indent":[]}}],"position":{"start":{"line":311,"column":1,"offset":8565},"end":{"line":312,"column":50,"offset":8694},"indent":[1]}},{"type":"jsx","value":"<Canvas>\n  <ExampleWithHooks>\n    {() => {\n      const options = [\n        { value: 1, label: \"Nostromo\" },\n        { value: 2, label: \"Rodger Young\" },\n        { value: 3, label: \"Serenity\" },\n        { value: 4, label: \"Sleeper Service\" },\n        { value: 5, label: \"Enterprise\" },\n        { value: 6, label: \"Enterprise-D\" },\n      ];\n      const [value, setValue] = useState();\n      return (\n        <Autocomplete\n          value={value}\n          initialOptions={[]}\n          onChange={setValue}\n          getOptions={getOptions}\n          placeholder=\"Search for something\"\n        />\n      );\n      async function getOptions(text) {\n        return new Promise(resolve => {\n          setTimeout(() => {\n            if (text === \"\") {\n              resolve(options);\n            }\n            const filterRegex = new RegExp(text, \"i\");\n            resolve(options.filter(option => option.label.match(filterRegex)));\n          }, 300);\n        });\n      }\n    }}\n  </ExampleWithHooks>\n</Canvas>","position":{"start":{"line":314,"column":1,"offset":8696},"end":{"line":348,"column":10,"offset":9697},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Related components","position":{"start":{"line":350,"column":4,"offset":9702},"end":{"line":350,"column":22,"offset":9720},"indent":[]}}],"position":{"start":{"line":350,"column":1,"offset":9699},"end":{"line":350,"column":22,"offset":9720},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If you want to present a list of predefined options without text input, use a\n","position":{"start":{"line":352,"column":3,"offset":9724},"end":{"line":353,"column":3,"offset":9804},"indent":[3]}},{"type":"link","title":null,"url":"select","children":[{"type":"text","value":"Select","position":{"start":{"line":353,"column":4,"offset":9805},"end":{"line":353,"column":10,"offset":9811},"indent":[]}}],"position":{"start":{"line":353,"column":3,"offset":9804},"end":{"line":353,"column":19,"offset":9820},"indent":[]}},{"type":"text","value":" instead.","position":{"start":{"line":353,"column":19,"offset":9820},"end":{"line":353,"column":28,"offset":9829},"indent":[]}}],"position":{"start":{"line":352,"column":3,"offset":9724},"end":{"line":353,"column":28,"offset":9829},"indent":[3]}}],"position":{"start":{"line":352,"column":1,"offset":9722},"end":{"line":353,"column":28,"offset":9829},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If autocompleted results are not required for the text input, use\n","position":{"start":{"line":354,"column":3,"offset":9832},"end":{"line":355,"column":3,"offset":9900},"indent":[3]}},{"type":"link","title":null,"url":"input-text","children":[{"type":"text","value":"InputText","position":{"start":{"line":355,"column":4,"offset":9901},"end":{"line":355,"column":13,"offset":9910},"indent":[]}}],"position":{"start":{"line":355,"column":3,"offset":9900},"end":{"line":355,"column":26,"offset":9923},"indent":[]}},{"type":"text","value":" instead.","position":{"start":{"line":355,"column":26,"offset":9923},"end":{"line":355,"column":35,"offset":9932},"indent":[]}}],"position":{"start":{"line":354,"column":3,"offset":9832},"end":{"line":355,"column":35,"offset":9932},"indent":[3]}}],"position":{"start":{"line":354,"column":1,"offset":9830},"end":{"line":355,"column":35,"offset":9932},"indent":[1]}}],"position":{"start":{"line":352,"column":1,"offset":9722},"end":{"line":355,"column":35,"offset":9932},"indent":[1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":358,"column":1,"offset":9935},"end":{"line":358,"column":31,"offset":9965},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":358,"column":31,"offset":9965}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { ArgsTable, Canvas, Meta, Story } from \"@storybook/addon-docs\";\nimport { useState } from \"react\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport { ExampleWithHooks } from \"mdxUtils/ExampleWithHooks\";\nimport { Button } from \"@jobber/components/Button\";\nimport { Autocomplete } from \"@jobber/components/Autocomplete\";\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Meta title=\"Components/Autocomplete\" component={Autocomplete} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"autocomplete\"\n    }}>{`Autocomplete`}</h1>\n    <p>{`An autocomplete allows a user to quickly pick a preset value from a larger list\nof possible options.`}</p>\n    <p>{`If the number of available options is smaller consider a `}<a parentName=\"p\" {...{\n        \"href\": \"select\"\n      }}>{`Select`}</a>{`\ninstead.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { Autocomplete } from \"@jobber/components/Autocomplete\";\n`}</code></pre>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"Autocomplete\" args={{\n        initialOptions: [],\n        placeholder: \"Search for something\"\n      }} mdxType=\"Story\">\n    {args => {\n          const options = [{\n            value: 1,\n            label: \"Nostromo\"\n          }, {\n            value: 2,\n            label: \"Rodger Young\"\n          }, {\n            value: 3,\n            label: \"Serenity\"\n          }, {\n            value: 4,\n            label: \"Sleeper Service\"\n          }, {\n            value: 5,\n            label: \"Enterprise\"\n          }, {\n            value: 6,\n            label: \"Enterprise-D\"\n          }];\n          const [value, setValue] = useState();\n          return <Autocomplete {...args} value={value} onChange={setValue} getOptions={getOptions} mdxType=\"Autocomplete\" />;\n\n          function getOptions(text) {\n            if (text === \"\") {\n              return options;\n            }\n\n            const filterRegex = new RegExp(text, \"i\");\n            return options.filter(option => option.label.match(filterRegex));\n          }\n        }}\n  </Story>\n    </Canvas>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <ArgsTable of={Autocomplete} story=\"Autocomplete\" mdxType=\"ArgsTable\" />\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"with-details\"\n    }}>{`With details`}</h2>\n    <p>{`You can add a description to an option, which will appear below the option's\nlabel. You can also add detail to an option that shows on the option's the\nbottom right. Both of these are optional per option.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <ExampleWithHooks mdxType=\"ExampleWithHooks\">\n    {() => {\n          const options = [{\n            value: 1,\n            label: \"Sulaco\",\n            description: \"They mostly come at night, mostly.\",\n            details: \"LV-426\"\n          }, {\n            value: 2,\n            label: \"Nostromo\",\n            details: \"LV-426\"\n          }, {\n            value: 3,\n            label: \"Serenity\",\n            description: \"I aim to misbehave.\"\n          }, {\n            value: 4,\n            label: \"Sleeper Service\"\n          }, {\n            value: 5,\n            label: \"Enterprise\"\n          }, {\n            value: 6,\n            label: \"Enterprise-D\",\n            description: \"Tea, earl grey, hot.\",\n            details: \"NCC-1701D\"\n          }];\n          const [value, setValue] = useState();\n          return <Autocomplete value={value} initialOptions={options} onChange={setValue} getOptions={getOptions} placeholder=\"Search for something\" mdxType=\"Autocomplete\" />;\n\n          function getOptions(text) {\n            if (text === \"\") {\n              return options;\n            }\n\n            const filterRegex = new RegExp(text, \"i\");\n            return options.filter(option => option.heading ? true : option.label.match(filterRegex));\n          }\n        }}\n  </ExampleWithHooks>\n    </Canvas>\n    <h2 {...{\n      \"id\": \"section-headings\"\n    }}>{`Section headings`}</h2>\n    <p>{`An autocomplete can provide section headings to break up the options.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <ExampleWithHooks mdxType=\"ExampleWithHooks\">\n    {() => {\n          const options = [{\n            label: \"Ships\",\n            options: [{\n              value: 1,\n              label: \"Sulaco\"\n            }, {\n              value: 2,\n              label: \"Nostromo\"\n            }, {\n              value: 3,\n              label: \"Serenity\"\n            }, {\n              value: 4,\n              label: \"Sleeper Service\"\n            }, {\n              value: 5,\n              label: \"Enterprise\"\n            }, {\n              value: 6,\n              label: \"Enterprise-D\"\n            }]\n          }, {\n            label: \"Planets\",\n            options: [{\n              value: 7,\n              label: \"Endor\"\n            }, {\n              value: 8,\n              label: \"Vulcan\"\n            }, {\n              value: 9,\n              label: \"Bespin\"\n            }, {\n              value: 10,\n              label: \"Tatooine\"\n            }]\n          }];\n          const [value, setValue] = useState();\n          return <Autocomplete value={value} separators={true} initialOptions={options} onChange={setValue} getOptions={getOptions} placeholder=\"Search for something\" mdxType=\"Autocomplete\" />;\n\n          function getOptions(text) {\n            const workingOptions = cloneDeep(options);\n            return filterOptions(text, workingOptions);\n          }\n          /**\n           * This is an example of a synchronous filter function.\n           * In reality an api should return this pre-formatted structure.\n           */\n\n\n          function filterOptions(text, options = []) {\n            return options.filter(option => {\n              if (option.options) {\n                option.options = filterOptions(text, option.options);\n                return true;\n              }\n\n              const filterRegex = new RegExp(text, \"i\");\n              return option.label.match(filterRegex);\n            });\n          }\n        }}\n  </ExampleWithHooks>\n    </Canvas>\n    <h2 {...{\n      \"id\": \"kitchen-sink\"\n    }}>{`Kitchen sink`}</h2>\n    <p>{`This autocomplete uses section headings, details, descriptions and option\nseparators.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <ExampleWithHooks mdxType=\"ExampleWithHooks\">\n    {() => {\n          const options = [{\n            label: \"Ships\",\n            options: [{\n              value: 1,\n              label: \"Sulaco\",\n              description: \"They mostly come at night, mostly.\",\n              details: \"LV-426\"\n            }, {\n              value: 2,\n              label: \"Nostromo\",\n              details: \"LV-426\"\n            }, {\n              value: 3,\n              label: \"Serenity\",\n              description: \"I aim to misbehave.\"\n            }, {\n              value: 4,\n              label: \"Sleeper Service\"\n            }, {\n              value: 5,\n              label: \"Enterprise\"\n            }, {\n              value: 6,\n              label: \"Enterprise-D\",\n              description: \"Tea, earl grey, hot.\",\n              details: \"NCC-1701D\"\n            }]\n          }, {\n            label: \"Planets\",\n            options: [{\n              value: 7,\n              label: \"Endor\"\n            }, {\n              value: 8,\n              label: \"Vulcan\"\n            }, {\n              value: 9,\n              label: \"Bespin\"\n            }, {\n              value: 10,\n              label: \"Tatooine\"\n            }, {\n              value: 11,\n              label: \"Enterprise\"\n            }, {\n              value: 12,\n              label: \"Ariel\"\n            }]\n          }];\n          const [value, setValue] = useState();\n          return <Autocomplete value={value} initialOptions={options} onChange={setValue} getOptions={getOptions} size={\"small\"} placeholder=\"Search for something\" mdxType=\"Autocomplete\" />;\n\n          function getOptions(text) {\n            const workingOptions = cloneDeep(options);\n            return filterOptions(text, workingOptions);\n          }\n          /**\n           * This is an example of a synchronous filter function.\n           * In reality an api should return this pre-formatted structure.\n           */\n\n\n          function filterOptions(text, options = []) {\n            return options.filter(option => {\n              if (option.options) {\n                option.options = filterOptions(text, option.options);\n                return true;\n              }\n\n              const filterRegex = new RegExp(text, \"i\");\n              return option.label.match(filterRegex);\n            });\n          }\n        }}\n  </ExampleWithHooks>\n    </Canvas>\n    <h2 {...{\n      \"id\": \"setting-a-value\"\n    }}>{`Setting a value`}</h2>\n    <p>{`You can supply a value to `}<inlineCode parentName=\"p\">{`Autocomplete`}</inlineCode>{` in the form of an active `}<inlineCode parentName=\"p\">{`Option`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <ExampleWithHooks mdxType=\"ExampleWithHooks\">\n    {() => {\n          const options = [{\n            value: 1,\n            label: \"Nostromo\"\n          }, {\n            value: 2,\n            label: \"Rodger Young\"\n          }, {\n            value: 3,\n            label: \"Serenity\"\n          }, {\n            value: 4,\n            label: \"Sleeper Service\"\n          }, {\n            value: 5,\n            label: \"Enterprise\"\n          }, {\n            value: 6,\n            label: \"Enterprise-D\"\n          }];\n          const [value, setValue] = useState();\n          return <>\n          <pre>{JSON.stringify(value, undefined, 2)}</pre>\n          <Autocomplete value={value} initialOptions={[]} onChange={setValue} getOptions={getOptions} placeholder=\"Search for something\" mdxType=\"Autocomplete\" />\n          <Button label=\"Choose the Enterprise\" onClick={() => {\n              setValue(options[4]);\n            }} mdxType=\"Button\" />\n          <Button label=\"Reset\" onClick={() => {\n              setValue();\n            }} mdxType=\"Button\" />\n        </>;\n\n          function getOptions(text) {\n            if (text === \"\") {\n              return options;\n            }\n\n            const filterRegex = new RegExp(text, \"i\");\n            return options.filter(option => option.label.match(filterRegex));\n          }\n        }}\n  </ExampleWithHooks>\n    </Canvas>\n    <h2 {...{\n      \"id\": \"async-requests-for-options\"\n    }}>{`Async requests for options`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`getOptions`}</inlineCode>{` method expected to be async so you can do any desired requests\nusing either promises or `}<inlineCode parentName=\"p\">{`await`}</inlineCode>{` in `}<inlineCode parentName=\"p\">{`getOptions`}</inlineCode>{`.`}</p>\n    <Canvas mdxType=\"Canvas\">\n  <ExampleWithHooks mdxType=\"ExampleWithHooks\">\n    {() => {\n          const options = [{\n            value: 1,\n            label: \"Nostromo\"\n          }, {\n            value: 2,\n            label: \"Rodger Young\"\n          }, {\n            value: 3,\n            label: \"Serenity\"\n          }, {\n            value: 4,\n            label: \"Sleeper Service\"\n          }, {\n            value: 5,\n            label: \"Enterprise\"\n          }, {\n            value: 6,\n            label: \"Enterprise-D\"\n          }];\n          const [value, setValue] = useState();\n          return <Autocomplete value={value} initialOptions={[]} onChange={setValue} getOptions={getOptions} placeholder=\"Search for something\" mdxType=\"Autocomplete\" />;\n\n          async function getOptions(text) {\n            return new Promise(resolve => {\n              setTimeout(() => {\n                if (text === \"\") {\n                  resolve(options);\n                }\n\n                const filterRegex = new RegExp(text, \"i\");\n                resolve(options.filter(option => option.label.match(filterRegex)));\n              }, 300);\n            });\n          }\n        }}\n  </ExampleWithHooks>\n    </Canvas>\n    <h2 {...{\n      \"id\": \"related-components\"\n    }}>{`Related components`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`If you want to present a list of predefined options without text input, use a\n`}<a parentName=\"li\" {...{\n          \"href\": \"select\"\n        }}>{`Select`}</a>{` instead.`}</li>\n      <li parentName=\"ul\">{`If autocompleted results are not required for the text input, use\n`}<a parentName=\"li\" {...{\n          \"href\": \"input-text\"\n        }}>{`InputText`}</a>{` instead.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}
{"expireTime":9007200931831331000,"key":"gatsby-plugin-mdx-entire-payload-6df16c94a1cf5730899c587bfd6cfd6a-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":114,"offset":115},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":117},"end":{"line":5,"column":29,"offset":145},"indent":[]}},{"type":"import","value":"import { useState } from \"react\";\nimport { Playground, Props } from \"docz\";\nimport { ComponentStatus } from \"@jobber/docx\";\nimport { Button } from \"../Button\";\nimport { LightBox } from \".\";","position":{"start":{"line":8,"column":1,"offset":148},"end":{"line":12,"column":30,"offset":337},"indent":[1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Light Box","position":{"start":{"line":14,"column":3,"offset":341},"end":{"line":14,"column":12,"offset":350},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":339},"end":{"line":14,"column":12,"offset":350},"indent":[]}},{"type":"jsx","value":"<ComponentStatus stage=\"pre\" responsive=\"no\" accessible=\"no\" />","position":{"start":{"line":16,"column":1,"offset":352},"end":{"line":16,"column":64,"offset":415},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"LightBox is a component designed to display an array of images to the user. A\nuser clicks on a control and is shown a carousel style presentation of the\ndefined images.","position":{"start":{"line":18,"column":1,"offset":417},"end":{"line":20,"column":16,"offset":585},"indent":[1,1]}}],"position":{"start":{"line":18,"column":1,"offset":417},"end":{"line":20,"column":16,"offset":585},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This component is a wrapper of the frontend-collective's react-image-lightbox\nthird party library. This component is a wrapper of the\n","position":{"start":{"line":22,"column":1,"offset":587},"end":{"line":24,"column":1,"offset":721},"indent":[1,1]}},{"type":"link","title":null,"url":"https://github.com/frontend-collective/react-image-lightbox","children":[{"type":"text","value":"frontend-collective's react-image-lightbox","position":{"start":{"line":24,"column":2,"offset":722},"end":{"line":24,"column":44,"offset":764},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":721},"end":{"line":24,"column":106,"offset":826},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":24,"column":106,"offset":826},"end":{"line":24,"column":107,"offset":827},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":587},"end":{"line":24,"column":107,"offset":827},"indent":[1,1]}},{"type":"code","lang":"ts","meta":null,"value":"import { LightBox } from \"@jobber/components/LightBox\";","position":{"start":{"line":26,"column":1,"offset":829},"end":{"line":28,"column":4,"offset":894},"indent":[1,1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const [open, isOpen] = useState(false);\n    return (\n      <>\n        <Button label=\"ðŸ˜ˆ Click me!\" onClick={() => isOpen(true)} />\n        <LightBox\n          open={open}\n          images={[\n            {\n              title: \"ðŸ˜ƒ Happy Face\",\n              url: \"https://i.imgur.com/6Jcfgnp.jpg\",\n              caption: \"This is a happy face\",\n            },\n            {\n              title: \"ðŸ˜®\",\n              url: \"https://i.imgur.com/OsLxYkT.jpg\",\n              caption: \"Suprised face\",\n            },\n            {\n              url: \"https://i.imgur.com/uigfzs5.jpg\",\n            },\n          ]}\n          onRequestClose={() => isOpen(false)}\n        />\n      </>\n    );\n  }}\n</Playground>","position":{"start":{"line":30,"column":1,"offset":896},"end":{"line":58,"column":14,"offset":1622},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Design & usage guidelines","position":{"start":{"line":60,"column":4,"offset":1627},"end":{"line":60,"column":29,"offset":1652},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":1624},"end":{"line":60,"column":29,"offset":1652},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A lightbox's primary goal is to allow users to see a higher resolution view of\nimages contained within the page they're viewing. The application of a lightbox\nfacilitates smaller thumbnail images to be used in an interface without\ncompromising the detail within.","position":{"start":{"line":62,"column":1,"offset":1654},"end":{"line":65,"column":32,"offset":1916},"indent":[1,1,1]}}],"position":{"start":{"line":62,"column":1,"offset":1654},"end":{"line":65,"column":32,"offset":1916},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The lightbox should only be used when displaying an image at a greater scale is\nthe primary function of opening it. Additional content types would be better\nsuited by using a dialogue or alternative method.","position":{"start":{"line":67,"column":1,"offset":1918},"end":{"line":69,"column":50,"offset":2124},"indent":[1,1]}}],"position":{"start":{"line":67,"column":1,"offset":1918},"end":{"line":69,"column":50,"offset":2124},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Props","position":{"start":{"line":71,"column":4,"offset":2129},"end":{"line":71,"column":9,"offset":2134},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":2126},"end":{"line":71,"column":9,"offset":2134},"indent":[]}},{"type":"jsx","value":"<Props of={LightBox} />","position":{"start":{"line":73,"column":1,"offset":2136},"end":{"line":73,"column":24,"offset":2159},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"onRequestClose","position":{"start":{"line":75,"column":5,"offset":2165},"end":{"line":75,"column":19,"offset":2179},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":2161},"end":{"line":75,"column":19,"offset":2179},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This function receives the index of the last image the user viewed before\nclosing the LightBox component with the key lastPosition. This might we useful\nif we want to return information about the final state when closed (e.g. for\nanalytics).","position":{"start":{"line":77,"column":1,"offset":2181},"end":{"line":80,"column":12,"offset":2422},"indent":[1,1,1]}}],"position":{"start":{"line":77,"column":1,"offset":2181},"end":{"line":80,"column":12,"offset":2422},"indent":[1,1,1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const [open, isOpen] = useState(false);\n    return (\n      <>\n        <Button label=\"ðŸ˜ˆ Click me!\" onClick={() => isOpen(true)} />\n        <LightBox\n          open={open}\n          images={[\n            {\n              title: \"ðŸ˜ƒ Happy Face\",\n              url: \"https://i.imgur.com/6Jcfgnp.jpg\",\n              caption: \"This is a happy face\",\n            },\n            {\n              title: \"ðŸ˜®\",\n              url: \"https://i.imgur.com/OsLxYkT.jpg\",\n              caption: \"Suprised face\",\n            },\n            {\n              url: \"https://i.imgur.com/uigfzs5.jpg\",\n            },\n          ]}\n          onRequestClose={options => {\n            console.log(\n              \"The user was saw this image last - \",\n              options.lastPosition\n            );\n            isOpen(false);\n          }}\n        />\n      </>\n    );\n  }}\n</Playground>","position":{"start":{"line":82,"column":1,"offset":2424},"end":{"line":116,"column":14,"offset":3310},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":119,"column":1,"offset":3313},"end":{"line":119,"column":31,"offset":3343},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":119,"column":31,"offset":3343}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { useState } from \"react\";\nimport { Playground, Props } from \"docz\";\nimport { ComponentStatus } from \"@jobber/docx\";\nimport { Button } from \"../Button\";\nimport { LightBox } from \".\";\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"light-box\"\n    }}>{`Light Box`}</h1>\n    <ComponentStatus stage=\"pre\" responsive=\"no\" accessible=\"no\" mdxType=\"ComponentStatus\" />\n    <p>{`LightBox is a component designed to display an array of images to the user. A\nuser clicks on a control and is shown a carousel style presentation of the\ndefined images.`}</p>\n    <p>{`This component is a wrapper of the frontend-collective's react-image-lightbox\nthird party library. This component is a wrapper of the\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/frontend-collective/react-image-lightbox\"\n      }}>{`frontend-collective's react-image-lightbox`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { LightBox } from \"@jobber/components/LightBox\";\n`}</code></pre>\n    <Playground __position={1} __code={'() => {\\n  const [open, isOpen] = useState(false)\\n  return (\\n    <>\\n      <Button label=\\\"ðŸ˜ˆ Click me!\\\" onClick={() => isOpen(true)} />\\n      <LightBox\\n        open={open}\\n        images={[\\n          {\\n            title: \\'ðŸ˜ƒ Happy Face\\',\\n            url: \\'https://i.imgur.com/6Jcfgnp.jpg\\',\\n            caption: \\'This is a happy face\\',\\n          },\\n          {\\n            title: \\'ðŸ˜®\\',\\n            url: \\'https://i.imgur.com/OsLxYkT.jpg\\',\\n            caption: \\'Suprised face\\',\\n          },\\n          {\\n            url: \\'https://i.imgur.com/uigfzs5.jpg\\',\\n          },\\n        ]}\\n        onRequestClose={() => isOpen(false)}\\n      />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      Props,\n      ComponentStatus,\n      Button,\n      LightBox,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [open, isOpen] = useState(false);\n        return <>\n        <Button label=\"ðŸ˜ˆ Click me!\" onClick={() => isOpen(true)} mdxType=\"Button\" />\n        <LightBox open={open} images={[{\n            title: \"ðŸ˜ƒ Happy Face\",\n            url: \"https://i.imgur.com/6Jcfgnp.jpg\",\n            caption: \"This is a happy face\"\n          }, {\n            title: \"ðŸ˜®\",\n            url: \"https://i.imgur.com/OsLxYkT.jpg\",\n            caption: \"Suprised face\"\n          }, {\n            url: \"https://i.imgur.com/uigfzs5.jpg\"\n          }]} onRequestClose={() => isOpen(false)} mdxType=\"LightBox\" />\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"design--usage-guidelines\"\n    }}>{`Design & usage guidelines`}</h2>\n    <p>{`A lightbox's primary goal is to allow users to see a higher resolution view of\nimages contained within the page they're viewing. The application of a lightbox\nfacilitates smaller thumbnail images to be used in an interface without\ncompromising the detail within.`}</p>\n    <p>{`The lightbox should only be used when displaying an image at a greater scale is\nthe primary function of opening it. Additional content types would be better\nsuited by using a dialogue or alternative method.`}</p>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={LightBox} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"onrequestclose\"\n    }}>{`onRequestClose`}</h3>\n    <p>{`This function receives the index of the last image the user viewed before\nclosing the LightBox component with the key lastPosition. This might we useful\nif we want to return information about the final state when closed (e.g. for\nanalytics).`}</p>\n    <Playground __position={3} __code={'() => {\\n  const [open, isOpen] = useState(false)\\n  return (\\n    <>\\n      <Button label=\\\"ðŸ˜ˆ Click me!\\\" onClick={() => isOpen(true)} />\\n      <LightBox\\n        open={open}\\n        images={[\\n          {\\n            title: \\'ðŸ˜ƒ Happy Face\\',\\n            url: \\'https://i.imgur.com/6Jcfgnp.jpg\\',\\n            caption: \\'This is a happy face\\',\\n          },\\n          {\\n            title: \\'ðŸ˜®\\',\\n            url: \\'https://i.imgur.com/OsLxYkT.jpg\\',\\n            caption: \\'Suprised face\\',\\n          },\\n          {\\n            url: \\'https://i.imgur.com/uigfzs5.jpg\\',\\n          },\\n        ]}\\n        onRequestClose={options => {\\n          console.log(\\n            \\'The user was saw this image last - \\',\\n            options.lastPosition,\\n          )\\n          isOpen(false)\\n        }}\\n      />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      Props,\n      ComponentStatus,\n      Button,\n      LightBox,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [open, isOpen] = useState(false);\n        return <>\n        <Button label=\"ðŸ˜ˆ Click me!\" onClick={() => isOpen(true)} mdxType=\"Button\" />\n        <LightBox open={open} images={[{\n            title: \"ðŸ˜ƒ Happy Face\",\n            url: \"https://i.imgur.com/6Jcfgnp.jpg\",\n            caption: \"This is a happy face\"\n          }, {\n            title: \"ðŸ˜®\",\n            url: \"https://i.imgur.com/OsLxYkT.jpg\",\n            caption: \"Suprised face\"\n          }, {\n            url: \"https://i.imgur.com/uigfzs5.jpg\"\n          }]} onRequestClose={options => {\n            console.log(\"The user was saw this image last - \", options.lastPosition);\n            isOpen(false);\n          }} mdxType=\"LightBox\" />\n      </>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}
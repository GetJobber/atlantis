{"expireTime":9007200931831329000,"key":"gatsby-plugin-mdx-entire-payload-6fc45b98834ed7b9f6ccb6e38d46f605-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":114,"offset":115},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":117},"end":{"line":5,"column":29,"offset":145},"indent":[]}},{"type":"import","value":"import { Playground } from \"docz\";","position":{"start":{"line":8,"column":1,"offset":148},"end":{"line":8,"column":35,"offset":182},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Frontend Styleguide","position":{"start":{"line":10,"column":3,"offset":186},"end":{"line":10,"column":22,"offset":205},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":184},"end":{"line":10,"column":22,"offset":205},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Purpose","position":{"start":{"line":12,"column":4,"offset":210},"end":{"line":12,"column":11,"offset":217},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":207},"end":{"line":12,"column":11,"offset":217},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Our goal with Typescript and React code is to automate as much style guidance as\nwe can. To that end this guide serves to document conventions that we can't (or\nhaven't yet been able to) automate. Automation is always preferred to adding a\nguidance here.","position":{"start":{"line":14,"column":1,"offset":219},"end":{"line":17,"column":15,"offset":473},"indent":[1,1,1]}}],"position":{"start":{"line":14,"column":1,"offset":219},"end":{"line":17,"column":15,"offset":473},"indent":[1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":19,"column":1,"offset":475},"end":{"line":19,"column":4,"offset":478},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Property naming conventions","position":{"start":{"line":21,"column":4,"offset":483},"end":{"line":21,"column":31,"offset":510},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":480},"end":{"line":21,"column":31,"offset":510},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Consider common terminology across components and design foundations when naming\nproperties. As Atlantis is a system, end users should expect similar-behaving\nproperties to have similar names across the system. For example...","position":{"start":{"line":23,"column":1,"offset":512},"end":{"line":25,"column":67,"offset":737},"indent":[1,1]}}],"position":{"start":{"line":23,"column":1,"offset":512},"end":{"line":25,"column":67,"offset":737},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Base vs \"Default\" or \"Medium\" for setting the default option in a range","position":{"start":{"line":27,"column":5,"offset":743},"end":{"line":27,"column":76,"offset":814},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":739},"end":{"line":27,"column":76,"offset":814},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We use ","position":{"start":{"line":29,"column":1,"offset":816},"end":{"line":29,"column":8,"offset":823},"indent":[]}},{"type":"inlineCode","value":"base","position":{"start":{"line":29,"column":8,"offset":823},"end":{"line":29,"column":14,"offset":829},"indent":[]}},{"type":"text","value":" as our default whenever possible when a property has a set range\nof outcomes. This can be seen in..","position":{"start":{"line":29,"column":14,"offset":829},"end":{"line":30,"column":35,"offset":929},"indent":[1]}}],"position":{"start":{"line":29,"column":1,"offset":816},"end":{"line":30,"column":35,"offset":929},"indent":[1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"the ","position":{"start":{"line":32,"column":3,"offset":933},"end":{"line":32,"column":7,"offset":937},"indent":[]}},{"type":"inlineCode","value":"size","position":{"start":{"line":32,"column":7,"offset":937},"end":{"line":32,"column":13,"offset":943},"indent":[]}},{"type":"text","value":" properties of ","position":{"start":{"line":32,"column":13,"offset":943},"end":{"line":32,"column":28,"offset":958},"indent":[]}},{"type":"link","title":null,"url":"/components/Button","children":[{"type":"text","value":"Button","position":{"start":{"line":32,"column":29,"offset":959},"end":{"line":32,"column":35,"offset":965},"indent":[]}}],"position":{"start":{"line":32,"column":28,"offset":958},"end":{"line":32,"column":56,"offset":986},"indent":[]}},{"type":"text","value":",\n","position":{"start":{"line":32,"column":56,"offset":986},"end":{"line":33,"column":3,"offset":990},"indent":[3]}},{"type":"link","title":null,"url":"/components/avatar","children":[{"type":"text","value":"Avatar","position":{"start":{"line":33,"column":4,"offset":991},"end":{"line":33,"column":10,"offset":997},"indent":[]}}],"position":{"start":{"line":33,"column":3,"offset":990},"end":{"line":33,"column":31,"offset":1018},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":33,"column":31,"offset":1018},"end":{"line":33,"column":33,"offset":1020},"indent":[]}},{"type":"link","title":null,"url":"/components/input-text","children":[{"type":"text","value":"InputText","position":{"start":{"line":33,"column":34,"offset":1021},"end":{"line":33,"column":43,"offset":1030},"indent":[]}}],"position":{"start":{"line":33,"column":33,"offset":1020},"end":{"line":33,"column":68,"offset":1055},"indent":[]}},{"type":"text","value":",\n","position":{"start":{"line":33,"column":68,"offset":1055},"end":{"line":34,"column":3,"offset":1059},"indent":[3]}},{"type":"link","title":null,"url":"/packages-components-src-text-text","children":[{"type":"text","value":"Text","position":{"start":{"line":34,"column":4,"offset":1060},"end":{"line":34,"column":8,"offset":1064},"indent":[]}}],"position":{"start":{"line":34,"column":3,"offset":1059},"end":{"line":34,"column":45,"offset":1101},"indent":[]}},{"type":"text","value":",\n","position":{"start":{"line":34,"column":45,"offset":1101},"end":{"line":35,"column":3,"offset":1105},"indent":[3]}},{"type":"link","title":null,"url":"/components/progress-bar","children":[{"type":"text","value":"ProgressBar","position":{"start":{"line":35,"column":4,"offset":1106},"end":{"line":35,"column":15,"offset":1117},"indent":[]}}],"position":{"start":{"line":35,"column":3,"offset":1105},"end":{"line":35,"column":42,"offset":1144},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":35,"column":42,"offset":1144},"end":{"line":35,"column":44,"offset":1146},"indent":[]}},{"type":"link","title":null,"url":"/components/spinner","children":[{"type":"text","value":"Spinner","position":{"start":{"line":35,"column":45,"offset":1147},"end":{"line":35,"column":52,"offset":1154},"indent":[]}}],"position":{"start":{"line":35,"column":44,"offset":1146},"end":{"line":35,"column":74,"offset":1176},"indent":[]}},{"type":"text","value":", etc;","position":{"start":{"line":35,"column":74,"offset":1176},"end":{"line":35,"column":80,"offset":1182},"indent":[]}}],"position":{"start":{"line":32,"column":3,"offset":933},"end":{"line":35,"column":80,"offset":1182},"indent":[3,3,3]}}],"position":{"start":{"line":32,"column":1,"offset":931},"end":{"line":35,"column":80,"offset":1182},"indent":[1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"maxLines","position":{"start":{"line":36,"column":3,"offset":1185},"end":{"line":36,"column":13,"offset":1195},"indent":[]}},{"type":"text","value":" of ","position":{"start":{"line":36,"column":13,"offset":1195},"end":{"line":36,"column":17,"offset":1199},"indent":[]}},{"type":"link","title":null,"url":"/packages-components-src-text-text","children":[{"type":"text","value":"Text","position":{"start":{"line":36,"column":18,"offset":1200},"end":{"line":36,"column":22,"offset":1204},"indent":[]}}],"position":{"start":{"line":36,"column":17,"offset":1199},"end":{"line":36,"column":59,"offset":1241},"indent":[]}}],"position":{"start":{"line":36,"column":3,"offset":1185},"end":{"line":36,"column":59,"offset":1241},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1183},"end":{"line":36,"column":59,"offset":1241},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"values of ","position":{"start":{"line":37,"column":3,"offset":1244},"end":{"line":37,"column":13,"offset":1254},"indent":[]}},{"type":"link","title":null,"url":"/elevation","children":[{"type":"text","value":"Shadow","position":{"start":{"line":37,"column":14,"offset":1255},"end":{"line":37,"column":20,"offset":1261},"indent":[]}}],"position":{"start":{"line":37,"column":13,"offset":1254},"end":{"line":37,"column":33,"offset":1274},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":37,"column":33,"offset":1274},"end":{"line":37,"column":35,"offset":1276},"indent":[]}},{"type":"link","title":null,"url":"/space","children":[{"type":"text","value":"Spacing","position":{"start":{"line":37,"column":36,"offset":1277},"end":{"line":37,"column":43,"offset":1284},"indent":[]}}],"position":{"start":{"line":37,"column":35,"offset":1276},"end":{"line":37,"column":52,"offset":1293},"indent":[]}},{"type":"text","value":",\n","position":{"start":{"line":37,"column":52,"offset":1293},"end":{"line":38,"column":3,"offset":1297},"indent":[3]}},{"type":"link","title":null,"url":"/border-radius","children":[{"type":"text","value":"Border Radius","position":{"start":{"line":38,"column":4,"offset":1298},"end":{"line":38,"column":17,"offset":1311},"indent":[]}}],"position":{"start":{"line":38,"column":3,"offset":1297},"end":{"line":38,"column":34,"offset":1328},"indent":[]}},{"type":"text","value":" design tokens","position":{"start":{"line":38,"column":34,"offset":1328},"end":{"line":38,"column":48,"offset":1342},"indent":[]}}],"position":{"start":{"line":37,"column":3,"offset":1244},"end":{"line":38,"column":48,"offset":1342},"indent":[3]}}],"position":{"start":{"line":37,"column":1,"offset":1242},"end":{"line":38,"column":48,"offset":1342},"indent":[1]}}],"position":{"start":{"line":32,"column":1,"offset":931},"end":{"line":38,"column":48,"offset":1342},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This allows us to set an expectation of the base (or most common) use case when\na prop is in action.","position":{"start":{"line":40,"column":1,"offset":1344},"end":{"line":41,"column":21,"offset":1444},"indent":[1]}}],"position":{"start":{"line":40,"column":1,"offset":1344},"end":{"line":41,"column":21,"offset":1444},"indent":[1]}},{"type":"thematicBreak","position":{"start":{"line":43,"column":1,"offset":1446},"end":{"line":43,"column":4,"offset":1449},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Open and closed states","position":{"start":{"line":45,"column":5,"offset":1455},"end":{"line":45,"column":27,"offset":1477},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1451},"end":{"line":45,"column":27,"offset":1477},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If a component has ","position":{"start":{"line":47,"column":1,"offset":1479},"end":{"line":47,"column":20,"offset":1498},"indent":[]}},{"type":"inlineCode","value":"open","position":{"start":{"line":47,"column":20,"offset":1498},"end":{"line":47,"column":26,"offset":1504},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":47,"column":26,"offset":1504},"end":{"line":47,"column":31,"offset":1509},"indent":[]}},{"type":"inlineCode","value":"closed","position":{"start":{"line":47,"column":31,"offset":1509},"end":{"line":47,"column":39,"offset":1517},"indent":[]}},{"type":"text","value":" states, use a boolean property named\n","position":{"start":{"line":47,"column":39,"offset":1517},"end":{"line":48,"column":1,"offset":1555},"indent":[1]}},{"type":"inlineCode","value":"open","position":{"start":{"line":48,"column":1,"offset":1555},"end":{"line":48,"column":7,"offset":1561},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":48,"column":7,"offset":1561},"end":{"line":48,"column":8,"offset":1562},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":1479},"end":{"line":48,"column":8,"offset":1562},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"This can be seen in ","position":{"start":{"line":50,"column":1,"offset":1564},"end":{"line":50,"column":21,"offset":1584},"indent":[]}},{"type":"link","title":null,"url":"/components/modal","children":[{"type":"text","value":"Modal","position":{"start":{"line":50,"column":22,"offset":1585},"end":{"line":50,"column":27,"offset":1590},"indent":[]}}],"position":{"start":{"line":50,"column":21,"offset":1584},"end":{"line":50,"column":47,"offset":1610},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":50,"column":47,"offset":1610},"end":{"line":50,"column":49,"offset":1612},"indent":[]}},{"type":"link","title":null,"url":"/components/drawer","children":[{"type":"text","value":"Drawer","position":{"start":{"line":50,"column":50,"offset":1613},"end":{"line":50,"column":56,"offset":1619},"indent":[]}}],"position":{"start":{"line":50,"column":49,"offset":1612},"end":{"line":50,"column":77,"offset":1640},"indent":[]}},{"type":"text","value":",\nand ","position":{"start":{"line":50,"column":77,"offset":1640},"end":{"line":51,"column":5,"offset":1646},"indent":[1]}},{"type":"link","title":null,"url":"/components/popover","children":[{"type":"text","value":"Popover","position":{"start":{"line":51,"column":6,"offset":1647},"end":{"line":51,"column":13,"offset":1654},"indent":[]}}],"position":{"start":{"line":51,"column":5,"offset":1646},"end":{"line":51,"column":35,"offset":1676},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":51,"column":35,"offset":1676},"end":{"line":51,"column":36,"offset":1677},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":1564},"end":{"line":51,"column":36,"offset":1677},"indent":[1]}},{"type":"thematicBreak","position":{"start":{"line":53,"column":1,"offset":1679},"end":{"line":53,"column":4,"offset":1682},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Typescript","position":{"start":{"line":55,"column":4,"offset":1687},"end":{"line":55,"column":14,"offset":1697},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":1684},"end":{"line":55,"column":14,"offset":1697},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Linter Exceptions","position":{"start":{"line":57,"column":5,"offset":1703},"end":{"line":57,"column":22,"offset":1720},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":1699},"end":{"line":57,"column":22,"offset":1720},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"While we should strive to conform to our set linter rules, if for some reason\nyou are unable to you should turn them off for the single line where the\nexception is required.","position":{"start":{"line":59,"column":1,"offset":1722},"end":{"line":61,"column":23,"offset":1895},"indent":[1,1]}}],"position":{"start":{"line":59,"column":1,"offset":1722},"end":{"line":61,"column":23,"offset":1895},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You should also leave a comment immediately above the exception explaining why\nit is necessary.","position":{"start":{"line":63,"column":1,"offset":1897},"end":{"line":64,"column":17,"offset":1992},"indent":[1]}}],"position":{"start":{"line":63,"column":1,"offset":1897},"end":{"line":64,"column":17,"offset":1992},"indent":[1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"✅ Do","position":{"start":{"line":66,"column":6,"offset":1999},"end":{"line":66,"column":10,"offset":2003},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":1994},"end":{"line":66,"column":10,"offset":2003},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"// Pending: https://github.com/donavon/use-event-listener/pull/12\n// The types in useEventListener mistakenly require a SyntheticEvent for the passed generic.\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n//@ts-ignore\nuseEventListener<KeyboardEvent>(\"keydown\", (event: KeyboardEvent) => {","position":{"start":{"line":68,"column":1,"offset":2005},"end":{"line":74,"column":4,"offset":2318},"indent":[1,1,1,1,1,1]}},{"type":"code","lang":"ts","meta":null,"value":"// Library requires fetching its CSS.\n// eslint-disable-next-line import/no-internal-modules\nimport \"react-image-lightbox/style.css\";","position":{"start":{"line":76,"column":1,"offset":2320},"end":{"line":80,"column":4,"offset":2463},"indent":[1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"❌ Don't","position":{"start":{"line":82,"column":6,"offset":2470},"end":{"line":82,"column":13,"offset":2477},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":2465},"end":{"line":82,"column":13,"offset":2477},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Missing rationale for disabling rule.","position":{"start":{"line":84,"column":1,"offset":2479},"end":{"line":84,"column":38,"offset":2516},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":2479},"end":{"line":84,"column":38,"offset":2516},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"// eslint-disable-next-line max-statements\nfunction MyBigComponent() {","position":{"start":{"line":86,"column":1,"offset":2518},"end":{"line":89,"column":4,"offset":2598},"indent":[1,1,1]}},{"type":"code","lang":"ts","meta":null,"value":"const { given, expect: expectation, serverRates } = assertion;\n// eslint-disable-next-line jest/valid-describe\ndescribe(`given ${given}`, () => {","position":{"start":{"line":91,"column":1,"offset":2600},"end":{"line":95,"column":4,"offset":2755},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Missing rationale and disabling rules for a whole file.","position":{"start":{"line":97,"column":1,"offset":2757},"end":{"line":97,"column":56,"offset":2812},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":2757},"end":{"line":97,"column":56,"offset":2812},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"/* eslint-disable @typescript-eslint/camelcase */\n/* eslint-disable max-statements */\nimport React, { ReactText, useState } from \"react\";","position":{"start":{"line":99,"column":1,"offset":2814},"end":{"line":103,"column":4,"offset":2961},"indent":[1,1,1,1]}},{"type":"jsx","value":"<!--\n### Choosing Libraries\n-->","position":{"start":{"line":105,"column":1,"offset":2963},"end":{"line":107,"column":4,"offset":2994},"indent":[1,1]}},{"type":"thematicBreak","position":{"start":{"line":109,"column":1,"offset":2996},"end":{"line":109,"column":4,"offset":2999},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Use XOR over Unions for conditional properties","position":{"start":{"line":111,"column":5,"offset":3005},"end":{"line":111,"column":51,"offset":3051},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":3001},"end":{"line":111,"column":51,"offset":3051},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When creating props that will change from required to optional, we prefer to use\n","position":{"start":{"line":113,"column":1,"offset":3053},"end":{"line":114,"column":1,"offset":3134},"indent":[1]}},{"type":"link","title":null,"url":"https://www.npmjs.com/package/ts-xor","children":[{"type":"text","value":"XOR","position":{"start":{"line":114,"column":2,"offset":3135},"end":{"line":114,"column":5,"offset":3138},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":3134},"end":{"line":114,"column":44,"offset":3177},"indent":[]}},{"type":"text","value":" over\n","position":{"start":{"line":114,"column":44,"offset":3177},"end":{"line":115,"column":1,"offset":3183},"indent":[1]}},{"type":"link","title":null,"url":"https://www.typescriptlang.org/docs/handbook/unions-and-intersections.html","children":[{"type":"text","value":"Unions","position":{"start":{"line":115,"column":2,"offset":3184},"end":{"line":115,"column":8,"offset":3190},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":3183},"end":{"line":115,"column":85,"offset":3267},"indent":[]}},{"type":"text","value":".\nThis allows us to be more secure with our ","position":{"start":{"line":115,"column":85,"offset":3267},"end":{"line":116,"column":43,"offset":3311},"indent":[1]}},{"type":"inlineCode","value":"interface","position":{"start":{"line":116,"column":43,"offset":3311},"end":{"line":116,"column":54,"offset":3322},"indent":[]}},{"type":"text","value":" by saying a type will\neither be ","position":{"start":{"line":116,"column":54,"offset":3322},"end":{"line":117,"column":11,"offset":3355},"indent":[1]}},{"type":"inlineCode","value":"TypeA","position":{"start":{"line":117,"column":11,"offset":3355},"end":{"line":117,"column":18,"offset":3362},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":117,"column":18,"offset":3362},"end":{"line":117,"column":22,"offset":3366},"indent":[]}},{"type":"inlineCode","value":"TypeB","position":{"start":{"line":117,"column":22,"offset":3366},"end":{"line":117,"column":29,"offset":3373},"indent":[]}},{"type":"text","value":" but never a combination of both.","position":{"start":{"line":117,"column":29,"offset":3373},"end":{"line":117,"column":62,"offset":3406},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":3053},"end":{"line":117,"column":62,"offset":3406},"indent":[1,1,1,1]}},{"type":"code","lang":"tsx","meta":null,"value":"import { XOR } from \"ts-xor\";\n\ninterface BaseComponentProps {\n  readonly label?: string;\n  readonly icon?: IconNames;\n}\n\ninterface ComponentWithActionProps extends BaseComponentProps {\n  readonly icon: IconNames;\n  onClick?(): void;\n}\n\ntype ComponentProps = XOR<BaseComponentProps, ComponentWithActionProps>;","position":{"start":{"line":119,"column":1,"offset":3408},"end":{"line":133,"column":4,"offset":3727},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In the example above, our ","position":{"start":{"line":135,"column":1,"offset":3729},"end":{"line":135,"column":27,"offset":3755},"indent":[]}},{"type":"inlineCode","value":"BaseComponentProps","position":{"start":{"line":135,"column":27,"offset":3755},"end":{"line":135,"column":47,"offset":3775},"indent":[]}},{"type":"text","value":" tells us that the ","position":{"start":{"line":135,"column":47,"offset":3775},"end":{"line":135,"column":66,"offset":3794},"indent":[]}},{"type":"inlineCode","value":"label","position":{"start":{"line":135,"column":66,"offset":3794},"end":{"line":135,"column":73,"offset":3801},"indent":[]}},{"type":"text","value":" and the\n","position":{"start":{"line":135,"column":73,"offset":3801},"end":{"line":136,"column":1,"offset":3810},"indent":[1]}},{"type":"inlineCode","value":"icon","position":{"start":{"line":136,"column":1,"offset":3810},"end":{"line":136,"column":7,"offset":3816},"indent":[]}},{"type":"text","value":" are both optional properties. In ","position":{"start":{"line":136,"column":7,"offset":3816},"end":{"line":136,"column":41,"offset":3850},"indent":[]}},{"type":"inlineCode","value":"ComponentWithActionProps","position":{"start":{"line":136,"column":41,"offset":3850},"end":{"line":136,"column":67,"offset":3876},"indent":[]}},{"type":"text","value":" we tell\ntypscript that we are extending the ","position":{"start":{"line":136,"column":67,"offset":3876},"end":{"line":137,"column":37,"offset":3921},"indent":[1]}},{"type":"inlineCode","value":"BaseComponentProps","position":{"start":{"line":137,"column":37,"offset":3921},"end":{"line":137,"column":57,"offset":3941},"indent":[]}},{"type":"text","value":", but the ","position":{"start":{"line":137,"column":57,"offset":3941},"end":{"line":137,"column":67,"offset":3951},"indent":[]}},{"type":"inlineCode","value":"icon","position":{"start":{"line":137,"column":67,"offset":3951},"end":{"line":137,"column":73,"offset":3957},"indent":[]}},{"type":"text","value":" is now\na required property, and we have added an additional ","position":{"start":{"line":137,"column":73,"offset":3957},"end":{"line":138,"column":54,"offset":4018},"indent":[1]}},{"type":"inlineCode","value":"onClick","position":{"start":{"line":138,"column":54,"offset":4018},"end":{"line":138,"column":63,"offset":4027},"indent":[]}},{"type":"text","value":" property. The\nresult will look something like:","position":{"start":{"line":138,"column":63,"offset":4027},"end":{"line":139,"column":33,"offset":4074},"indent":[1]}}],"position":{"start":{"line":135,"column":1,"offset":3729},"end":{"line":139,"column":33,"offset":4074},"indent":[1,1,1,1]}},{"type":"code","lang":"tsx","meta":null,"value":"✅\n<Component label=\"Atlantis\" icon=\"gift\" />\n✅\n<Component label=\"Atlantis\" icon=\"gift\" onClick={() => alert('Hello 👋')} />\n✅\n<Component icon=\"gift\" onClick={() => alert('Hello 👋')} />\n❌\n<Component label=\"Atlantis\" onClick={() => alert('Hello 👋')} />","position":{"start":{"line":141,"column":1,"offset":4076},"end":{"line":150,"column":4,"offset":4339},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The last example will cause a typescript error because we have now said that if\nan ","position":{"start":{"line":152,"column":1,"offset":4341},"end":{"line":153,"column":4,"offset":4424},"indent":[1]}},{"type":"inlineCode","value":"onClick","position":{"start":{"line":153,"column":4,"offset":4424},"end":{"line":153,"column":13,"offset":4433},"indent":[]}},{"type":"text","value":" is used, then the component must be using the\n","position":{"start":{"line":153,"column":13,"offset":4433},"end":{"line":154,"column":1,"offset":4480},"indent":[1]}},{"type":"inlineCode","value":"ComponentWithActionProps","position":{"start":{"line":154,"column":1,"offset":4480},"end":{"line":154,"column":27,"offset":4506},"indent":[]}},{"type":"text","value":". Since that is the case, the ","position":{"start":{"line":154,"column":27,"offset":4506},"end":{"line":154,"column":57,"offset":4536},"indent":[]}},{"type":"inlineCode","value":"icon","position":{"start":{"line":154,"column":57,"offset":4536},"end":{"line":154,"column":63,"offset":4542},"indent":[]}},{"type":"text","value":" property is now\nrequired.","position":{"start":{"line":154,"column":63,"offset":4542},"end":{"line":155,"column":10,"offset":4568},"indent":[1]}}],"position":{"start":{"line":152,"column":1,"offset":4341},"end":{"line":155,"column":10,"offset":4568},"indent":[1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":157,"column":1,"offset":4570},"end":{"line":157,"column":4,"offset":4573},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"inlineCode","value":"function","position":{"start":{"line":159,"column":5,"offset":4579},"end":{"line":159,"column":15,"offset":4589},"indent":[]}},{"type":"text","value":" vs arrow function","position":{"start":{"line":159,"column":15,"offset":4589},"end":{"line":159,"column":33,"offset":4607},"indent":[]}}],"position":{"start":{"line":159,"column":1,"offset":4575},"end":{"line":159,"column":33,"offset":4607},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In an effort to make our Typescript code a bit more accessible we are preferring\nthe ","position":{"start":{"line":161,"column":1,"offset":4609},"end":{"line":162,"column":5,"offset":4694},"indent":[1]}},{"type":"inlineCode","value":"function","position":{"start":{"line":162,"column":5,"offset":4694},"end":{"line":162,"column":15,"offset":4704},"indent":[]}},{"type":"text","value":" keyword to define named functions.","position":{"start":{"line":162,"column":15,"offset":4704},"end":{"line":162,"column":50,"offset":4739},"indent":[]}}],"position":{"start":{"line":161,"column":1,"offset":4609},"end":{"line":162,"column":50,"offset":4739},"indent":[1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"✅ Do","position":{"start":{"line":164,"column":6,"offset":4746},"end":{"line":164,"column":10,"offset":4750},"indent":[]}}],"position":{"start":{"line":164,"column":1,"offset":4741},"end":{"line":164,"column":10,"offset":4750},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"function MyComponent() {\n  // ...\n}","position":{"start":{"line":166,"column":1,"offset":4752},"end":{"line":170,"column":4,"offset":4797},"indent":[1,1,1,1]}},{"type":"code","lang":"ts","meta":null,"value":"[1, 2, 3].map(num => num * 2);","position":{"start":{"line":172,"column":1,"offset":4799},"end":{"line":174,"column":4,"offset":4839},"indent":[1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"❌ Don't","position":{"start":{"line":176,"column":6,"offset":4846},"end":{"line":176,"column":13,"offset":4853},"indent":[]}}],"position":{"start":{"line":176,"column":1,"offset":4841},"end":{"line":176,"column":13,"offset":4853},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"const MyComponent = () => {\n  // ...\n};","position":{"start":{"line":178,"column":1,"offset":4855},"end":{"line":182,"column":4,"offset":4904},"indent":[1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":184,"column":1,"offset":4906},"end":{"line":184,"column":4,"offset":4909},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Interface Declaration","position":{"start":{"line":186,"column":5,"offset":4915},"end":{"line":186,"column":26,"offset":4936},"indent":[]}}],"position":{"start":{"line":186,"column":1,"offset":4911},"end":{"line":186,"column":26,"offset":4936},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"✅ Do","position":{"start":{"line":188,"column":6,"offset":4943},"end":{"line":188,"column":10,"offset":4947},"indent":[]}}],"position":{"start":{"line":188,"column":1,"offset":4938},"end":{"line":188,"column":10,"offset":4947},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"interface MyInterface {\n  foo: number;\n  bar: string;\n}","position":{"start":{"line":190,"column":1,"offset":4949},"end":{"line":195,"column":4,"offset":5014},"indent":[1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"❌ Don't","position":{"start":{"line":197,"column":6,"offset":5021},"end":{"line":197,"column":13,"offset":5028},"indent":[]}}],"position":{"start":{"line":197,"column":1,"offset":5016},"end":{"line":197,"column":13,"offset":5028},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"type MyInterface = {\n  foo: number;\n  bar: string;\n};","position":{"start":{"line":199,"column":1,"offset":5030},"end":{"line":204,"column":4,"offset":5093},"indent":[1,1,1,1,1]}},{"type":"jsx","value":"<!--\n## React\n\n## Testing\n\n### `toBeNull`\n\n#### ✅ Do\n\n```ts\n\n```\n\n#### ❌ Don't\n\n```ts\n\n```\n\n---\n\n### `it` vs `test`\n\n#### ✅ Do\n\n```ts\n\n```\n\n#### ❌ Don't\n\n```ts\n\n```\n\n---\n\n### Snapshots\n\n#### ✅ Do\n\n```ts\n\n```\n\n#### ❌ Don't\n\n```ts\n\n```\n\n## Mobile Specific\n\n## Web Specific\n-->","position":{"start":{"line":206,"column":1,"offset":5095},"end":{"line":260,"column":4,"offset":5369},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"CSS","position":{"start":{"line":262,"column":4,"offset":5374},"end":{"line":262,"column":7,"offset":5377},"indent":[]}}],"position":{"start":{"line":262,"column":1,"offset":5371},"end":{"line":262,"column":7,"offset":5377},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Wherever possible use Atlantis ","position":{"start":{"line":264,"column":1,"offset":5379},"end":{"line":264,"column":32,"offset":5410},"indent":[]}},{"type":"inlineCode","value":"design","position":{"start":{"line":264,"column":32,"offset":5410},"end":{"line":264,"column":40,"offset":5418},"indent":[]}},{"type":"text","value":" tokens.","position":{"start":{"line":264,"column":40,"offset":5418},"end":{"line":264,"column":48,"offset":5426},"indent":[]}}],"position":{"start":{"line":264,"column":1,"offset":5379},"end":{"line":264,"column":48,"offset":5426},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Units","position":{"start":{"line":266,"column":5,"offset":5432},"end":{"line":266,"column":10,"offset":5437},"indent":[]}}],"position":{"start":{"line":266,"column":1,"offset":5428},"end":{"line":266,"column":10,"offset":5437},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For size units, use the appropriate ","position":{"start":{"line":268,"column":1,"offset":5439},"end":{"line":268,"column":37,"offset":5475},"indent":[]}},{"type":"link","title":null,"url":"/space","children":[{"type":"text","value":"Spacing","position":{"start":{"line":268,"column":38,"offset":5476},"end":{"line":268,"column":45,"offset":5483},"indent":[]}}],"position":{"start":{"line":268,"column":37,"offset":5475},"end":{"line":268,"column":54,"offset":5492},"indent":[]}},{"type":"text","value":" variables. Do not use\nrems, ems, or hard-coded pixel values, as Atlantis is built using variables to\nallow for consistent re-flow as the browser scales.","position":{"start":{"line":268,"column":54,"offset":5492},"end":{"line":270,"column":52,"offset":5645},"indent":[1,1]}}],"position":{"start":{"line":268,"column":1,"offset":5439},"end":{"line":270,"column":52,"offset":5645},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you require a size that is larger than the Spacing variables, or falls\nsomewhere in between, use the CSS ","position":{"start":{"line":272,"column":1,"offset":5647},"end":{"line":273,"column":35,"offset":5755},"indent":[1]}},{"type":"inlineCode","value":"calc","position":{"start":{"line":273,"column":35,"offset":5755},"end":{"line":273,"column":41,"offset":5761},"indent":[]}},{"type":"text","value":" function with Atlantis spacing values\nin a custom property in your file to avoid magic numbers.","position":{"start":{"line":273,"column":41,"offset":5761},"end":{"line":274,"column":58,"offset":5857},"indent":[1]}}],"position":{"start":{"line":272,"column":1,"offset":5647},"end":{"line":274,"column":58,"offset":5857},"indent":[1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"✅ Do","position":{"start":{"line":276,"column":6,"offset":5864},"end":{"line":276,"column":10,"offset":5868},"indent":[]}}],"position":{"start":{"line":276,"column":1,"offset":5859},"end":{"line":276,"column":10,"offset":5868},"indent":[]}},{"type":"code","lang":"css","meta":null,"value":":root {\n  --drawer-width: calc(var(--space-base) * 17.5);\n}\n\n.container {\n  width: var(--drawer-width);\n}","position":{"start":{"line":278,"column":1,"offset":5870},"end":{"line":286,"column":4,"offset":5986},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"❌ Don't","position":{"start":{"line":288,"column":6,"offset":5993},"end":{"line":288,"column":13,"offset":6000},"indent":[]}}],"position":{"start":{"line":288,"column":1,"offset":5988},"end":{"line":288,"column":13,"offset":6000},"indent":[]}},{"type":"code","lang":"css","meta":null,"value":".container {\n  width: 280px;\n}","position":{"start":{"line":290,"column":1,"offset":6002},"end":{"line":294,"column":4,"offset":6043},"indent":[1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":297,"column":1,"offset":6046},"end":{"line":297,"column":31,"offset":6076},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":297,"column":31,"offset":6076}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { Playground } from \"docz\";\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"frontend-styleguide\"\n    }}>{`Frontend Styleguide`}</h1>\n    <h2 {...{\n      \"id\": \"purpose\"\n    }}>{`Purpose`}</h2>\n    <p>{`Our goal with Typescript and React code is to automate as much style guidance as\nwe can. To that end this guide serves to document conventions that we can't (or\nhaven't yet been able to) automate. Automation is always preferred to adding a\nguidance here.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"property-naming-conventions\"\n    }}>{`Property naming conventions`}</h2>\n    <p>{`Consider common terminology across components and design foundations when naming\nproperties. As Atlantis is a system, end users should expect similar-behaving\nproperties to have similar names across the system. For example...`}</p>\n    <h3 {...{\n      \"id\": \"base-vs-default-or-medium-for-setting-the-default-option-in-a-range\"\n    }}>{`Base vs \"Default\" or \"Medium\" for setting the default option in a range`}</h3>\n    <p>{`We use `}<inlineCode parentName=\"p\">{`base`}</inlineCode>{` as our default whenever possible when a property has a set range\nof outcomes. This can be seen in..`}</p>\n    <ul>\n      <li parentName=\"ul\">{`the `}<inlineCode parentName=\"li\">{`size`}</inlineCode>{` properties of `}<a parentName=\"li\" {...{\n          \"href\": \"/components/Button\"\n        }}>{`Button`}</a>{`,\n`}<a parentName=\"li\" {...{\n          \"href\": \"/components/avatar\"\n        }}>{`Avatar`}</a>{`, `}<a parentName=\"li\" {...{\n          \"href\": \"/components/input-text\"\n        }}>{`InputText`}</a>{`,\n`}<a parentName=\"li\" {...{\n          \"href\": \"/packages-components-src-text-text\"\n        }}>{`Text`}</a>{`,\n`}<a parentName=\"li\" {...{\n          \"href\": \"/components/progress-bar\"\n        }}>{`ProgressBar`}</a>{`, `}<a parentName=\"li\" {...{\n          \"href\": \"/components/spinner\"\n        }}>{`Spinner`}</a>{`, etc;`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`maxLines`}</inlineCode>{` of `}<a parentName=\"li\" {...{\n          \"href\": \"/packages-components-src-text-text\"\n        }}>{`Text`}</a></li>\n      <li parentName=\"ul\">{`values of `}<a parentName=\"li\" {...{\n          \"href\": \"/elevation\"\n        }}>{`Shadow`}</a>{`, `}<a parentName=\"li\" {...{\n          \"href\": \"/space\"\n        }}>{`Spacing`}</a>{`,\n`}<a parentName=\"li\" {...{\n          \"href\": \"/border-radius\"\n        }}>{`Border Radius`}</a>{` design tokens`}</li>\n    </ul>\n    <p>{`This allows us to set an expectation of the base (or most common) use case when\na prop is in action.`}</p>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"open-and-closed-states\"\n    }}>{`Open and closed states`}</h3>\n    <p>{`If a component has `}<inlineCode parentName=\"p\">{`open`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`closed`}</inlineCode>{` states, use a boolean property named\n`}<inlineCode parentName=\"p\">{`open`}</inlineCode>{`.`}</p>\n    <p>{`This can be seen in `}<a parentName=\"p\" {...{\n        \"href\": \"/components/modal\"\n      }}>{`Modal`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"/components/drawer\"\n      }}>{`Drawer`}</a>{`,\nand `}<a parentName=\"p\" {...{\n        \"href\": \"/components/popover\"\n      }}>{`Popover`}</a>{`.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"typescript\"\n    }}>{`Typescript`}</h2>\n    <h3 {...{\n      \"id\": \"linter-exceptions\"\n    }}>{`Linter Exceptions`}</h3>\n    <p>{`While we should strive to conform to our set linter rules, if for some reason\nyou are unable to you should turn them off for the single line where the\nexception is required.`}</p>\n    <p>{`You should also leave a comment immediately above the exception explaining why\nit is necessary.`}</p>\n    <h4 {...{\n      \"id\": \"-do\"\n    }}>{`✅ Do`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// Pending: https://github.com/donavon/use-event-listener/pull/12\n// The types in useEventListener mistakenly require a SyntheticEvent for the passed generic.\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n//@ts-ignore\nuseEventListener<KeyboardEvent>(\"keydown\", (event: KeyboardEvent) => {\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// Library requires fetching its CSS.\n// eslint-disable-next-line import/no-internal-modules\nimport \"react-image-lightbox/style.css\";\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"-dont\"\n    }}>{`❌ Don't`}</h4>\n    <p>{`Missing rationale for disabling rule.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// eslint-disable-next-line max-statements\nfunction MyBigComponent() {\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const { given, expect: expectation, serverRates } = assertion;\n// eslint-disable-next-line jest/valid-describe\ndescribe(\\`given \\${given}\\`, () => {\n`}</code></pre>\n    <p>{`Missing rationale and disabling rules for a whole file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`/* eslint-disable @typescript-eslint/camelcase */\n/* eslint-disable max-statements */\nimport React, { ReactText, useState } from \"react\";\n`}</code></pre>\n    {\n      /*\n      ### Choosing Libraries\n      */\n    }\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"use-xor-over-unions-for-conditional-properties\"\n    }}>{`Use XOR over Unions for conditional properties`}</h3>\n    <p>{`When creating props that will change from required to optional, we prefer to use\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/ts-xor\"\n      }}>{`XOR`}</a>{` over\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.typescriptlang.org/docs/handbook/unions-and-intersections.html\"\n      }}>{`Unions`}</a>{`.\nThis allows us to be more secure with our `}<inlineCode parentName=\"p\">{`interface`}</inlineCode>{` by saying a type will\neither be `}<inlineCode parentName=\"p\">{`TypeA`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`TypeB`}</inlineCode>{` but never a combination of both.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { XOR } from \"ts-xor\";\n\ninterface BaseComponentProps {\n  readonly label?: string;\n  readonly icon?: IconNames;\n}\n\ninterface ComponentWithActionProps extends BaseComponentProps {\n  readonly icon: IconNames;\n  onClick?(): void;\n}\n\ntype ComponentProps = XOR<BaseComponentProps, ComponentWithActionProps>;\n`}</code></pre>\n    <p>{`In the example above, our `}<inlineCode parentName=\"p\">{`BaseComponentProps`}</inlineCode>{` tells us that the `}<inlineCode parentName=\"p\">{`label`}</inlineCode>{` and the\n`}<inlineCode parentName=\"p\">{`icon`}</inlineCode>{` are both optional properties. In `}<inlineCode parentName=\"p\">{`ComponentWithActionProps`}</inlineCode>{` we tell\ntypscript that we are extending the `}<inlineCode parentName=\"p\">{`BaseComponentProps`}</inlineCode>{`, but the `}<inlineCode parentName=\"p\">{`icon`}</inlineCode>{` is now\na required property, and we have added an additional `}<inlineCode parentName=\"p\">{`onClick`}</inlineCode>{` property. The\nresult will look something like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`✅\n<Component label=\"Atlantis\" icon=\"gift\" />\n✅\n<Component label=\"Atlantis\" icon=\"gift\" onClick={() => alert('Hello 👋')} />\n✅\n<Component icon=\"gift\" onClick={() => alert('Hello 👋')} />\n❌\n<Component label=\"Atlantis\" onClick={() => alert('Hello 👋')} />\n`}</code></pre>\n    <p>{`The last example will cause a typescript error because we have now said that if\nan `}<inlineCode parentName=\"p\">{`onClick`}</inlineCode>{` is used, then the component must be using the\n`}<inlineCode parentName=\"p\">{`ComponentWithActionProps`}</inlineCode>{`. Since that is the case, the `}<inlineCode parentName=\"p\">{`icon`}</inlineCode>{` property is now\nrequired.`}</p>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"function-vs-arrow-function\"\n    }}><inlineCode parentName=\"h3\">{`function`}</inlineCode>{` vs arrow function`}</h3>\n    <p>{`In an effort to make our Typescript code a bit more accessible we are preferring\nthe `}<inlineCode parentName=\"p\">{`function`}</inlineCode>{` keyword to define named functions.`}</p>\n    <h4 {...{\n      \"id\": \"-do-1\"\n    }}>{`✅ Do`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`function MyComponent() {\n  // ...\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`[1, 2, 3].map(num => num * 2);\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"-dont-1\"\n    }}>{`❌ Don't`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const MyComponent = () => {\n  // ...\n};\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"interface-declaration\"\n    }}>{`Interface Declaration`}</h3>\n    <h4 {...{\n      \"id\": \"-do-2\"\n    }}>{`✅ Do`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface MyInterface {\n  foo: number;\n  bar: string;\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"-dont-2\"\n    }}>{`❌ Don't`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`type MyInterface = {\n  foo: number;\n  bar: string;\n};\n`}</code></pre>\n    {\n      /*\n      ## React\n      ## Testing\n      ### `toBeNull`\n      #### ✅ Do\n      ```ts\n      ```\n      #### ❌ Don't\n      ```ts\n      ```\n      ---\n      ### `it` vs `test`\n      #### ✅ Do\n      ```ts\n      ```\n      #### ❌ Don't\n      ```ts\n      ```\n      ---\n      ### Snapshots\n      #### ✅ Do\n      ```ts\n      ```\n      #### ❌ Don't\n      ```ts\n      ```\n      ## Mobile Specific\n      ## Web Specific\n      */\n    }\n    <h2 {...{\n      \"id\": \"css\"\n    }}>{`CSS`}</h2>\n    <p>{`Wherever possible use Atlantis `}<inlineCode parentName=\"p\">{`design`}</inlineCode>{` tokens.`}</p>\n    <h3 {...{\n      \"id\": \"units\"\n    }}>{`Units`}</h3>\n    <p>{`For size units, use the appropriate `}<a parentName=\"p\" {...{\n        \"href\": \"/space\"\n      }}>{`Spacing`}</a>{` variables. Do not use\nrems, ems, or hard-coded pixel values, as Atlantis is built using variables to\nallow for consistent re-flow as the browser scales.`}</p>\n    <p>{`If you require a size that is larger than the Spacing variables, or falls\nsomewhere in between, use the CSS `}<inlineCode parentName=\"p\">{`calc`}</inlineCode>{` function with Atlantis spacing values\nin a custom property in your file to avoid magic numbers.`}</p>\n    <h4 {...{\n      \"id\": \"-do-3\"\n    }}>{`✅ Do`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`:root {\n  --drawer-width: calc(var(--space-base) * 17.5);\n}\n\n.container {\n  width: var(--drawer-width);\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"-dont-3\"\n    }}>{`❌ Don't`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.container {\n  width: 280px;\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}
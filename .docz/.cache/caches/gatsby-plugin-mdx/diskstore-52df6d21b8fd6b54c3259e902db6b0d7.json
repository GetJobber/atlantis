{"expireTime":9007200931831381000,"key":"gatsby-plugin-mdx-entire-payload-fdc3ca8c1bbcf7767b0371ae5e9b988f-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":114,"offset":115},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":117},"end":{"line":5,"column":29,"offset":145},"indent":[]}},{"type":"import","value":"import { ArgsTable, Canvas, Meta, Story } from \"@storybook/addon-docs\";\nimport { useState } from \"react\";\nimport { ExampleWithHooks } from \"mdxUtils/ExampleWithHooks\";\nimport { ProgressBar } from \"@jobber/components/ProgressBar\";\nimport { Content } from \"@jobber/components/Content\";\nimport { Button } from \"@jobber/components/Button\";","position":{"start":{"line":7,"column":1,"offset":147},"end":{"line":12,"column":52,"offset":482},"indent":[1,1,1,1,1]}},{"type":"jsx","value":"<Meta title=\"Components/ProgressBar\" component={ProgressBar} />","position":{"start":{"line":14,"column":1,"offset":484},"end":{"line":14,"column":64,"offset":547},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"ProgressBar","position":{"start":{"line":16,"column":3,"offset":551},"end":{"line":16,"column":14,"offset":562},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":549},"end":{"line":16,"column":14,"offset":562},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A progress bar is a visual indicator of how close something is to completion.","position":{"start":{"line":18,"column":1,"offset":564},"end":{"line":18,"column":78,"offset":641},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":564},"end":{"line":18,"column":78,"offset":641},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"import { ProgressBar } from \"@jobber/components/ProgressBar\";","position":{"start":{"line":20,"column":1,"offset":643},"end":{"line":22,"column":4,"offset":714},"indent":[1,1]}},{"type":"jsx","value":"<Canvas>\n  <Story\n    name=\"ProgressBar\"\n    args={{\n      currentStep: 3,\n      totalSteps: 4,\n    }}\n  >\n    {args => <ProgressBar {...args} />}\n  </Story>\n</Canvas>","position":{"start":{"line":24,"column":1,"offset":716},"end":{"line":34,"column":10,"offset":883},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<ArgsTable of={ProgressBar} story=\"ProgressBar\" />","position":{"start":{"line":36,"column":1,"offset":885},"end":{"line":36,"column":51,"offset":935},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Design & usage guidelines","position":{"start":{"line":38,"column":4,"offset":940},"end":{"line":38,"column":29,"offset":965},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":937},"end":{"line":38,"column":29,"offset":965},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The progress bar should be used to show \"definite\" progress; we know exactly how\nclose the process is to completion. For \"indefinite\" progress, where we may not\nknow exactly how much longer something might take, use a spinner.","position":{"start":{"line":40,"column":1,"offset":967},"end":{"line":42,"column":66,"offset":1193},"indent":[1,1]}}],"position":{"start":{"line":40,"column":1,"offset":967},"end":{"line":42,"column":66,"offset":1193},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Some great use cases for a progress bar include:","position":{"start":{"line":44,"column":1,"offset":1195},"end":{"line":44,"column":49,"offset":1243},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":1195},"end":{"line":44,"column":49,"offset":1243},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Setup wizard, where we know how many steps the user has completed and how many\nsteps remain","position":{"start":{"line":46,"column":3,"offset":1247},"end":{"line":47,"column":15,"offset":1340},"indent":[3]}}],"position":{"start":{"line":46,"column":3,"offset":1247},"end":{"line":47,"column":15,"offset":1340},"indent":[3]}}],"position":{"start":{"line":46,"column":1,"offset":1245},"end":{"line":47,"column":15,"offset":1340},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"File uploads, where we know the total file size and how much data has already\nbeen sent","position":{"start":{"line":48,"column":3,"offset":1343},"end":{"line":49,"column":12,"offset":1432},"indent":[3]}}],"position":{"start":{"line":48,"column":3,"offset":1343},"end":{"line":49,"column":12,"offset":1432},"indent":[3]}}],"position":{"start":{"line":48,"column":1,"offset":1341},"end":{"line":49,"column":12,"offset":1432},"indent":[1]}}],"position":{"start":{"line":46,"column":1,"offset":1245},"end":{"line":49,"column":12,"offset":1432},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"An example where you might be better served using a spinner:","position":{"start":{"line":51,"column":1,"offset":1434},"end":{"line":51,"column":61,"offset":1494},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":1434},"end":{"line":51,"column":61,"offset":1494},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Loading a calendar within a view, where we do not know it's \"complete\" until\nthere's no more data left to load","position":{"start":{"line":53,"column":3,"offset":1498},"end":{"line":54,"column":36,"offset":1610},"indent":[3]}}],"position":{"start":{"line":53,"column":3,"offset":1498},"end":{"line":54,"column":36,"offset":1610},"indent":[3]}}],"position":{"start":{"line":53,"column":1,"offset":1496},"end":{"line":54,"column":36,"offset":1610},"indent":[1]}}],"position":{"start":{"line":53,"column":1,"offset":1496},"end":{"line":54,"column":36,"offset":1610},"indent":[1]}},{"type":"thematicBreak","position":{"start":{"line":56,"column":1,"offset":1612},"end":{"line":56,"column":4,"offset":1615},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Example with state","position":{"start":{"line":58,"column":4,"offset":1620},"end":{"line":58,"column":22,"offset":1638},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":1617},"end":{"line":58,"column":22,"offset":1638},"indent":[]}},{"type":"jsx","value":"<Canvas>\n  <ExampleWithHooks>\n    {() => {\n      const [step, setStep] = useState(2);\n      const totalSteps = 4;\n      return (\n        <Content>\n          <Button\n            label=\"Step Back\"\n            onClick={() => setStep(Math.max(0, step - 1))}\n          />{\" \"}\n          <Button\n            label=\"Step Forward\"\n            onClick={() => setStep(Math.min(totalSteps, step + 1))}\n          />\n          <ProgressBar currentStep={step} totalSteps={totalSteps} />\n          Step: <strong>{step}</strong> of <strong>{totalSteps}</strong>\n        </Content>\n      );\n    }}\n  </ExampleWithHooks>\n</Canvas>","position":{"start":{"line":60,"column":1,"offset":1640},"end":{"line":81,"column":10,"offset":2252},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":84,"column":1,"offset":2255},"end":{"line":84,"column":31,"offset":2285},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":84,"column":31,"offset":2285}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { ArgsTable, Canvas, Meta, Story } from \"@storybook/addon-docs\";\nimport { useState } from \"react\";\nimport { ExampleWithHooks } from \"mdxUtils/ExampleWithHooks\";\nimport { ProgressBar } from \"@jobber/components/ProgressBar\";\nimport { Content } from \"@jobber/components/Content\";\nimport { Button } from \"@jobber/components/Button\";\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Meta title=\"Components/ProgressBar\" component={ProgressBar} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"progressbar\"\n    }}>{`ProgressBar`}</h1>\n    <p>{`A progress bar is a visual indicator of how close something is to completion.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { ProgressBar } from \"@jobber/components/ProgressBar\";\n`}</code></pre>\n    <Canvas mdxType=\"Canvas\">\n  <Story name=\"ProgressBar\" args={{\n        currentStep: 3,\n        totalSteps: 4\n      }} mdxType=\"Story\">\n    {args => <ProgressBar {...args} mdxType=\"ProgressBar\" />}\n  </Story>\n    </Canvas>\n    <ArgsTable of={ProgressBar} story=\"ProgressBar\" mdxType=\"ArgsTable\" />\n    <h2 {...{\n      \"id\": \"design--usage-guidelines\"\n    }}>{`Design & usage guidelines`}</h2>\n    <p>{`The progress bar should be used to show \"definite\" progress; we know exactly how\nclose the process is to completion. For \"indefinite\" progress, where we may not\nknow exactly how much longer something might take, use a spinner.`}</p>\n    <p>{`Some great use cases for a progress bar include:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Setup wizard, where we know how many steps the user has completed and how many\nsteps remain`}</li>\n      <li parentName=\"ul\">{`File uploads, where we know the total file size and how much data has already\nbeen sent`}</li>\n    </ul>\n    <p>{`An example where you might be better served using a spinner:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Loading a calendar within a view, where we do not know it's \"complete\" until\nthere's no more data left to load`}</li>\n    </ul>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"example-with-state\"\n    }}>{`Example with state`}</h2>\n    <Canvas mdxType=\"Canvas\">\n  <ExampleWithHooks mdxType=\"ExampleWithHooks\">\n    {() => {\n          const [step, setStep] = useState(2);\n          const totalSteps = 4;\n          return <Content mdxType=\"Content\">\n          <Button label=\"Step Back\" onClick={() => setStep(Math.max(0, step - 1))} mdxType=\"Button\" />{\" \"}\n          <Button label=\"Step Forward\" onClick={() => setStep(Math.min(totalSteps, step + 1))} mdxType=\"Button\" />\n          <ProgressBar currentStep={step} totalSteps={totalSteps} mdxType=\"ProgressBar\" />\n          Step: <strong>{step}</strong> of <strong>{totalSteps}</strong>\n        </Content>;\n        }}\n  </ExampleWithHooks>\n    </Canvas>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}
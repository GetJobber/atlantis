{"expireTime":9007200931831373000,"key":"gatsby-plugin-mdx-entire-payload-6271bfc7a2ff864a59fabdb6b9b6a8d0-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":114,"offset":115},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":117},"end":{"line":5,"column":29,"offset":145},"indent":[]}},{"type":"import","value":"import { Playground } from \"docz\";\nimport { List } from \"@jobber/components/List\";\nimport { Button } from \"@jobber/components/Button\";\nimport { Spinner } from \"@jobber/components/Spinner\";\nimport { InlineLabel } from \"@jobber/components/InlineLabel\";\nimport { useCollectionQuery } from \"@jobber/hooks\";\nimport {\n  apolloClient,\n  LIST_QUERY,\n  propsList,\n  subscriptionPropsList,\n  getLoadingState,\n  returnValues,\n} from \"./mdxUtils\";","position":{"start":{"line":8,"column":1,"offset":148},"end":{"line":21,"column":21,"offset":583},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"UseCollectionQuery","position":{"start":{"line":23,"column":3,"offset":587},"end":{"line":23,"column":21,"offset":605},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":585},"end":{"line":23,"column":21,"offset":605},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"useCollectionQuery","position":{"start":{"line":25,"column":1,"offset":607},"end":{"line":25,"column":21,"offset":627},"indent":[]}},{"type":"text","value":" is a generalized hook that that aids in the interaction of\ndata collections. For use with any lists populated by graphQL collections.","position":{"start":{"line":25,"column":21,"offset":627},"end":{"line":26,"column":75,"offset":761},"indent":[1]}}],"position":{"start":{"line":25,"column":1,"offset":607},"end":{"line":26,"column":75,"offset":761},"indent":[1]}},{"type":"code","lang":"tsx","meta":null,"value":"import { useCollectionQuery } from \"@jobber/hooks\";\n\nconst {\n  data,\n  error,\n  refresh,\n  nextPage,\n  loadingRefresh,\n  loadingNextPage,\n  loadingInitialContent,\n} = useCollectionQuery<ListQueryType, SubscriptionType>({\n  query: LIST_QUERY,\n  queryOptions: {\n    fetchPolicy: \"network-only\",\n    nextFetchPolicy: \"cache-first\",\n  },\n  getCollectionByPath(items) {\n    return items.path.to.collection;\n  },\n  subscription: {\n    // subscriptions are optional\n    document: SUBSCRIPTION_QUERY,\n    getNodeByPath(items) {\n      return items.path.to.node;\n    },\n});","position":{"start":{"line":28,"column":1,"offset":763},"end":{"line":55,"column":4,"offset":1337},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const {\n      data,\n      error,\n      refresh,\n      nextPage,\n      loadingRefresh,\n      loadingNextPage,\n      loadingInitialContent,\n    } = useCollectionQuery({\n      // useCollectionQuery should be called with the query type, and\n      // optionally, the subscription type. The playground errors with\n      // typing included, so typing has been removed in this example.\n      // Please see the first example for appropriate typing.\n      query: LIST_QUERY,\n      queryOptions: {\n        fetchPolicy: \"network-only\",\n        nextFetchPolicy: \"cache-first\",\n        client: apolloClient,\n      },\n      getCollectionByPath(items) {\n        return items.allPlanets;\n      },\n    });\n    const { loadingStatus, loading } = getLoadingState(\n      loadingInitialContent,\n      loadingRefresh,\n      loadingNextPage\n    );\n    let items = [];\n    if (data) {\n      items = data.allPlanets.edges.map(edge => {\n        return {\n          section: \"Star Wars Planets\",\n          id: edge.node.id,\n          icon: \"starFill\",\n          iconColor: \"green\",\n          content: edge.node.name,\n        };\n      });\n    }\n    return (\n      <>\n        <InlineLabel size=\"large\">{loadingStatus}</InlineLabel>\n        {loading && <Spinner size=\"small\" inline={true} />}\n        <List items={items} />\n        <Button\n          label={\"Refresh\"}\n          onClick={() => {\n            refresh();\n          }}\n        />\n        <Button\n          label={\"Fetch More\"}\n          onClick={() => {\n            nextPage();\n          }}\n        />\n      </>\n    );\n  }}\n</Playground>","position":{"start":{"line":57,"column":1,"offset":1339},"end":{"line":119,"column":14,"offset":2934},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Props","position":{"start":{"line":121,"column":4,"offset":2939},"end":{"line":121,"column":9,"offset":2944},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":2936},"end":{"line":121,"column":9,"offset":2944},"indent":[]}},{"type":"jsx","value":"<List items={propsList} />","position":{"start":{"line":123,"column":1,"offset":2946},"end":{"line":123,"column":27,"offset":2972},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Subscription props","position":{"start":{"line":125,"column":4,"offset":2977},"end":{"line":125,"column":22,"offset":2995},"indent":[]}}],"position":{"start":{"line":125,"column":1,"offset":2974},"end":{"line":125,"column":22,"offset":2995},"indent":[]}},{"type":"jsx","value":"<List items={subscriptionPropsList} />","position":{"start":{"line":127,"column":1,"offset":2997},"end":{"line":127,"column":39,"offset":3035},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Return values","position":{"start":{"line":129,"column":4,"offset":3040},"end":{"line":129,"column":17,"offset":3053},"indent":[]}}],"position":{"start":{"line":129,"column":1,"offset":3037},"end":{"line":129,"column":17,"offset":3053},"indent":[]}},{"type":"jsx","value":"<List items={returnValues} />","position":{"start":{"line":131,"column":1,"offset":3055},"end":{"line":131,"column":30,"offset":3084},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":133,"column":1,"offset":3086},"end":{"line":133,"column":4,"offset":3089},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":136,"column":1,"offset":3092},"end":{"line":136,"column":31,"offset":3122},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":136,"column":31,"offset":3122}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { Playground } from \"docz\";\nimport { List } from \"@jobber/components/List\";\nimport { Button } from \"@jobber/components/Button\";\nimport { Spinner } from \"@jobber/components/Spinner\";\nimport { InlineLabel } from \"@jobber/components/InlineLabel\";\nimport { useCollectionQuery } from \"@jobber/hooks\";\nimport {\n  apolloClient,\n  LIST_QUERY,\n  propsList,\n  subscriptionPropsList,\n  getLoadingState,\n  returnValues,\n} from \"./mdxUtils\";\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"usecollectionquery\"\n    }}>{`UseCollectionQuery`}</h1>\n    <p><inlineCode parentName=\"p\">{`useCollectionQuery`}</inlineCode>{` is a generalized hook that that aids in the interaction of\ndata collections. For use with any lists populated by graphQL collections.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { useCollectionQuery } from \"@jobber/hooks\";\n\nconst {\n  data,\n  error,\n  refresh,\n  nextPage,\n  loadingRefresh,\n  loadingNextPage,\n  loadingInitialContent,\n} = useCollectionQuery<ListQueryType, SubscriptionType>({\n  query: LIST_QUERY,\n  queryOptions: {\n    fetchPolicy: \"network-only\",\n    nextFetchPolicy: \"cache-first\",\n  },\n  getCollectionByPath(items) {\n    return items.path.to.collection;\n  },\n  subscription: {\n    // subscriptions are optional\n    document: SUBSCRIPTION_QUERY,\n    getNodeByPath(items) {\n      return items.path.to.node;\n    },\n});\n`}</code></pre>\n    <Playground __position={0} __code={'() => {\\n  const {\\n    data,\\n    error,\\n    refresh,\\n    nextPage,\\n    loadingRefresh,\\n    loadingNextPage,\\n    loadingInitialContent,\\n  } = useCollectionQuery({\\n    // useCollectionQuery should be called with the query type, and\\n    // optionally, the subscription type. The playground errors with\\n    // typing included, so typing has been removed in this example.\\n    // Please see the first example for appropriate typing.\\n    query: LIST_QUERY,\\n    queryOptions: {\\n      fetchPolicy: \\'network-only\\',\\n      nextFetchPolicy: \\'cache-first\\',\\n      client: apolloClient,\\n    },\\n    getCollectionByPath(items) {\\n      return items.allPlanets\\n    },\\n  })\\n  const { loadingStatus, loading } = getLoadingState(\\n    loadingInitialContent,\\n    loadingRefresh,\\n    loadingNextPage,\\n  )\\n  let items = []\\n  if (data) {\\n    items = data.allPlanets.edges.map(edge => {\\n      return {\\n        section: \\'Star Wars Planets\\',\\n        id: edge.node.id,\\n        icon: \\'starFill\\',\\n        iconColor: \\'green\\',\\n        content: edge.node.name,\\n      }\\n    })\\n  }\\n  return (\\n    <>\\n      <InlineLabel size=\\\"large\\\">{loadingStatus}</InlineLabel>\\n      {loading && <Spinner size=\\\"small\\\" inline={true} />}\\n      <List items={items} />\\n      <Button\\n        label={\\'Refresh\\'}\\n        onClick={() => {\\n          refresh()\\n        }}\\n      />\\n      <Button\\n        label={\\'Fetch More\\'}\\n        onClick={() => {\\n          nextPage()\\n        }}\\n      />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      List,\n      Button,\n      Spinner,\n      InlineLabel,\n      useCollectionQuery,\n      apolloClient,\n      LIST_QUERY,\n      propsList,\n      subscriptionPropsList,\n      getLoadingState,\n      returnValues,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const {\n          data,\n          error,\n          refresh,\n          nextPage,\n          loadingRefresh,\n          loadingNextPage,\n          loadingInitialContent\n        } = useCollectionQuery({\n          // useCollectionQuery should be called with the query type, and\n          // optionally, the subscription type. The playground errors with\n          // typing included, so typing has been removed in this example.\n          // Please see the first example for appropriate typing.\n          query: LIST_QUERY,\n          queryOptions: {\n            fetchPolicy: \"network-only\",\n            nextFetchPolicy: \"cache-first\",\n            client: apolloClient\n          },\n\n          getCollectionByPath(items) {\n            return items.allPlanets;\n          }\n\n        });\n        const {\n          loadingStatus,\n          loading\n        } = getLoadingState(loadingInitialContent, loadingRefresh, loadingNextPage);\n        let items = [];\n\n        if (data) {\n          items = data.allPlanets.edges.map(edge => {\n            return {\n              section: \"Star Wars Planets\",\n              id: edge.node.id,\n              icon: \"starFill\",\n              iconColor: \"green\",\n              content: edge.node.name\n            };\n          });\n        }\n\n        return <>\n        <InlineLabel size=\"large\" mdxType=\"InlineLabel\">{loadingStatus}</InlineLabel>\n        {loading && <Spinner size=\"small\" inline={true} mdxType=\"Spinner\" />}\n        <List items={items} mdxType=\"List\" />\n        <Button label={\"Refresh\"} onClick={() => {\n            refresh();\n          }} mdxType=\"Button\" />\n        <Button label={\"Fetch More\"} onClick={() => {\n            nextPage();\n          }} mdxType=\"Button\" />\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <List items={propsList} mdxType=\"List\" />\n    <h2 {...{\n      \"id\": \"subscription-props\"\n    }}>{`Subscription props`}</h2>\n    <List items={subscriptionPropsList} mdxType=\"List\" />\n    <h2 {...{\n      \"id\": \"return-values\"\n    }}>{`Return values`}</h2>\n    <List items={returnValues} mdxType=\"List\" />\n    <hr></hr>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}
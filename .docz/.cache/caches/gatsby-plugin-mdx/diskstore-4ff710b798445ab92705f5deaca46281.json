{"expireTime":9007200931831381000,"key":"gatsby-plugin-mdx-entire-payload-b10348d99eafa8d8948999168fe6797a-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":114,"offset":115},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":117},"end":{"line":5,"column":29,"offset":145},"indent":[]}},{"type":"import","value":"import { Playground, Props } from \"docz\";\nimport { ComponentStatus } from \"@jobber/docx\";\nimport { RadioGroup, RadioOption } from \".\";\nimport { Content } from \"@jobber/components/Content\";\nimport { Text } from \"@jobber/components/Text\";\nimport { Checkbox } from \"@jobber/components/Checkbox\";\nimport { Divider } from \"@jobber/components/Divider\";\nimport { Avatar } from \"@jobber/components/Avatar\";\nimport { useState } from \"react\";","position":{"start":{"line":8,"column":1,"offset":148},"end":{"line":16,"column":34,"offset":580},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Radio Group","position":{"start":{"line":18,"column":3,"offset":584},"end":{"line":18,"column":14,"offset":595},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":582},"end":{"line":18,"column":14,"offset":595},"indent":[]}},{"type":"jsx","value":"<ComponentStatus stage=\"ready\" responsive=\"yes\" accessible=\"yes\" />","position":{"start":{"line":20,"column":1,"offset":597},"end":{"line":20,"column":68,"offset":664},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"RadioGroup will allow users to choose a single selection from one of a list of\nprovided options.","position":{"start":{"line":22,"column":1,"offset":666},"end":{"line":23,"column":18,"offset":762},"indent":[1]}}],"position":{"start":{"line":22,"column":1,"offset":666},"end":{"line":23,"column":18,"offset":762},"indent":[1]}},{"type":"code","lang":"ts","meta":null,"value":"import { RadioGroup } from \"@jobber/components/RadioGroup\";","position":{"start":{"line":25,"column":1,"offset":764},"end":{"line":27,"column":4,"offset":833},"indent":[1,1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const [company, setCompany] = useState(\"apple\");\n    return (\n      <RadioGroup onChange={setCompany} value={company} ariaLabel=\"Companies\">\n        <RadioOption value=\"apple\" label=\"Apple\" />\n        <RadioOption value=\"google\" label=\"Google\" />\n        <RadioOption value=\"microsoft\" label=\"Microsoft\" />\n      </RadioGroup>\n    );\n  }}\n</Playground>","position":{"start":{"line":29,"column":1,"offset":835},"end":{"line":40,"column":14,"offset":1215},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"RadioGroup props","position":{"start":{"line":42,"column":4,"offset":1220},"end":{"line":42,"column":20,"offset":1236},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":1217},"end":{"line":42,"column":20,"offset":1236},"indent":[]}},{"type":"jsx","value":"<Props of={RadioGroup} />","position":{"start":{"line":44,"column":1,"offset":1238},"end":{"line":44,"column":26,"offset":1263},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"RadioOption props","position":{"start":{"line":46,"column":4,"offset":1268},"end":{"line":46,"column":21,"offset":1285},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":1265},"end":{"line":46,"column":21,"offset":1285},"indent":[]}},{"type":"jsx","value":"<Props of={RadioOption} />","position":{"start":{"line":48,"column":1,"offset":1287},"end":{"line":48,"column":27,"offset":1313},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Disabled","position":{"start":{"line":50,"column":4,"offset":1318},"end":{"line":50,"column":12,"offset":1326},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":1315},"end":{"line":50,"column":12,"offset":1326},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"RadioOptions","position":{"start":{"line":52,"column":1,"offset":1328},"end":{"line":52,"column":15,"offset":1342},"indent":[]}},{"type":"text","value":" can be disabled by passing in the disabled prop. Disabling an\noption will prevent a user from being able to select the option.","position":{"start":{"line":52,"column":15,"offset":1342},"end":{"line":53,"column":65,"offset":1469},"indent":[1]}}],"position":{"start":{"line":52,"column":1,"offset":1328},"end":{"line":53,"column":65,"offset":1469},"indent":[1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const [company, setCompany] = useState(\"apple\");\n    const [checked, setChecked] = useState(true);\n    return (\n      <Content spacing=\"large\">\n        <RadioGroup onChange={setCompany} value={company} ariaLabel=\"Companies\">\n          <RadioOption value=\"apple\" label=\"Apple\" />\n          <RadioOption value=\"google\" label=\"Google\" />\n          <RadioOption value=\"amazon\" label=\"Amazon\" disabled={true} />\n          <RadioOption\n            value=\"microsoft\"\n            label=\"Microsoft\"\n            disabled={!checked}\n          />\n        </RadioGroup>\n        <Divider />\n        <Checkbox\n          checked={checked}\n          label=\"Allow Microsoft\"\n          onChange={setChecked}\n        />\n      </Content>\n    );\n  }}\n</Playground>","position":{"start":{"line":55,"column":1,"offset":1471},"end":{"line":80,"column":14,"offset":2241},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Description","position":{"start":{"line":82,"column":4,"offset":2246},"end":{"line":82,"column":15,"offset":2257},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":2243},"end":{"line":82,"column":15,"offset":2257},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A ","position":{"start":{"line":84,"column":1,"offset":2259},"end":{"line":84,"column":3,"offset":2261},"indent":[]}},{"type":"inlineCode","value":"description","position":{"start":{"line":84,"column":3,"offset":2261},"end":{"line":84,"column":16,"offset":2274},"indent":[]}},{"type":"text","value":" can be used to further describe the label of the ","position":{"start":{"line":84,"column":16,"offset":2274},"end":{"line":84,"column":66,"offset":2324},"indent":[]}},{"type":"inlineCode","value":"RadioOption","position":{"start":{"line":84,"column":66,"offset":2324},"end":{"line":84,"column":79,"offset":2337},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":84,"column":79,"offset":2337},"end":{"line":84,"column":80,"offset":2338},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":2259},"end":{"line":84,"column":80,"offset":2338},"indent":[]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const [company, setCompany] = useState(\"apple\");\n    return (\n      <RadioGroup onChange={setCompany} value={company} ariaLabel=\"Companies\">\n        <RadioOption\n          value=\"apple\"\n          label=\"Apple\"\n          description=\"A delicious fruit that fends off doctors\"\n        />\n        <RadioOption\n          value=\"amazon\"\n          label=\"Amazon\"\n          description=\"The worlds largest rainforest\"\n        />\n        <RadioOption\n          value=\"google\"\n          label=\"Google\"\n          description=\"A search engine\"\n        />\n      </RadioGroup>\n    );\n  }}\n</Playground>","position":{"start":{"line":86,"column":1,"offset":2340},"end":{"line":109,"column":14,"offset":2957},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Render RadioOption with children","position":{"start":{"line":111,"column":4,"offset":2962},"end":{"line":111,"column":36,"offset":2994},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":2959},"end":{"line":111,"column":36,"offset":2994},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If the ","position":{"start":{"line":113,"column":1,"offset":2996},"end":{"line":113,"column":8,"offset":3003},"indent":[]}},{"type":"inlineCode","value":"RadioGroup","position":{"start":{"line":113,"column":8,"offset":3003},"end":{"line":113,"column":20,"offset":3015},"indent":[]}},{"type":"text","value":" is being used to select something other then text, you can\nrender the ","position":{"start":{"line":113,"column":20,"offset":3015},"end":{"line":114,"column":12,"offset":3086},"indent":[1]}},{"type":"inlineCode","value":"RadioOptions","position":{"start":{"line":114,"column":12,"offset":3086},"end":{"line":114,"column":26,"offset":3100},"indent":[]}},{"type":"text","value":" with ","position":{"start":{"line":114,"column":26,"offset":3100},"end":{"line":114,"column":32,"offset":3106},"indent":[]}},{"type":"inlineCode","value":"children","position":{"start":{"line":114,"column":32,"offset":3106},"end":{"line":114,"column":42,"offset":3116},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":114,"column":42,"offset":3116},"end":{"line":114,"column":43,"offset":3117},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":2996},"end":{"line":114,"column":43,"offset":3117},"indent":[1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":116,"column":3,"offset":3121},"end":{"line":116,"column":8,"offset":3126},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":3119},"end":{"line":116,"column":10,"offset":3128},"indent":[]}},{"type":"text","value":" When using ","position":{"start":{"line":116,"column":10,"offset":3128},"end":{"line":116,"column":22,"offset":3140},"indent":[]}},{"type":"inlineCode","value":"children","position":{"start":{"line":116,"column":22,"offset":3140},"end":{"line":116,"column":32,"offset":3150},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":116,"column":32,"offset":3150},"end":{"line":116,"column":34,"offset":3152},"indent":[]}},{"type":"inlineCode","value":"label","position":{"start":{"line":116,"column":34,"offset":3152},"end":{"line":116,"column":41,"offset":3159},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":116,"column":41,"offset":3159},"end":{"line":116,"column":46,"offset":3164},"indent":[]}},{"type":"inlineCode","value":"description","position":{"start":{"line":116,"column":46,"offset":3164},"end":{"line":116,"column":59,"offset":3177},"indent":[]}},{"type":"text","value":" are not allowed due\nto the fact that they would collide with the ","position":{"start":{"line":116,"column":59,"offset":3177},"end":{"line":117,"column":46,"offset":3243},"indent":[1]}},{"type":"inlineCode","value":"children","position":{"start":{"line":117,"column":46,"offset":3243},"end":{"line":117,"column":56,"offset":3253},"indent":[]}},{"type":"text","value":" prop.","position":{"start":{"line":117,"column":56,"offset":3253},"end":{"line":117,"column":62,"offset":3259},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":3119},"end":{"line":117,"column":62,"offset":3259},"indent":[1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":119,"column":3,"offset":3263},"end":{"line":119,"column":8,"offset":3268},"indent":[]}}],"position":{"start":{"line":119,"column":1,"offset":3261},"end":{"line":119,"column":10,"offset":3270},"indent":[]}},{"type":"text","value":" When using ","position":{"start":{"line":119,"column":10,"offset":3270},"end":{"line":119,"column":22,"offset":3282},"indent":[]}},{"type":"inlineCode","value":"children","position":{"start":{"line":119,"column":22,"offset":3282},"end":{"line":119,"column":32,"offset":3292},"indent":[]}},{"type":"text","value":" it is the responsibility of the child to supply\nthe proper accessible labels. If you are using children that do not contain\ntext, an ","position":{"start":{"line":119,"column":32,"offset":3292},"end":{"line":121,"column":10,"offset":3426},"indent":[1,1]}},{"type":"inlineCode","value":"aria-label","position":{"start":{"line":121,"column":10,"offset":3426},"end":{"line":121,"column":22,"offset":3438},"indent":[]}},{"type":"text","value":" should be provided.","position":{"start":{"line":121,"column":22,"offset":3438},"end":{"line":121,"column":42,"offset":3458},"indent":[]}}],"position":{"start":{"line":119,"column":1,"offset":3261},"end":{"line":121,"column":42,"offset":3458},"indent":[1,1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const [company, setPhoto] = useState(\"JBR\");\n    const users = [\n      { name: \"Jobber\", initials: \"JBR\" },\n      { name: \"User 1\", initials: \"U1\" },\n      { name: \"User 2\", initials: \"U2\" },\n      { name: \"User 3\", initials: \"U3\" },\n      { name: \"User 4\", initials: \"U4\" },\n    ];\n    return (\n      <>\n        <Content>\n          <Text>Select a user</Text>\n          <RadioGroup onChange={setPhoto} value={company} ariaLabel=\"Users\">\n            {users.map(user => (\n              <RadioOption value={user.name}>\n                <Avatar initials={user.initials} name={user.name} />\n              </RadioOption>\n            ))}\n          </RadioGroup>\n        </Content>\n      </>\n    );\n  }}\n</Playground>","position":{"start":{"line":123,"column":1,"offset":3460},"end":{"line":148,"column":14,"offset":4196},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":151,"column":1,"offset":4199},"end":{"line":151,"column":31,"offset":4229},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":151,"column":31,"offset":4229}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { Playground, Props } from \"docz\";\nimport { ComponentStatus } from \"@jobber/docx\";\nimport { RadioGroup, RadioOption } from \".\";\nimport { Content } from \"@jobber/components/Content\";\nimport { Text } from \"@jobber/components/Text\";\nimport { Checkbox } from \"@jobber/components/Checkbox\";\nimport { Divider } from \"@jobber/components/Divider\";\nimport { Avatar } from \"@jobber/components/Avatar\";\nimport { useState } from \"react\";\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"radio-group\"\n    }}>{`Radio Group`}</h1>\n    <ComponentStatus stage=\"ready\" responsive=\"yes\" accessible=\"yes\" mdxType=\"ComponentStatus\" />\n    <p>{`RadioGroup will allow users to choose a single selection from one of a list of\nprovided options.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { RadioGroup } from \"@jobber/components/RadioGroup\";\n`}</code></pre>\n    <Playground __position={1} __code={'() => {\\n  const [company, setCompany] = useState(\\'apple\\')\\n  return (\\n    <RadioGroup onChange={setCompany} value={company} ariaLabel=\\\"Companies\\\">\\n      <RadioOption value=\\\"apple\\\" label=\\\"Apple\\\" />\\n      <RadioOption value=\\\"google\\\" label=\\\"Google\\\" />\\n      <RadioOption value=\\\"microsoft\\\" label=\\\"Microsoft\\\" />\\n    </RadioGroup>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      RadioGroup,\n      RadioOption,\n      Content,\n      Text,\n      Checkbox,\n      Divider,\n      Avatar,\n      useState,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [company, setCompany] = useState(\"apple\");\n        return <RadioGroup onChange={setCompany} value={company} ariaLabel=\"Companies\" mdxType=\"RadioGroup\">\n        <RadioOption value=\"apple\" label=\"Apple\" mdxType=\"RadioOption\" />\n        <RadioOption value=\"google\" label=\"Google\" mdxType=\"RadioOption\" />\n        <RadioOption value=\"microsoft\" label=\"Microsoft\" mdxType=\"RadioOption\" />\n      </RadioGroup>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"radiogroup-props\"\n    }}>{`RadioGroup props`}</h2>\n    <Props of={RadioGroup} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"radiooption-props\"\n    }}>{`RadioOption props`}</h2>\n    <Props of={RadioOption} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"disabled\"\n    }}>{`Disabled`}</h2>\n    <p><inlineCode parentName=\"p\">{`RadioOptions`}</inlineCode>{` can be disabled by passing in the disabled prop. Disabling an\noption will prevent a user from being able to select the option.`}</p>\n    <Playground __position={4} __code={'() => {\\n  const [company, setCompany] = useState(\\'apple\\')\\n  const [checked, setChecked] = useState(true)\\n  return (\\n    <Content spacing=\\\"large\\\">\\n      <RadioGroup onChange={setCompany} value={company} ariaLabel=\\\"Companies\\\">\\n        <RadioOption value=\\\"apple\\\" label=\\\"Apple\\\" />\\n        <RadioOption value=\\\"google\\\" label=\\\"Google\\\" />\\n        <RadioOption value=\\\"amazon\\\" label=\\\"Amazon\\\" disabled={true} />\\n        <RadioOption\\n          value=\\\"microsoft\\\"\\n          label=\\\"Microsoft\\\"\\n          disabled={!checked}\\n        />\\n      </RadioGroup>\\n      <Divider />\\n      <Checkbox\\n        checked={checked}\\n        label=\\\"Allow Microsoft\\\"\\n        onChange={setChecked}\\n      />\\n    </Content>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      RadioGroup,\n      RadioOption,\n      Content,\n      Text,\n      Checkbox,\n      Divider,\n      Avatar,\n      useState,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [company, setCompany] = useState(\"apple\");\n        const [checked, setChecked] = useState(true);\n        return <Content spacing=\"large\" mdxType=\"Content\">\n        <RadioGroup onChange={setCompany} value={company} ariaLabel=\"Companies\" mdxType=\"RadioGroup\">\n          <RadioOption value=\"apple\" label=\"Apple\" mdxType=\"RadioOption\" />\n          <RadioOption value=\"google\" label=\"Google\" mdxType=\"RadioOption\" />\n          <RadioOption value=\"amazon\" label=\"Amazon\" disabled={true} mdxType=\"RadioOption\" />\n          <RadioOption value=\"microsoft\" label=\"Microsoft\" disabled={!checked} mdxType=\"RadioOption\" />\n        </RadioGroup>\n        <Divider mdxType=\"Divider\" />\n        <Checkbox checked={checked} label=\"Allow Microsoft\" onChange={setChecked} mdxType=\"Checkbox\" />\n      </Content>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h2>\n    <p>{`A `}<inlineCode parentName=\"p\">{`description`}</inlineCode>{` can be used to further describe the label of the `}<inlineCode parentName=\"p\">{`RadioOption`}</inlineCode>{`.`}</p>\n    <Playground __position={5} __code={'() => {\\n  const [company, setCompany] = useState(\\'apple\\')\\n  return (\\n    <RadioGroup onChange={setCompany} value={company} ariaLabel=\\\"Companies\\\">\\n      <RadioOption\\n        value=\\\"apple\\\"\\n        label=\\\"Apple\\\"\\n        description=\\\"A delicious fruit that fends off doctors\\\"\\n      />\\n      <RadioOption\\n        value=\\\"amazon\\\"\\n        label=\\\"Amazon\\\"\\n        description=\\\"The worlds largest rainforest\\\"\\n      />\\n      <RadioOption\\n        value=\\\"google\\\"\\n        label=\\\"Google\\\"\\n        description=\\\"A search engine\\\"\\n      />\\n    </RadioGroup>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      RadioGroup,\n      RadioOption,\n      Content,\n      Text,\n      Checkbox,\n      Divider,\n      Avatar,\n      useState,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [company, setCompany] = useState(\"apple\");\n        return <RadioGroup onChange={setCompany} value={company} ariaLabel=\"Companies\" mdxType=\"RadioGroup\">\n        <RadioOption value=\"apple\" label=\"Apple\" description=\"A delicious fruit that fends off doctors\" mdxType=\"RadioOption\" />\n        <RadioOption value=\"amazon\" label=\"Amazon\" description=\"The worlds largest rainforest\" mdxType=\"RadioOption\" />\n        <RadioOption value=\"google\" label=\"Google\" description=\"A search engine\" mdxType=\"RadioOption\" />\n      </RadioGroup>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"render-radiooption-with-children\"\n    }}>{`Render RadioOption with children`}</h2>\n    <p>{`If the `}<inlineCode parentName=\"p\">{`RadioGroup`}</inlineCode>{` is being used to select something other then text, you can\nrender the `}<inlineCode parentName=\"p\">{`RadioOptions`}</inlineCode>{` with `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{`.`}</p>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` When using `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`label`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`description`}</inlineCode>{` are not allowed due\nto the fact that they would collide with the `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{` prop.`}</p>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` When using `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{` it is the responsibility of the child to supply\nthe proper accessible labels. If you are using children that do not contain\ntext, an `}<inlineCode parentName=\"p\">{`aria-label`}</inlineCode>{` should be provided.`}</p>\n    <Playground __position={6} __code={'() => {\\n  const [company, setPhoto] = useState(\\'JBR\\')\\n  const users = [\\n    { name: \\'Jobber\\', initials: \\'JBR\\' },\\n    { name: \\'User 1\\', initials: \\'U1\\' },\\n    { name: \\'User 2\\', initials: \\'U2\\' },\\n    { name: \\'User 3\\', initials: \\'U3\\' },\\n    { name: \\'User 4\\', initials: \\'U4\\' },\\n  ]\\n  return (\\n    <>\\n      <Content>\\n        <Text>Select a user</Text>\\n        <RadioGroup onChange={setPhoto} value={company} ariaLabel=\\\"Users\\\">\\n          {users.map(user => (\\n            <RadioOption value={user.name}>\\n              <Avatar initials={user.initials} name={user.name} />\\n            </RadioOption>\\n          ))}\\n        </RadioGroup>\\n      </Content>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      RadioGroup,\n      RadioOption,\n      Content,\n      Text,\n      Checkbox,\n      Divider,\n      Avatar,\n      useState,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [company, setPhoto] = useState(\"JBR\");\n        const users = [{\n          name: \"Jobber\",\n          initials: \"JBR\"\n        }, {\n          name: \"User 1\",\n          initials: \"U1\"\n        }, {\n          name: \"User 2\",\n          initials: \"U2\"\n        }, {\n          name: \"User 3\",\n          initials: \"U3\"\n        }, {\n          name: \"User 4\",\n          initials: \"U4\"\n        }];\n        return <>\n        <Content mdxType=\"Content\">\n          <Text mdxType=\"Text\">Select a user</Text>\n          <RadioGroup onChange={setPhoto} value={company} ariaLabel=\"Users\" mdxType=\"RadioGroup\">\n            {users.map(user => <RadioOption value={user.name} mdxType=\"RadioOption\">\n                <Avatar initials={user.initials} name={user.name} mdxType=\"Avatar\" />\n              </RadioOption>)}\n          </RadioGroup>\n        </Content>\n      </>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}
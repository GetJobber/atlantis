{"expireTime":9007200931831373000,"key":"gatsby-plugin-mdx-entire-payload-16337cd87b9b42a28f5ea58846f39a6e-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":114,"offset":115},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":117},"end":{"line":5,"column":29,"offset":145},"indent":[]}},{"type":"import","value":"import { Playground } from \"docz\";\nimport { useEffect, useState } from \"react\";\nimport { Button } from \"@jobber/components/Button\";\nimport { useIsMounted } from \"@jobber/hooks\";","position":{"start":{"line":8,"column":1,"offset":148},"end":{"line":11,"column":46,"offset":325},"indent":[1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"UseIsMounted","position":{"start":{"line":13,"column":3,"offset":329},"end":{"line":13,"column":15,"offset":341},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":327},"end":{"line":13,"column":15,"offset":341},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"useIsMounted","position":{"start":{"line":15,"column":1,"offset":343},"end":{"line":15,"column":15,"offset":357},"indent":[]}},{"type":"text","value":" should be used on asyncronous calls to ensure the component is\nmounted before manipulating state on that component. Manipulating state on\nunmounted components can cause errors and memory leaks.","position":{"start":{"line":15,"column":15,"offset":357},"end":{"line":17,"column":56,"offset":551},"indent":[1,1]}}],"position":{"start":{"line":15,"column":1,"offset":343},"end":{"line":17,"column":56,"offset":551},"indent":[1,1]}},{"type":"code","lang":"tsx","meta":null,"value":"import { useIsMounted } from \"@jobber/hooks\";","position":{"start":{"line":19,"column":1,"offset":553},"end":{"line":21,"column":4,"offset":609},"indent":[1,1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    function AlertMountedComponent() {\n      const isMounted = useIsMounted();\n      useEffect(() => {\n        setTimeout(() => {\n          if (isMounted.current) {\n            // only set state if the component is still mounted\n            console.log(\"The component is mounted\");\n          } else {\n            console.log(\"The component is not mounted\");\n          }\n        }, 10000);\n      }, []);\n      return <h4>I am the AlertMountedComponent</h4>;\n    }\n    const [shouldMount, setShouldMount] = useState(false);\n    let component = <></>;\n    if (shouldMount) {\n      component = <AlertMountedComponent />;\n    }\n    return (\n      <>\n        {component}\n        <Button\n          label={\"Mount Component\"}\n          onClick={() => {\n            setShouldMount(true);\n          }}\n        />\n        <Button\n          label={\"Unmount Component\"}\n          onClick={() => {\n            setShouldMount(false);\n          }}\n        />\n      </>\n    );\n  }}\n</Playground>","position":{"start":{"line":23,"column":1,"offset":611},"end":{"line":62,"column":14,"offset":1612},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":64,"column":1,"offset":1614},"end":{"line":64,"column":4,"offset":1617},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":67,"column":1,"offset":1620},"end":{"line":67,"column":31,"offset":1650},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":67,"column":31,"offset":1650}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { Playground } from \"docz\";\nimport { useEffect, useState } from \"react\";\nimport { Button } from \"@jobber/components/Button\";\nimport { useIsMounted } from \"@jobber/hooks\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst AlertMountedComponent = makeShortcode(\"AlertMountedComponent\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"useismounted\"\n    }}>{`UseIsMounted`}</h1>\n    <p><inlineCode parentName=\"p\">{`useIsMounted`}</inlineCode>{` should be used on asyncronous calls to ensure the component is\nmounted before manipulating state on that component. Manipulating state on\nunmounted components can cause errors and memory leaks.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { useIsMounted } from \"@jobber/hooks\";\n`}</code></pre>\n    <Playground __position={0} __code={'() => {\\n  function AlertMountedComponent() {\\n    const isMounted = useIsMounted()\\n    useEffect(() => {\\n      setTimeout(() => {\\n        if (isMounted.current) {\\n          // only set state if the component is still mounted\\n          console.log(\\'The component is mounted\\')\\n        } else {\\n          console.log(\\'The component is not mounted\\')\\n        }\\n      }, 10000)\\n    }, [])\\n    return <h4>I am the AlertMountedComponent</h4>\\n  }\\n  const [shouldMount, setShouldMount] = useState(false)\\n  let component = <></>\\n  if (shouldMount) {\\n    component = <AlertMountedComponent />\\n  }\\n  return (\\n    <>\\n      {component}\\n      <Button\\n        label={\\'Mount Component\\'}\\n        onClick={() => {\\n          setShouldMount(true)\\n        }}\\n      />\\n      <Button\\n        label={\\'Unmount Component\\'}\\n        onClick={() => {\\n          setShouldMount(false)\\n        }}\\n      />\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useEffect,\n      useState,\n      Button,\n      useIsMounted,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        function AlertMountedComponent() {\n          const isMounted = useIsMounted();\n          useEffect(() => {\n            setTimeout(() => {\n              if (isMounted.current) {\n                // only set state if the component is still mounted\n                console.log(\"The component is mounted\");\n              } else {\n                console.log(\"The component is not mounted\");\n              }\n            }, 10000);\n          }, []);\n          return <h4>I am the AlertMountedComponent</h4>;\n        }\n\n        const [shouldMount, setShouldMount] = useState(false);\n        let component = <></>;\n\n        if (shouldMount) {\n          component = <AlertMountedComponent mdxType=\"AlertMountedComponent\" />;\n        }\n\n        return <>\n        {component}\n        <Button label={\"Mount Component\"} onClick={() => {\n            setShouldMount(true);\n          }} mdxType=\"Button\" />\n        <Button label={\"Unmount Component\"} onClick={() => {\n            setShouldMount(false);\n          }} mdxType=\"Button\" />\n      </>;\n      }}\n    </Playground>\n    <hr></hr>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}
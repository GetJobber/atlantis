{"expireTime":9007200931831329000,"key":"gatsby-plugin-mdx-entire-payload-a7525f282a7aa2283fa931037537d04d-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":114,"offset":115},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":117},"end":{"line":5,"column":29,"offset":145},"indent":[]}},{"type":"import","value":"import { Playground, Props } from \"docz\";\nimport { ComponentStatus } from \"@jobber/docx\";\nimport { Checkbox } from \".\";\nimport { useState } from \"react\";\nimport { Text } from \"../Text\";\nimport { Modal } from \"../Modal\";\nimport { Content } from \"../Content\";","position":{"start":{"line":8,"column":1,"offset":148},"end":{"line":14,"column":38,"offset":405},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Checkbox","position":{"start":{"line":16,"column":3,"offset":409},"end":{"line":16,"column":11,"offset":417},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":407},"end":{"line":16,"column":11,"offset":417},"indent":[]}},{"type":"jsx","value":"<ComponentStatus stage=\"ready\" responsive=\"yes\" accessible=\"yes\" />","position":{"start":{"line":18,"column":1,"offset":419},"end":{"line":18,"column":68,"offset":486},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A checkbox lets a user select one or more items from a set of options.","position":{"start":{"line":20,"column":1,"offset":488},"end":{"line":20,"column":71,"offset":558},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":488},"end":{"line":20,"column":71,"offset":558},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"import { Checkbox } from \"@jobber/components/Checkbox\";","position":{"start":{"line":22,"column":1,"offset":560},"end":{"line":24,"column":4,"offset":625},"indent":[1,1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const [checked, setChecked] = useState(true);\n    return (\n      <Checkbox\n        checked={checked}\n        label=\"Save card for future use\"\n        onChange={setChecked}\n      />\n    );\n  }}\n</Playground>","position":{"start":{"line":26,"column":1,"offset":627},"end":{"line":37,"column":14,"offset":861},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Design & usage guidelines","position":{"start":{"line":39,"column":4,"offset":866},"end":{"line":39,"column":29,"offset":891},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":863},"end":{"line":39,"column":29,"offset":891},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A checkbox is a familiar pattern for users who need to choose from a set of\noptions, or opt in to a single choice.","position":{"start":{"line":41,"column":1,"offset":893},"end":{"line":42,"column":39,"offset":1007},"indent":[1]}}],"position":{"start":{"line":41,"column":1,"offset":893},"end":{"line":42,"column":39,"offset":1007},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"A single checkbox, a ","position":{"start":{"line":44,"column":1,"offset":1009},"end":{"line":44,"column":22,"offset":1030},"indent":[]}},{"type":"link","title":null,"url":"switch","children":[{"type":"text","value":"Switch","position":{"start":{"line":44,"column":23,"offset":1031},"end":{"line":44,"column":29,"offset":1037},"indent":[]}}],"position":{"start":{"line":44,"column":22,"offset":1030},"end":{"line":44,"column":38,"offset":1046},"indent":[]}},{"type":"text","value":", and a pair of\n","position":{"start":{"line":44,"column":38,"offset":1046},"end":{"line":45,"column":1,"offset":1062},"indent":[1]}},{"type":"link","title":null,"url":"radio-group","children":[{"type":"text","value":"radio buttons","position":{"start":{"line":45,"column":2,"offset":1063},"end":{"line":45,"column":15,"offset":1076},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1062},"end":{"line":45,"column":29,"offset":1090},"indent":[]}},{"type":"text","value":" can seem similar in theory, as all can represent an\neither/or decision for the user. Use a switch when the user must make a decision\nto turn something on or off, and a single checkbox when a user is opting in to a\nchoice. A pair of radio buttons can be used to help the user decide between two\ndiscrete options, such as “fixed price” and “per visit” invoicing options.","position":{"start":{"line":45,"column":29,"offset":1090},"end":{"line":49,"column":75,"offset":1459},"indent":[1,1,1,1]}}],"position":{"start":{"line":44,"column":1,"offset":1009},"end":{"line":49,"column":75,"offset":1459},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Props","position":{"start":{"line":51,"column":4,"offset":1464},"end":{"line":51,"column":9,"offset":1469},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":1461},"end":{"line":51,"column":9,"offset":1469},"indent":[]}},{"type":"jsx","value":"<Props of={Checkbox} />","position":{"start":{"line":53,"column":1,"offset":1471},"end":{"line":53,"column":24,"offset":1494},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":55,"column":1,"offset":1496},"end":{"line":55,"column":4,"offset":1499},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Indeterminate","position":{"start":{"line":57,"column":4,"offset":1504},"end":{"line":57,"column":17,"offset":1517},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":1501},"end":{"line":57,"column":17,"offset":1517},"indent":[]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const [items, setItems] = useState([true, false, false]);\n    return (\n      <>\n        <Checkbox\n          label=\"Select All\"\n          checked={!items.includes(false)}\n          onChange={toggleAll}\n          indeterminate={items.includes(false) && items.includes(true)}\n        />\n        <ul>\n          {items.map((value, index) => (\n            <li key={index}>\n              <Checkbox\n                label={`Item ${index}`}\n                checked={value}\n                onChange={toggleIndex(index)}\n              />\n            </li>\n          ))}\n        </ul>\n      </>\n    );\n    function toggleIndex(index) {\n      return newValue => {\n        const updatedItems = Array.from(items);\n        updatedItems[index] = newValue;\n        setItems(updatedItems);\n      };\n    }\n    function toggleAll(newValue) {\n      setItems(Array(items.length).fill(newValue));\n    }\n  }}\n</Playground>","position":{"start":{"line":59,"column":1,"offset":1519},"end":{"line":94,"column":14,"offset":2443},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"With a description","position":{"start":{"line":96,"column":4,"offset":2448},"end":{"line":96,"column":22,"offset":2466},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":2445},"end":{"line":96,"column":22,"offset":2466},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If there is more information needed for a ","position":{"start":{"line":98,"column":1,"offset":2468},"end":{"line":98,"column":43,"offset":2510},"indent":[]}},{"type":"inlineCode","value":"Checkbox","position":{"start":{"line":98,"column":43,"offset":2510},"end":{"line":98,"column":53,"offset":2520},"indent":[]}},{"type":"text","value":", use the ","position":{"start":{"line":98,"column":53,"offset":2520},"end":{"line":98,"column":63,"offset":2530},"indent":[]}},{"type":"inlineCode","value":"description","position":{"start":{"line":98,"column":63,"offset":2530},"end":{"line":98,"column":76,"offset":2543},"indent":[]}},{"type":"text","value":" prop\ninstead of a longer ","position":{"start":{"line":98,"column":76,"offset":2543},"end":{"line":99,"column":21,"offset":2569},"indent":[1]}},{"type":"inlineCode","value":"label","position":{"start":{"line":99,"column":21,"offset":2569},"end":{"line":99,"column":28,"offset":2576},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":99,"column":28,"offset":2576},"end":{"line":99,"column":29,"offset":2577},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":2468},"end":{"line":99,"column":29,"offset":2577},"indent":[1]}},{"type":"jsx","value":"<Playground>\n  <Checkbox\n    label=\"Save card for future use\"\n    description=\"If you save your card now, you'll never need to save it again.\"\n  />\n</Playground>","position":{"start":{"line":101,"column":1,"offset":2579},"end":{"line":106,"column":14,"offset":2740},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Disabled","position":{"start":{"line":108,"column":4,"offset":2745},"end":{"line":108,"column":12,"offset":2753},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":2742},"end":{"line":108,"column":12,"offset":2753},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A disabled checkbox cannot be operated by the user. Your primary goal should be\nto avoid disabled states in an interface, but some cases may require that an\nelement be disabled.","position":{"start":{"line":110,"column":1,"offset":2755},"end":{"line":112,"column":21,"offset":2932},"indent":[1,1]}}],"position":{"start":{"line":110,"column":1,"offset":2755},"end":{"line":112,"column":21,"offset":2932},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If presenting a disabled \"checked\" checkbox to the user, provide a clear\ndescription for the user on how to enable the checkbox to avoid creating a sense\nthat the user has lost control of the interface.","position":{"start":{"line":114,"column":1,"offset":2934},"end":{"line":116,"column":49,"offset":3136},"indent":[1,1]}}],"position":{"start":{"line":114,"column":1,"offset":2934},"end":{"line":116,"column":49,"offset":3136},"indent":[1,1]}},{"type":"jsx","value":"<Playground>\n  <Checkbox\n    disabled={true}\n    defaultChecked={true}\n    label=\"Subscribe on marketing emails\"\n  />\n</Playground>","position":{"start":{"line":118,"column":1,"offset":3138},"end":{"line":124,"column":14,"offset":3269},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Children as the label","position":{"start":{"line":126,"column":4,"offset":3274},"end":{"line":126,"column":25,"offset":3295},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":3271},"end":{"line":126,"column":25,"offset":3295},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you require more functionality than a simple string for the label, it is\npossible to pass a child component to the checkbox to use as a label. This\nallows us to embed a link into the checkbox label.","position":{"start":{"line":128,"column":1,"offset":3297},"end":{"line":130,"column":51,"offset":3498},"indent":[1,1]}}],"position":{"start":{"line":128,"column":1,"offset":3297},"end":{"line":130,"column":51,"offset":3498},"indent":[1,1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const [checked, setChecked] = useState(false);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    function handleOpenModal(e) {\n      // Prevent the checkbox from being checked\n      e.preventDefault();\n      setIsModalOpen(true);\n    }\n    function handleCloseModal() {\n      setIsModalOpen(false);\n    }\n    return (\n      <>\n        <Checkbox checked={checked} onChange={setChecked}>\n          <Text>\n            I agree to the\n            <button\n              style={{\n                color: \"var(--color-interactive)\",\n                fontFamily: \"inherit\",\n                fontSize: \"inherit\",\n                padding: \"0\",\n                textDecoration: \"underline\",\n                background: \"transparent\",\n                border: \"none\",\n              }}\n              onClick={handleOpenModal}\n            >\n              terms of service\n            </button>\n          </Text>\n        </Checkbox>\n        <Modal\n          title=\"Terms of Service\"\n          open={isModalOpen}\n          onRequestClose={handleCloseModal}\n        >\n          <Content>\n            <Text>\n              And this is where I would keep my Terms of Service... if I had\n              any!\n            </Text>\n          </Content>\n        </Modal>\n      </>\n    );\n  }}\n</Playground>","position":{"start":{"line":132,"column":1,"offset":3500},"end":{"line":180,"column":14,"offset":4814},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Related components","position":{"start":{"line":182,"column":4,"offset":4819},"end":{"line":182,"column":22,"offset":4837},"indent":[]}}],"position":{"start":{"line":182,"column":1,"offset":4816},"end":{"line":182,"column":22,"offset":4837},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"To let people turn a setting on or off instantly, use a ","position":{"start":{"line":184,"column":3,"offset":4841},"end":{"line":184,"column":59,"offset":4897},"indent":[]}},{"type":"link","title":null,"url":"switch","children":[{"type":"text","value":"Switch","position":{"start":{"line":184,"column":60,"offset":4898},"end":{"line":184,"column":66,"offset":4904},"indent":[]}}],"position":{"start":{"line":184,"column":59,"offset":4897},"end":{"line":184,"column":75,"offset":4913},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":184,"column":75,"offset":4913},"end":{"line":184,"column":76,"offset":4914},"indent":[]}}],"position":{"start":{"line":184,"column":3,"offset":4841},"end":{"line":184,"column":76,"offset":4914},"indent":[]}}],"position":{"start":{"line":184,"column":1,"offset":4839},"end":{"line":184,"column":76,"offset":4914},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"To present a set of options where people can only make a single choice, use a\n","position":{"start":{"line":185,"column":3,"offset":4917},"end":{"line":186,"column":3,"offset":4997},"indent":[3]}},{"type":"link","title":null,"url":"radio-group","children":[{"type":"text","value":"Radio Group","position":{"start":{"line":186,"column":4,"offset":4998},"end":{"line":186,"column":15,"offset":5009},"indent":[]}}],"position":{"start":{"line":186,"column":3,"offset":4997},"end":{"line":186,"column":29,"offset":5023},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":186,"column":29,"offset":5023},"end":{"line":186,"column":30,"offset":5024},"indent":[]}}],"position":{"start":{"line":185,"column":3,"offset":4917},"end":{"line":186,"column":30,"offset":5024},"indent":[3]}}],"position":{"start":{"line":185,"column":1,"offset":4915},"end":{"line":186,"column":30,"offset":5024},"indent":[1]}}],"position":{"start":{"line":184,"column":1,"offset":4839},"end":{"line":186,"column":30,"offset":5024},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":189,"column":1,"offset":5027},"end":{"line":189,"column":31,"offset":5057},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":189,"column":31,"offset":5057}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { Playground, Props } from \"docz\";\nimport { ComponentStatus } from \"@jobber/docx\";\nimport { Checkbox } from \".\";\nimport { useState } from \"react\";\nimport { Text } from \"../Text\";\nimport { Modal } from \"../Modal\";\nimport { Content } from \"../Content\";\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"checkbox\"\n    }}>{`Checkbox`}</h1>\n    <ComponentStatus stage=\"ready\" responsive=\"yes\" accessible=\"yes\" mdxType=\"ComponentStatus\" />\n    <p>{`A checkbox lets a user select one or more items from a set of options.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { Checkbox } from \"@jobber/components/Checkbox\";\n`}</code></pre>\n    <Playground __position={1} __code={'() => {\\n  const [checked, setChecked] = useState(true)\\n  return (\\n    <Checkbox\\n      checked={checked}\\n      label=\\\"Save card for future use\\\"\\n      onChange={setChecked}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      Checkbox,\n      useState,\n      Text,\n      Modal,\n      Content,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [checked, setChecked] = useState(true);\n        return <Checkbox checked={checked} label=\"Save card for future use\" onChange={setChecked} mdxType=\"Checkbox\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"design--usage-guidelines\"\n    }}>{`Design & usage guidelines`}</h2>\n    <p>{`A checkbox is a familiar pattern for users who need to choose from a set of\noptions, or opt in to a single choice.`}</p>\n    <p>{`A single checkbox, a `}<a parentName=\"p\" {...{\n        \"href\": \"switch\"\n      }}>{`Switch`}</a>{`, and a pair of\n`}<a parentName=\"p\" {...{\n        \"href\": \"radio-group\"\n      }}>{`radio buttons`}</a>{` can seem similar in theory, as all can represent an\neither/or decision for the user. Use a switch when the user must make a decision\nto turn something on or off, and a single checkbox when a user is opting in to a\nchoice. A pair of radio buttons can be used to help the user decide between two\ndiscrete options, such as “fixed price” and “per visit” invoicing options.`}</p>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Checkbox} mdxType=\"Props\" />\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"indeterminate\"\n    }}>{`Indeterminate`}</h2>\n    <Playground __position={3} __code={'() => {\\n  const [items, setItems] = useState([true, false, false])\\n  return (\\n    <>\\n      <Checkbox\\n        label=\\\"Select All\\\"\\n        checked={!items.includes(false)}\\n        onChange={toggleAll}\\n        indeterminate={items.includes(false) && items.includes(true)}\\n      />\\n      <ul>\\n        {items.map((value, index) => (\\n          <li key={index}>\\n            <Checkbox\\n              label={`Item ${index}`}\\n              checked={value}\\n              onChange={toggleIndex(index)}\\n            />\\n          </li>\\n        ))}\\n      </ul>\\n    </>\\n  )\\n  function toggleIndex(index) {\\n    return newValue => {\\n      const updatedItems = Array.from(items)\\n      updatedItems[index] = newValue\\n      setItems(updatedItems)\\n    }\\n  }\\n  function toggleAll(newValue) {\\n    setItems(Array(items.length).fill(newValue))\\n  }\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      Checkbox,\n      useState,\n      Text,\n      Modal,\n      Content,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [items, setItems] = useState([true, false, false]);\n        return <>\n        <Checkbox label=\"Select All\" checked={!items.includes(false)} onChange={toggleAll} indeterminate={items.includes(false) && items.includes(true)} mdxType=\"Checkbox\" />\n        <ul>\n          {items.map((value, index) => <li key={index}>\n              <Checkbox label={`Item ${index}`} checked={value} onChange={toggleIndex(index)} mdxType=\"Checkbox\" />\n            </li>)}\n        </ul>\n      </>;\n\n        function toggleIndex(index) {\n          return newValue => {\n            const updatedItems = Array.from(items);\n            updatedItems[index] = newValue;\n            setItems(updatedItems);\n          };\n        }\n\n        function toggleAll(newValue) {\n          setItems(Array(items.length).fill(newValue));\n        }\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"with-a-description\"\n    }}>{`With a description`}</h2>\n    <p>{`If there is more information needed for a `}<inlineCode parentName=\"p\">{`Checkbox`}</inlineCode>{`, use the `}<inlineCode parentName=\"p\">{`description`}</inlineCode>{` prop\ninstead of a longer `}<inlineCode parentName=\"p\">{`label`}</inlineCode>{`.`}</p>\n    <Playground __position={4} __code={'<Checkbox\\n  label=\\\"Save card for future use\\\"\\n  description=\\\"If you save your card now, you\\'ll never need to save it again.\\\"\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      Checkbox,\n      useState,\n      Text,\n      Modal,\n      Content,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Checkbox label=\"Save card for future use\" description=\"If you save your card now, you'll never need to save it again.\" mdxType=\"Checkbox\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"disabled\"\n    }}>{`Disabled`}</h2>\n    <p>{`A disabled checkbox cannot be operated by the user. Your primary goal should be\nto avoid disabled states in an interface, but some cases may require that an\nelement be disabled.`}</p>\n    <p>{`If presenting a disabled \"checked\" checkbox to the user, provide a clear\ndescription for the user on how to enable the checkbox to avoid creating a sense\nthat the user has lost control of the interface.`}</p>\n    <Playground __position={5} __code={'<Checkbox\\n  disabled={true}\\n  defaultChecked={true}\\n  label=\\\"Subscribe on marketing emails\\\"\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      Checkbox,\n      useState,\n      Text,\n      Modal,\n      Content,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Checkbox disabled={true} defaultChecked={true} label=\"Subscribe on marketing emails\" mdxType=\"Checkbox\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"children-as-the-label\"\n    }}>{`Children as the label`}</h2>\n    <p>{`If you require more functionality than a simple string for the label, it is\npossible to pass a child component to the checkbox to use as a label. This\nallows us to embed a link into the checkbox label.`}</p>\n    <Playground __position={6} __code={'() => {\\n  const [checked, setChecked] = useState(false)\\n  const [isModalOpen, setIsModalOpen] = useState(false)\\n  function handleOpenModal(e) {\\n    // Prevent the checkbox from being checked\\n    e.preventDefault()\\n    setIsModalOpen(true)\\n  }\\n  function handleCloseModal() {\\n    setIsModalOpen(false)\\n  }\\n  return (\\n    <>\\n      <Checkbox checked={checked} onChange={setChecked}>\\n        <Text>\\n          I agree to the\\n          <button\\n            style={{\\n              color: \\'var(--color-interactive)\\',\\n              fontFamily: \\'inherit\\',\\n              fontSize: \\'inherit\\',\\n              padding: \\'0\\',\\n              textDecoration: \\'underline\\',\\n              background: \\'transparent\\',\\n              border: \\'none\\',\\n            }}\\n            onClick={handleOpenModal}\\n          >\\n            terms of service\\n          </button>\\n        </Text>\\n      </Checkbox>\\n      <Modal\\n        title=\\\"Terms of Service\\\"\\n        open={isModalOpen}\\n        onRequestClose={handleCloseModal}\\n      >\\n        <Content>\\n          <Text>\\n            And this is where I would keep my Terms of Service... if I had\\n            any!\\n          </Text>\\n        </Content>\\n      </Modal>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      Checkbox,\n      useState,\n      Text,\n      Modal,\n      Content,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [checked, setChecked] = useState(false);\n        const [isModalOpen, setIsModalOpen] = useState(false);\n\n        function handleOpenModal(e) {\n          // Prevent the checkbox from being checked\n          e.preventDefault();\n          setIsModalOpen(true);\n        }\n\n        function handleCloseModal() {\n          setIsModalOpen(false);\n        }\n\n        return <>\n        <Checkbox checked={checked} onChange={setChecked} mdxType=\"Checkbox\">\n          <Text mdxType=\"Text\">\n            I agree to the\n            <button style={{\n                color: \"var(--color-interactive)\",\n                fontFamily: \"inherit\",\n                fontSize: \"inherit\",\n                padding: \"0\",\n                textDecoration: \"underline\",\n                background: \"transparent\",\n                border: \"none\"\n              }} onClick={handleOpenModal}>\n              terms of service\n            </button>\n          </Text>\n        </Checkbox>\n        <Modal title=\"Terms of Service\" open={isModalOpen} onRequestClose={handleCloseModal} mdxType=\"Modal\">\n          <Content mdxType=\"Content\">\n            <Text mdxType=\"Text\">\n              And this is where I would keep my Terms of Service... if I had\n              any!\n            </Text>\n          </Content>\n        </Modal>\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"related-components\"\n    }}>{`Related components`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`To let people turn a setting on or off instantly, use a `}<a parentName=\"li\" {...{\n          \"href\": \"switch\"\n        }}>{`Switch`}</a>{`.`}</li>\n      <li parentName=\"ul\">{`To present a set of options where people can only make a single choice, use a\n`}<a parentName=\"li\" {...{\n          \"href\": \"radio-group\"\n        }}>{`Radio Group`}</a>{`.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}
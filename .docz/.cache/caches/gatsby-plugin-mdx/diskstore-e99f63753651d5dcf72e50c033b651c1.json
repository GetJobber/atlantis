{"expireTime":9007200931831329000,"key":"gatsby-plugin-mdx-entire-payload-125ce15ccf35c63453b9c9410d5dee19-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":114,"offset":115},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":117},"end":{"line":5,"column":29,"offset":145},"indent":[]}},{"type":"import","value":"import { Playground, Props } from \"docz\";\nimport { ComponentStatus } from \"@jobber/docx\";\nimport { Button } from \"../Button\";\nimport { Autocomplete } from \".\";\nimport { useState } from \"react\";\nimport cloneDeep from \"lodash/cloneDeep\";","position":{"start":{"line":8,"column":1,"offset":148},"end":{"line":13,"column":42,"offset":383},"indent":[1,1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Autocomplete","position":{"start":{"line":15,"column":3,"offset":387},"end":{"line":15,"column":15,"offset":399},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":385},"end":{"line":15,"column":15,"offset":399},"indent":[]}},{"type":"jsx","value":"<ComponentStatus stage=\"pre\" responsive=\"no\" accessible=\"no\" />","position":{"start":{"line":17,"column":1,"offset":401},"end":{"line":17,"column":64,"offset":464},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"An autocomplete allows a user to quickly pick a preset value from a larger list\nof possible options.","position":{"start":{"line":19,"column":1,"offset":466},"end":{"line":20,"column":21,"offset":566},"indent":[1]}}],"position":{"start":{"line":19,"column":1,"offset":466},"end":{"line":20,"column":21,"offset":566},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"If the number of available options is smaller consider a ","position":{"start":{"line":22,"column":1,"offset":568},"end":{"line":22,"column":58,"offset":625},"indent":[]}},{"type":"link","title":null,"url":"select","children":[{"type":"text","value":"Select","position":{"start":{"line":22,"column":59,"offset":626},"end":{"line":22,"column":65,"offset":632},"indent":[]}}],"position":{"start":{"line":22,"column":58,"offset":625},"end":{"line":22,"column":74,"offset":641},"indent":[]}},{"type":"text","value":"\ninstead.","position":{"start":{"line":22,"column":74,"offset":641},"end":{"line":23,"column":9,"offset":650},"indent":[1]}}],"position":{"start":{"line":22,"column":1,"offset":568},"end":{"line":23,"column":9,"offset":650},"indent":[1]}},{"type":"code","lang":"ts","meta":null,"value":"import { Autocomplete } from \"@jobber/components/Autocomplete\";","position":{"start":{"line":25,"column":1,"offset":652},"end":{"line":27,"column":4,"offset":725},"indent":[1,1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const options = [\n      { value: 1, label: \"Nostromo\" },\n      { value: 2, label: \"Rodger Young\" },\n      { value: 3, label: \"Serenity\" },\n      { value: 4, label: \"Sleeper Service\" },\n      { value: 5, label: \"Enterprise\" },\n      { value: 6, label: \"Enterprise-D\" }\n    ];\n    const [value, setValue] = useState();\n    return (\n      <Autocomplete\n        value={value}\n        initialOptions={[]}\n        onChange={setValue}\n        getOptions={getOptions}\n        placeholder=\"Search for something\"\n      />\n    );\n    function getOptions(text) {\n      if (text === \"\") {\n        return options;\n      }\n      const filterRegex = new RegExp(text, \"i\");\n      return options.filter(option => option.label.match(filterRegex));\n    }\n}}","position":{"start":{"line":29,"column":1,"offset":727},"end":{"line":56,"column":3,"offset":1492},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"</Playground>","position":{"start":{"line":58,"column":1,"offset":1494},"end":{"line":58,"column":14,"offset":1507},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Props","position":{"start":{"line":60,"column":4,"offset":1512},"end":{"line":60,"column":9,"offset":1517},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":1509},"end":{"line":60,"column":9,"offset":1517},"indent":[]}},{"type":"jsx","value":"<Props of={Autocomplete} />","position":{"start":{"line":62,"column":1,"offset":1519},"end":{"line":62,"column":28,"offset":1546},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":64,"column":1,"offset":1548},"end":{"line":64,"column":4,"offset":1551},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"With details","position":{"start":{"line":66,"column":4,"offset":1556},"end":{"line":66,"column":16,"offset":1568},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":1553},"end":{"line":66,"column":16,"offset":1568},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can add a description to an option, which will appear below the option's\nlabel. You can also add a detail to an option which shows on the option's the\nbottom right. Both of these are optional per option.","position":{"start":{"line":68,"column":1,"offset":1570},"end":{"line":70,"column":53,"offset":1777},"indent":[1,1]}}],"position":{"start":{"line":68,"column":1,"offset":1570},"end":{"line":70,"column":53,"offset":1777},"indent":[1,1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const options = [\n      {\n        value: 1,\n        label: \"Sulaco\",\n        description: \"They mostly come at night, mostly.\",\n        details: \"LV-426\",\n      },\n      { value: 2, label: \"Nostromo\", details: \"LV-426\" },\n      { value: 3, label: \"Serenity\", description: \"I aim to misbehave.\" },\n      { value: 4, label: \"Sleeper Service\" },\n      { value: 5, label: \"Enterprise\" },\n      {\n        value: 6,\n        label: \"Enterprise-D\",\n        description: \"Tea, earl grey, hot.\",\n        details: \"NCC-1701D\",\n      },\n    ];\n    const [value, setValue] = useState();\n    return (\n      <Autocomplete\n        value={value}\n        initialOptions={options}\n        onChange={setValue}\n        getOptions={getOptions}\n        placeholder=\"Search for something\"\n      />\n    );\n    function getOptions(text) {\n      if (text === \"\") {\n        return options;\n      }\n      const filterRegex = new RegExp(text, \"i\");\n      return options.filter(option =>\n        option.heading ? true : option.label.match(filterRegex)\n      );\n    }\n  }}\n</Playground>","position":{"start":{"line":72,"column":1,"offset":1779},"end":{"line":112,"column":14,"offset":2861},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Section headings","position":{"start":{"line":114,"column":4,"offset":2866},"end":{"line":114,"column":20,"offset":2882},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":2863},"end":{"line":114,"column":20,"offset":2882},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"An autocomplete can provide section headings to break up the options.","position":{"start":{"line":116,"column":1,"offset":2884},"end":{"line":116,"column":70,"offset":2953},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":2884},"end":{"line":116,"column":70,"offset":2953},"indent":[]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const options = [\n      {\n        label: \"Ships\",\n        options: [\n          { value: 1, label: \"Sulaco\" },\n          { value: 2, label: \"Nostromo\" },\n          { value: 3, label: \"Serenity\" },\n          { value: 4, label: \"Sleeper Service\" },\n          { value: 5, label: \"Enterprise\" },\n          { value: 6, label: \"Enterprise-D\" },\n        ],\n      },\n      {\n        label: \"Planets\",\n        options: [\n          { value: 7, label: \"Endor\" },\n          { value: 8, label: \"Vulcan\" },\n          { value: 9, label: \"Bespin\" },\n          { value: 10, label: \"Tatooine\" },\n        ],\n      },\n    ];\n    const [value, setValue] = useState();\n    return (\n      <Autocomplete\n        value={value}\n        separators={true}\n        initialOptions={options}\n        onChange={setValue}\n        getOptions={getOptions}\n        placeholder=\"Search for something\"\n      />\n    );\n    function getOptions(text) {\n      const workingOptions = cloneDeep(options);\n      return filterOptions(text, workingOptions);\n    }\n    /**\n     * This is an example of a synchronous filter function.\n     * In reality an api should return this pre-formatted structure.\n     */\n    function filterOptions(text, options = []) {\n      return options.filter(option => {\n        if (option.options) {\n          option.options = filterOptions(text, option.options);\n          return true;\n        }\n        const filterRegex = new RegExp(text, \"i\");\n        return option.label.match(filterRegex);\n      });\n    }\n  }}\n</Playground>","position":{"start":{"line":118,"column":1,"offset":2955},"end":{"line":172,"column":14,"offset":4493},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Kitchen sink","position":{"start":{"line":174,"column":4,"offset":4498},"end":{"line":174,"column":16,"offset":4510},"indent":[]}}],"position":{"start":{"line":174,"column":1,"offset":4495},"end":{"line":174,"column":16,"offset":4510},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This autocomplete uses section headings, details, descriptions and option\nseparators.","position":{"start":{"line":176,"column":1,"offset":4512},"end":{"line":177,"column":12,"offset":4597},"indent":[1]}}],"position":{"start":{"line":176,"column":1,"offset":4512},"end":{"line":177,"column":12,"offset":4597},"indent":[1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const options = [\n      {\n        label: \"Ships\",\n        options: [\n          {\n            value: 1,\n            label: \"Sulaco\",\n            description: \"They mostly come at night, mostly.\",\n            details: \"LV-426\",\n          },\n          { value: 2, label: \"Nostromo\", details: \"LV-426\" },\n          { value: 3, label: \"Serenity\", description: \"I aim to misbehave.\" },\n          { value: 4, label: \"Sleeper Service\" },\n          { value: 5, label: \"Enterprise\" },\n          {\n            value: 6,\n            label: \"Enterprise-D\",\n            description: \"Tea, earl grey, hot.\",\n            details: \"NCC-1701D\",\n          },\n        ],\n      },\n      {\n        label: \"Planets\",\n        options: [\n          { value: 7, label: \"Endor\" },\n          { value: 8, label: \"Vulcan\" },\n          { value: 9, label: \"Bespin\" },\n          { value: 10, label: \"Tatooine\" },\n          { value: 11, label: \"Enterprise\" },\n          { value: 12, label: \"Ariel\" },\n        ],\n      },\n    ];\n    const [value, setValue] = useState();\n    return (\n      <Autocomplete\n        value={value}\n        initialOptions={options}\n        onChange={setValue}\n        getOptions={getOptions}\n        size={\"small\"}\n        placeholder=\"Search for something\"\n      />\n    );\n    function getOptions(text) {\n      const workingOptions = cloneDeep(options);\n      return filterOptions(text, workingOptions);\n    }\n    /**\n     * This is an example of a synchronous filter function.\n     * In reality an api should return this pre-formatted structure.\n     */\n    function filterOptions(text, options = []) {\n      return options.filter(option => {\n        if (option.options) {\n          option.options = filterOptions(text, option.options);\n          return true;\n        }\n        const filterRegex = new RegExp(text, \"i\");\n        return option.label.match(filterRegex);\n      });\n    }\n  }}\n</Playground>","position":{"start":{"line":179,"column":1,"offset":4599},"end":{"line":245,"column":14,"offset":6523},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Setting a value","position":{"start":{"line":247,"column":4,"offset":6528},"end":{"line":247,"column":19,"offset":6543},"indent":[]}}],"position":{"start":{"line":247,"column":1,"offset":6525},"end":{"line":247,"column":19,"offset":6543},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can supply a value to ","position":{"start":{"line":249,"column":1,"offset":6545},"end":{"line":249,"column":27,"offset":6571},"indent":[]}},{"type":"inlineCode","value":"Autocomplete","position":{"start":{"line":249,"column":27,"offset":6571},"end":{"line":249,"column":41,"offset":6585},"indent":[]}},{"type":"text","value":" in the form of an active ","position":{"start":{"line":249,"column":41,"offset":6585},"end":{"line":249,"column":67,"offset":6611},"indent":[]}},{"type":"inlineCode","value":"Option","position":{"start":{"line":249,"column":67,"offset":6611},"end":{"line":249,"column":75,"offset":6619},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":249,"column":75,"offset":6619},"end":{"line":249,"column":76,"offset":6620},"indent":[]}}],"position":{"start":{"line":249,"column":1,"offset":6545},"end":{"line":249,"column":76,"offset":6620},"indent":[]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const options = [\n      { value: 1, label: \"Nostromo\" },\n      { value: 2, label: \"Rodger Young\" },\n      { value: 3, label: \"Serenity\" },\n      { value: 4, label: \"Sleeper Service\" },\n      { value: 5, label: \"Enterprise\" },\n      { value: 6, label: \"Enterprise-D\" },\n    ];\n    const [value, setValue] = useState();\n    return (\n      <>\n        <pre>{JSON.stringify(value, undefined, 2)}</pre>\n        <Autocomplete\n          value={value}\n          initialOptions={[]}\n          onChange={setValue}\n          getOptions={getOptions}\n          placeholder=\"Search for something\"\n        />\n        <Button\n          label=\"Choose the Enterprise\"\n          onClick={() => {\n            setValue(options[4]);\n          }}\n        />\n        <Button\n          label=\"Reset\"\n          onClick={() => {\n            setValue();\n          }}\n        />\n      </>\n    );\n    function getOptions(text) {\n      if (text === \"\") {\n        return options;\n      }\n      const filterRegex = new RegExp(text, \"i\");\n      return options.filter(option => option.label.match(filterRegex));\n    }\n  }}\n</Playground>","position":{"start":{"line":251,"column":1,"offset":6622},"end":{"line":294,"column":14,"offset":7750},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Async requests for options","position":{"start":{"line":296,"column":4,"offset":7755},"end":{"line":296,"column":30,"offset":7781},"indent":[]}}],"position":{"start":{"line":296,"column":1,"offset":7752},"end":{"line":296,"column":30,"offset":7781},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":298,"column":1,"offset":7783},"end":{"line":298,"column":5,"offset":7787},"indent":[]}},{"type":"inlineCode","value":"getOptions","position":{"start":{"line":298,"column":5,"offset":7787},"end":{"line":298,"column":17,"offset":7799},"indent":[]}},{"type":"text","value":" method expected to be async so you can do any desired requests\nusing either promises or ","position":{"start":{"line":298,"column":17,"offset":7799},"end":{"line":299,"column":26,"offset":7888},"indent":[1]}},{"type":"inlineCode","value":"await","position":{"start":{"line":299,"column":26,"offset":7888},"end":{"line":299,"column":33,"offset":7895},"indent":[]}},{"type":"text","value":" in ","position":{"start":{"line":299,"column":33,"offset":7895},"end":{"line":299,"column":37,"offset":7899},"indent":[]}},{"type":"inlineCode","value":"getOptions","position":{"start":{"line":299,"column":37,"offset":7899},"end":{"line":299,"column":49,"offset":7911},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":299,"column":49,"offset":7911},"end":{"line":299,"column":50,"offset":7912},"indent":[]}}],"position":{"start":{"line":298,"column":1,"offset":7783},"end":{"line":299,"column":50,"offset":7912},"indent":[1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const options = [\n      { value: 1, label: \"Nostromo\" },\n      { value: 2, label: \"Rodger Young\" },\n      { value: 3, label: \"Serenity\" },\n      { value: 4, label: \"Sleeper Service\" },\n      { value: 5, label: \"Enterprise\" },\n      { value: 6, label: \"Enterprise-D\" },\n    ];\n    const [value, setValue] = useState();\n    return (\n      <Autocomplete\n        value={value}\n        initialOptions={[]}\n        onChange={setValue}\n        getOptions={getOptions}\n        placeholder=\"Search for something\"\n      />\n    );\n    async function getOptions(text) {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          if (text === \"\") {\n            resolve(options);\n          }\n          const filterRegex = new RegExp(text, \"i\");\n          resolve(options.filter(option => option.label.match(filterRegex)));\n        }, 300);\n      });\n    }\n  }}\n</Playground>","position":{"start":{"line":301,"column":1,"offset":7914},"end":{"line":333,"column":14,"offset":8818},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Related components","position":{"start":{"line":335,"column":4,"offset":8823},"end":{"line":335,"column":22,"offset":8841},"indent":[]}}],"position":{"start":{"line":335,"column":1,"offset":8820},"end":{"line":335,"column":22,"offset":8841},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If you want to present a list of predefined options without text input, use a\n","position":{"start":{"line":337,"column":3,"offset":8845},"end":{"line":338,"column":3,"offset":8925},"indent":[3]}},{"type":"link","title":null,"url":"select","children":[{"type":"text","value":"Select","position":{"start":{"line":338,"column":4,"offset":8926},"end":{"line":338,"column":10,"offset":8932},"indent":[]}}],"position":{"start":{"line":338,"column":3,"offset":8925},"end":{"line":338,"column":19,"offset":8941},"indent":[]}},{"type":"text","value":" instead.","position":{"start":{"line":338,"column":19,"offset":8941},"end":{"line":338,"column":28,"offset":8950},"indent":[]}}],"position":{"start":{"line":337,"column":3,"offset":8845},"end":{"line":338,"column":28,"offset":8950},"indent":[3]}}],"position":{"start":{"line":337,"column":1,"offset":8843},"end":{"line":338,"column":28,"offset":8950},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If autocompleted results are not required for the text input, use\n","position":{"start":{"line":339,"column":3,"offset":8953},"end":{"line":340,"column":3,"offset":9021},"indent":[3]}},{"type":"link","title":null,"url":"input-text","children":[{"type":"text","value":"InputText","position":{"start":{"line":340,"column":4,"offset":9022},"end":{"line":340,"column":13,"offset":9031},"indent":[]}}],"position":{"start":{"line":340,"column":3,"offset":9021},"end":{"line":340,"column":26,"offset":9044},"indent":[]}},{"type":"text","value":" instead.","position":{"start":{"line":340,"column":26,"offset":9044},"end":{"line":340,"column":35,"offset":9053},"indent":[]}}],"position":{"start":{"line":339,"column":3,"offset":8953},"end":{"line":340,"column":35,"offset":9053},"indent":[3]}}],"position":{"start":{"line":339,"column":1,"offset":8951},"end":{"line":340,"column":35,"offset":9053},"indent":[1]}}],"position":{"start":{"line":337,"column":1,"offset":8843},"end":{"line":340,"column":35,"offset":9053},"indent":[1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":343,"column":1,"offset":9056},"end":{"line":343,"column":31,"offset":9086},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":343,"column":31,"offset":9086}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { Playground, Props } from \"docz\";\nimport { ComponentStatus } from \"@jobber/docx\";\nimport { Button } from \"../Button\";\nimport { Autocomplete } from \".\";\nimport { useState } from \"react\";\nimport cloneDeep from \"lodash/cloneDeep\";\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"autocomplete\"\n    }}>{`Autocomplete`}</h1>\n    <ComponentStatus stage=\"pre\" responsive=\"no\" accessible=\"no\" mdxType=\"ComponentStatus\" />\n    <p>{`An autocomplete allows a user to quickly pick a preset value from a larger list\nof possible options.`}</p>\n    <p>{`If the number of available options is smaller consider a `}<a parentName=\"p\" {...{\n        \"href\": \"select\"\n      }}>{`Select`}</a>{`\ninstead.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { Autocomplete } from \"@jobber/components/Autocomplete\";\n`}</code></pre>\n    <Playground __position={1} __code={'() => {\\n  const options = [\\n    { value: 1, label: \\'Nostromo\\' },\\n    { value: 2, label: \\'Rodger Young\\' },\\n    { value: 3, label: \\'Serenity\\' },\\n    { value: 4, label: \\'Sleeper Service\\' },\\n    { value: 5, label: \\'Enterprise\\' },\\n    { value: 6, label: \\'Enterprise-D\\' },\\n  ]\\n  const [value, setValue] = useState()\\n  return (\\n    <Autocomplete\\n      value={value}\\n      initialOptions={[]}\\n      onChange={setValue}\\n      getOptions={getOptions}\\n      placeholder=\\\"Search for something\\\"\\n    />\\n  )\\n  function getOptions(text) {\\n    if (text === \\'\\') {\\n      return options\\n    }\\n    const filterRegex = new RegExp(text, \\'i\\')\\n    return options.filter(option => option.label.match(filterRegex))\\n  }\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      Button,\n      Autocomplete,\n      useState,\n      cloneDeep,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const options = [{\n          value: 1,\n          label: \"Nostromo\"\n        }, {\n          value: 2,\n          label: \"Rodger Young\"\n        }, {\n          value: 3,\n          label: \"Serenity\"\n        }, {\n          value: 4,\n          label: \"Sleeper Service\"\n        }, {\n          value: 5,\n          label: \"Enterprise\"\n        }, {\n          value: 6,\n          label: \"Enterprise-D\"\n        }];\n        const [value, setValue] = useState();\n        return <Autocomplete value={value} initialOptions={[]} onChange={setValue} getOptions={getOptions} placeholder=\"Search for something\" mdxType=\"Autocomplete\" />;\n\n        function getOptions(text) {\n          if (text === \"\") {\n            return options;\n          }\n\n          const filterRegex = new RegExp(text, \"i\");\n          return options.filter(option => option.label.match(filterRegex));\n        }\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Autocomplete} mdxType=\"Props\" />\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"with-details\"\n    }}>{`With details`}</h2>\n    <p>{`You can add a description to an option, which will appear below the option's\nlabel. You can also add a detail to an option which shows on the option's the\nbottom right. Both of these are optional per option.`}</p>\n    <Playground __position={3} __code={'() => {\\n  const options = [\\n    {\\n      value: 1,\\n      label: \\'Sulaco\\',\\n      description: \\'They mostly come at night, mostly.\\',\\n      details: \\'LV-426\\',\\n    },\\n    { value: 2, label: \\'Nostromo\\', details: \\'LV-426\\' },\\n    { value: 3, label: \\'Serenity\\', description: \\'I aim to misbehave.\\' },\\n    { value: 4, label: \\'Sleeper Service\\' },\\n    { value: 5, label: \\'Enterprise\\' },\\n    {\\n      value: 6,\\n      label: \\'Enterprise-D\\',\\n      description: \\'Tea, earl grey, hot.\\',\\n      details: \\'NCC-1701D\\',\\n    },\\n  ]\\n  const [value, setValue] = useState()\\n  return (\\n    <Autocomplete\\n      value={value}\\n      initialOptions={options}\\n      onChange={setValue}\\n      getOptions={getOptions}\\n      placeholder=\\\"Search for something\\\"\\n    />\\n  )\\n  function getOptions(text) {\\n    if (text === \\'\\') {\\n      return options\\n    }\\n    const filterRegex = new RegExp(text, \\'i\\')\\n    return options.filter(option =>\\n      option.heading ? true : option.label.match(filterRegex),\\n    )\\n  }\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      Button,\n      Autocomplete,\n      useState,\n      cloneDeep,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const options = [{\n          value: 1,\n          label: \"Sulaco\",\n          description: \"They mostly come at night, mostly.\",\n          details: \"LV-426\"\n        }, {\n          value: 2,\n          label: \"Nostromo\",\n          details: \"LV-426\"\n        }, {\n          value: 3,\n          label: \"Serenity\",\n          description: \"I aim to misbehave.\"\n        }, {\n          value: 4,\n          label: \"Sleeper Service\"\n        }, {\n          value: 5,\n          label: \"Enterprise\"\n        }, {\n          value: 6,\n          label: \"Enterprise-D\",\n          description: \"Tea, earl grey, hot.\",\n          details: \"NCC-1701D\"\n        }];\n        const [value, setValue] = useState();\n        return <Autocomplete value={value} initialOptions={options} onChange={setValue} getOptions={getOptions} placeholder=\"Search for something\" mdxType=\"Autocomplete\" />;\n\n        function getOptions(text) {\n          if (text === \"\") {\n            return options;\n          }\n\n          const filterRegex = new RegExp(text, \"i\");\n          return options.filter(option => option.heading ? true : option.label.match(filterRegex));\n        }\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"section-headings\"\n    }}>{`Section headings`}</h2>\n    <p>{`An autocomplete can provide section headings to break up the options.`}</p>\n    <Playground __position={4} __code={'() => {\\n  const options = [\\n    {\\n      label: \\'Ships\\',\\n      options: [\\n        { value: 1, label: \\'Sulaco\\' },\\n        { value: 2, label: \\'Nostromo\\' },\\n        { value: 3, label: \\'Serenity\\' },\\n        { value: 4, label: \\'Sleeper Service\\' },\\n        { value: 5, label: \\'Enterprise\\' },\\n        { value: 6, label: \\'Enterprise-D\\' },\\n      ],\\n    },\\n    {\\n      label: \\'Planets\\',\\n      options: [\\n        { value: 7, label: \\'Endor\\' },\\n        { value: 8, label: \\'Vulcan\\' },\\n        { value: 9, label: \\'Bespin\\' },\\n        { value: 10, label: \\'Tatooine\\' },\\n      ],\\n    },\\n  ]\\n  const [value, setValue] = useState()\\n  return (\\n    <Autocomplete\\n      value={value}\\n      separators={true}\\n      initialOptions={options}\\n      onChange={setValue}\\n      getOptions={getOptions}\\n      placeholder=\\\"Search for something\\\"\\n    />\\n  )\\n  function getOptions(text) {\\n    const workingOptions = cloneDeep(options)\\n    return filterOptions(text, workingOptions)\\n  }\\n  /**\\n   * This is an example of a synchronous filter function.\\n   * In reality an api should return this pre-formatted structure.\\n   */\\n  function filterOptions(text, options = []) {\\n    return options.filter(option => {\\n      if (option.options) {\\n        option.options = filterOptions(text, option.options)\\n        return true\\n      }\\n      const filterRegex = new RegExp(text, \\'i\\')\\n      return option.label.match(filterRegex)\\n    })\\n  }\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      Button,\n      Autocomplete,\n      useState,\n      cloneDeep,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const options = [{\n          label: \"Ships\",\n          options: [{\n            value: 1,\n            label: \"Sulaco\"\n          }, {\n            value: 2,\n            label: \"Nostromo\"\n          }, {\n            value: 3,\n            label: \"Serenity\"\n          }, {\n            value: 4,\n            label: \"Sleeper Service\"\n          }, {\n            value: 5,\n            label: \"Enterprise\"\n          }, {\n            value: 6,\n            label: \"Enterprise-D\"\n          }]\n        }, {\n          label: \"Planets\",\n          options: [{\n            value: 7,\n            label: \"Endor\"\n          }, {\n            value: 8,\n            label: \"Vulcan\"\n          }, {\n            value: 9,\n            label: \"Bespin\"\n          }, {\n            value: 10,\n            label: \"Tatooine\"\n          }]\n        }];\n        const [value, setValue] = useState();\n        return <Autocomplete value={value} separators={true} initialOptions={options} onChange={setValue} getOptions={getOptions} placeholder=\"Search for something\" mdxType=\"Autocomplete\" />;\n\n        function getOptions(text) {\n          const workingOptions = cloneDeep(options);\n          return filterOptions(text, workingOptions);\n        }\n        /**\n         * This is an example of a synchronous filter function.\n         * In reality an api should return this pre-formatted structure.\n         */\n\n\n        function filterOptions(text, options = []) {\n          return options.filter(option => {\n            if (option.options) {\n              option.options = filterOptions(text, option.options);\n              return true;\n            }\n\n            const filterRegex = new RegExp(text, \"i\");\n            return option.label.match(filterRegex);\n          });\n        }\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"kitchen-sink\"\n    }}>{`Kitchen sink`}</h2>\n    <p>{`This autocomplete uses section headings, details, descriptions and option\nseparators.`}</p>\n    <Playground __position={5} __code={'() => {\\n  const options = [\\n    {\\n      label: \\'Ships\\',\\n      options: [\\n        {\\n          value: 1,\\n          label: \\'Sulaco\\',\\n          description: \\'They mostly come at night, mostly.\\',\\n          details: \\'LV-426\\',\\n        },\\n        { value: 2, label: \\'Nostromo\\', details: \\'LV-426\\' },\\n        { value: 3, label: \\'Serenity\\', description: \\'I aim to misbehave.\\' },\\n        { value: 4, label: \\'Sleeper Service\\' },\\n        { value: 5, label: \\'Enterprise\\' },\\n        {\\n          value: 6,\\n          label: \\'Enterprise-D\\',\\n          description: \\'Tea, earl grey, hot.\\',\\n          details: \\'NCC-1701D\\',\\n        },\\n      ],\\n    },\\n    {\\n      label: \\'Planets\\',\\n      options: [\\n        { value: 7, label: \\'Endor\\' },\\n        { value: 8, label: \\'Vulcan\\' },\\n        { value: 9, label: \\'Bespin\\' },\\n        { value: 10, label: \\'Tatooine\\' },\\n        { value: 11, label: \\'Enterprise\\' },\\n        { value: 12, label: \\'Ariel\\' },\\n      ],\\n    },\\n  ]\\n  const [value, setValue] = useState()\\n  return (\\n    <Autocomplete\\n      value={value}\\n      initialOptions={options}\\n      onChange={setValue}\\n      getOptions={getOptions}\\n      size={\\'small\\'}\\n      placeholder=\\\"Search for something\\\"\\n    />\\n  )\\n  function getOptions(text) {\\n    const workingOptions = cloneDeep(options)\\n    return filterOptions(text, workingOptions)\\n  }\\n  /**\\n   * This is an example of a synchronous filter function.\\n   * In reality an api should return this pre-formatted structure.\\n   */\\n  function filterOptions(text, options = []) {\\n    return options.filter(option => {\\n      if (option.options) {\\n        option.options = filterOptions(text, option.options)\\n        return true\\n      }\\n      const filterRegex = new RegExp(text, \\'i\\')\\n      return option.label.match(filterRegex)\\n    })\\n  }\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      Button,\n      Autocomplete,\n      useState,\n      cloneDeep,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const options = [{\n          label: \"Ships\",\n          options: [{\n            value: 1,\n            label: \"Sulaco\",\n            description: \"They mostly come at night, mostly.\",\n            details: \"LV-426\"\n          }, {\n            value: 2,\n            label: \"Nostromo\",\n            details: \"LV-426\"\n          }, {\n            value: 3,\n            label: \"Serenity\",\n            description: \"I aim to misbehave.\"\n          }, {\n            value: 4,\n            label: \"Sleeper Service\"\n          }, {\n            value: 5,\n            label: \"Enterprise\"\n          }, {\n            value: 6,\n            label: \"Enterprise-D\",\n            description: \"Tea, earl grey, hot.\",\n            details: \"NCC-1701D\"\n          }]\n        }, {\n          label: \"Planets\",\n          options: [{\n            value: 7,\n            label: \"Endor\"\n          }, {\n            value: 8,\n            label: \"Vulcan\"\n          }, {\n            value: 9,\n            label: \"Bespin\"\n          }, {\n            value: 10,\n            label: \"Tatooine\"\n          }, {\n            value: 11,\n            label: \"Enterprise\"\n          }, {\n            value: 12,\n            label: \"Ariel\"\n          }]\n        }];\n        const [value, setValue] = useState();\n        return <Autocomplete value={value} initialOptions={options} onChange={setValue} getOptions={getOptions} size={\"small\"} placeholder=\"Search for something\" mdxType=\"Autocomplete\" />;\n\n        function getOptions(text) {\n          const workingOptions = cloneDeep(options);\n          return filterOptions(text, workingOptions);\n        }\n        /**\n         * This is an example of a synchronous filter function.\n         * In reality an api should return this pre-formatted structure.\n         */\n\n\n        function filterOptions(text, options = []) {\n          return options.filter(option => {\n            if (option.options) {\n              option.options = filterOptions(text, option.options);\n              return true;\n            }\n\n            const filterRegex = new RegExp(text, \"i\");\n            return option.label.match(filterRegex);\n          });\n        }\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"setting-a-value\"\n    }}>{`Setting a value`}</h2>\n    <p>{`You can supply a value to `}<inlineCode parentName=\"p\">{`Autocomplete`}</inlineCode>{` in the form of an active `}<inlineCode parentName=\"p\">{`Option`}</inlineCode>{`.`}</p>\n    <Playground __position={6} __code={'() => {\\n  const options = [\\n    { value: 1, label: \\'Nostromo\\' },\\n    { value: 2, label: \\'Rodger Young\\' },\\n    { value: 3, label: \\'Serenity\\' },\\n    { value: 4, label: \\'Sleeper Service\\' },\\n    { value: 5, label: \\'Enterprise\\' },\\n    { value: 6, label: \\'Enterprise-D\\' },\\n  ]\\n  const [value, setValue] = useState()\\n  return (\\n    <>\\n      <pre>{JSON.stringify(value, undefined, 2)}</pre>\\n      <Autocomplete\\n        value={value}\\n        initialOptions={[]}\\n        onChange={setValue}\\n        getOptions={getOptions}\\n        placeholder=\\\"Search for something\\\"\\n      />\\n      <Button\\n        label=\\\"Choose the Enterprise\\\"\\n        onClick={() => {\\n          setValue(options[4])\\n        }}\\n      />\\n      <Button\\n        label=\\\"Reset\\\"\\n        onClick={() => {\\n          setValue()\\n        }}\\n      />\\n    </>\\n  )\\n  function getOptions(text) {\\n    if (text === \\'\\') {\\n      return options\\n    }\\n    const filterRegex = new RegExp(text, \\'i\\')\\n    return options.filter(option => option.label.match(filterRegex))\\n  }\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      Button,\n      Autocomplete,\n      useState,\n      cloneDeep,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const options = [{\n          value: 1,\n          label: \"Nostromo\"\n        }, {\n          value: 2,\n          label: \"Rodger Young\"\n        }, {\n          value: 3,\n          label: \"Serenity\"\n        }, {\n          value: 4,\n          label: \"Sleeper Service\"\n        }, {\n          value: 5,\n          label: \"Enterprise\"\n        }, {\n          value: 6,\n          label: \"Enterprise-D\"\n        }];\n        const [value, setValue] = useState();\n        return <>\n        <pre>{JSON.stringify(value, undefined, 2)}</pre>\n        <Autocomplete value={value} initialOptions={[]} onChange={setValue} getOptions={getOptions} placeholder=\"Search for something\" mdxType=\"Autocomplete\" />\n        <Button label=\"Choose the Enterprise\" onClick={() => {\n            setValue(options[4]);\n          }} mdxType=\"Button\" />\n        <Button label=\"Reset\" onClick={() => {\n            setValue();\n          }} mdxType=\"Button\" />\n      </>;\n\n        function getOptions(text) {\n          if (text === \"\") {\n            return options;\n          }\n\n          const filterRegex = new RegExp(text, \"i\");\n          return options.filter(option => option.label.match(filterRegex));\n        }\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"async-requests-for-options\"\n    }}>{`Async requests for options`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`getOptions`}</inlineCode>{` method expected to be async so you can do any desired requests\nusing either promises or `}<inlineCode parentName=\"p\">{`await`}</inlineCode>{` in `}<inlineCode parentName=\"p\">{`getOptions`}</inlineCode>{`.`}</p>\n    <Playground __position={7} __code={'() => {\\n  const options = [\\n    { value: 1, label: \\'Nostromo\\' },\\n    { value: 2, label: \\'Rodger Young\\' },\\n    { value: 3, label: \\'Serenity\\' },\\n    { value: 4, label: \\'Sleeper Service\\' },\\n    { value: 5, label: \\'Enterprise\\' },\\n    { value: 6, label: \\'Enterprise-D\\' },\\n  ]\\n  const [value, setValue] = useState()\\n  return (\\n    <Autocomplete\\n      value={value}\\n      initialOptions={[]}\\n      onChange={setValue}\\n      getOptions={getOptions}\\n      placeholder=\\\"Search for something\\\"\\n    />\\n  )\\n  async function getOptions(text) {\\n    return new Promise(resolve => {\\n      setTimeout(() => {\\n        if (text === \\'\\') {\\n          resolve(options)\\n        }\\n        const filterRegex = new RegExp(text, \\'i\\')\\n        resolve(options.filter(option => option.label.match(filterRegex)))\\n      }, 300)\\n    })\\n  }\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ComponentStatus,\n      Button,\n      Autocomplete,\n      useState,\n      cloneDeep,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const options = [{\n          value: 1,\n          label: \"Nostromo\"\n        }, {\n          value: 2,\n          label: \"Rodger Young\"\n        }, {\n          value: 3,\n          label: \"Serenity\"\n        }, {\n          value: 4,\n          label: \"Sleeper Service\"\n        }, {\n          value: 5,\n          label: \"Enterprise\"\n        }, {\n          value: 6,\n          label: \"Enterprise-D\"\n        }];\n        const [value, setValue] = useState();\n        return <Autocomplete value={value} initialOptions={[]} onChange={setValue} getOptions={getOptions} placeholder=\"Search for something\" mdxType=\"Autocomplete\" />;\n\n        async function getOptions(text) {\n          return new Promise(resolve => {\n            setTimeout(() => {\n              if (text === \"\") {\n                resolve(options);\n              }\n\n              const filterRegex = new RegExp(text, \"i\");\n              resolve(options.filter(option => option.label.match(filterRegex)));\n            }, 300);\n          });\n        }\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"related-components\"\n    }}>{`Related components`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`If you want to present a list of predefined options without text input, use a\n`}<a parentName=\"li\" {...{\n          \"href\": \"select\"\n        }}>{`Select`}</a>{` instead.`}</li>\n      <li parentName=\"ul\">{`If autocompleted results are not required for the text input, use\n`}<a parentName=\"li\" {...{\n          \"href\": \"input-text\"\n        }}>{`InputText`}</a>{` instead.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}
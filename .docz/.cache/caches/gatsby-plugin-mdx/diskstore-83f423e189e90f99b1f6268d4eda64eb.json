{"expireTime":9007200931831372000,"key":"gatsby-plugin-mdx-entire-payload-c37884f9d817cfc38854aa38506f766c-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":114,"offset":115},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":117},"end":{"line":5,"column":29,"offset":145},"indent":[]}},{"type":"import","value":"import { Playground } from \"docz\";\nimport { useState } from \"react\";\nimport { useOnKeyDown } from \"./useOnKeyDown\";\nimport { Text } from \"@jobber/components/Text\";\nimport { Card } from \"@jobber/components/Card\";\nimport { Content } from \"@jobber/components/Content\";","position":{"start":{"line":8,"column":1,"offset":148},"end":{"line":13,"column":54,"offset":413},"indent":[1,1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"UseOnKeyDown","position":{"start":{"line":15,"column":3,"offset":417},"end":{"line":15,"column":15,"offset":429},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":415},"end":{"line":15,"column":15,"offset":429},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"useOnKeyDown","position":{"start":{"line":17,"column":1,"offset":431},"end":{"line":17,"column":15,"offset":445},"indent":[]}},{"type":"text","value":" is a simple hook that adds the keydown event handler when the\ncomponent is mounted and removing when unmounted.","position":{"start":{"line":17,"column":15,"offset":445},"end":{"line":18,"column":50,"offset":557},"indent":[1]}}],"position":{"start":{"line":17,"column":1,"offset":431},"end":{"line":18,"column":50,"offset":557},"indent":[1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"useOnKeyDown","position":{"start":{"line":20,"column":1,"offset":559},"end":{"line":20,"column":15,"offset":573},"indent":[]}},{"type":"text","value":" should ","position":{"start":{"line":20,"column":15,"offset":573},"end":{"line":20,"column":23,"offset":581},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"only","position":{"start":{"line":20,"column":25,"offset":583},"end":{"line":20,"column":29,"offset":587},"indent":[]}}],"position":{"start":{"line":20,"column":23,"offset":581},"end":{"line":20,"column":31,"offset":589},"indent":[]}},{"type":"text","value":" be used when building keyboard shortcut in a\ncomponent.","position":{"start":{"line":20,"column":31,"offset":589},"end":{"line":21,"column":11,"offset":645},"indent":[1]}}],"position":{"start":{"line":20,"column":1,"offset":559},"end":{"line":21,"column":11,"offset":645},"indent":[1]}},{"type":"code","lang":"tsx","meta":null,"value":"import { useOnKeyDown } from \"@jobber/hooks\";","position":{"start":{"line":23,"column":1,"offset":647},"end":{"line":25,"column":4,"offset":703},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"With a list of Keys","position":{"start":{"line":27,"column":4,"offset":708},"end":{"line":27,"column":23,"offset":727},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":705},"end":{"line":27,"column":23,"offset":727},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can specify a list of key's to watch with the event handler.","position":{"start":{"line":29,"column":1,"offset":729},"end":{"line":29,"column":65,"offset":793},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":729},"end":{"line":29,"column":65,"offset":793},"indent":[]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const initialListText = \"\";\n    const [listText, setListText] = useState(initialListText);\n    useOnKeyDown(\n      e => {\n        setListText(\"You pressed '\" + e.key + \"'\");\n      },\n      [\"Shift\", \"Enter\"]\n    );\n    return (\n      <Card title=\"Shift or Enter Example\">\n        <Content>\n          Press shift or enter.\n          <pre>{listText}</pre>\n        </Content>\n      </Card>\n    );\n  }}\n</Playground>","position":{"start":{"line":31,"column":1,"offset":795},"end":{"line":50,"column":14,"offset":1235},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"With a Key modifier","position":{"start":{"line":52,"column":4,"offset":1240},"end":{"line":52,"column":23,"offset":1259},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":1237},"end":{"line":52,"column":23,"offset":1259},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A key can have a modifier. In this case we show how to implement a ctrl+z\nworkflow.","position":{"start":{"line":54,"column":1,"offset":1261},"end":{"line":55,"column":10,"offset":1344},"indent":[1]}}],"position":{"start":{"line":54,"column":1,"offset":1261},"end":{"line":55,"column":10,"offset":1344},"indent":[1]}},{"type":"jsx","value":"<Playground>\n  {() => {\n    const initialModifierText = \"Press escape to clear this text\";\n    const [modifierText, setModifierText] = useState(initialModifierText);\n    useOnKeyDown(\n      () => setModifierText(\"Removed. Press Control + z to undo.\"),\n      \"Escape\"\n    );\n    useOnKeyDown(() => setModifierText(initialModifierText), {\n      key: \"z\",\n      ctrlKey: true,\n    });\n    return (\n      <Card title=\"Escape and Ctrl-z Example\">\n        <Content>\n          <pre>{modifierText}</pre>\n        </Content>\n      </Card>\n    );\n  }}\n</Playground>","position":{"start":{"line":57,"column":1,"offset":1346},"end":{"line":77,"column":14,"offset":1900},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":80,"column":1,"offset":1903},"end":{"line":80,"column":31,"offset":1933},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":80,"column":31,"offset":1933}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/taylornoj/workspace/atlantis/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { Playground } from \"docz\";\nimport { useState } from \"react\";\nimport { useOnKeyDown } from \"./useOnKeyDown\";\nimport { Text } from \"@jobber/components/Text\";\nimport { Card } from \"@jobber/components/Card\";\nimport { Content } from \"@jobber/components/Content\";\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"useonkeydown\"\n    }}>{`UseOnKeyDown`}</h1>\n    <p><inlineCode parentName=\"p\">{`useOnKeyDown`}</inlineCode>{` is a simple hook that adds the keydown event handler when the\ncomponent is mounted and removing when unmounted.`}</p>\n    <p><inlineCode parentName=\"p\">{`useOnKeyDown`}</inlineCode>{` should `}<strong parentName=\"p\">{`only`}</strong>{` be used when building keyboard shortcut in a\ncomponent.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { useOnKeyDown } from \"@jobber/hooks\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"with-a-list-of-keys\"\n    }}>{`With a list of Keys`}</h2>\n    <p>{`You can specify a list of key's to watch with the event handler.`}</p>\n    <Playground __position={0} __code={'() => {\\n  const initialListText = \\'\\'\\n  const [listText, setListText] = useState(initialListText)\\n  useOnKeyDown(\\n    e => {\\n      setListText(\\\"You pressed \\'\\\" + e.key + \\\"\\'\\\")\\n    },\\n    [\\'Shift\\', \\'Enter\\'],\\n  )\\n  return (\\n    <Card title=\\\"Shift or Enter Example\\\">\\n      <Content>\\n        Press shift or enter.\\n        <pre>{listText}</pre>\\n      </Content>\\n    </Card>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useState,\n      useOnKeyDown,\n      Text,\n      Card,\n      Content,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const initialListText = \"\";\n        const [listText, setListText] = useState(initialListText);\n        useOnKeyDown(e => {\n          setListText(\"You pressed '\" + e.key + \"'\");\n        }, [\"Shift\", \"Enter\"]);\n        return <Card title=\"Shift or Enter Example\" mdxType=\"Card\">\n        <Content mdxType=\"Content\">\n          Press shift or enter.\n          <pre>{listText}</pre>\n        </Content>\n      </Card>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"with-a-key-modifier\"\n    }}>{`With a Key modifier`}</h2>\n    <p>{`A key can have a modifier. In this case we show how to implement a ctrl+z\nworkflow.`}</p>\n    <Playground __position={1} __code={'() => {\\n  const initialModifierText = \\'Press escape to clear this text\\'\\n  const [modifierText, setModifierText] = useState(initialModifierText)\\n  useOnKeyDown(\\n    () => setModifierText(\\'Removed. Press Control + z to undo.\\'),\\n    \\'Escape\\',\\n  )\\n  useOnKeyDown(() => setModifierText(initialModifierText), {\\n    key: \\'z\\',\\n    ctrlKey: true,\\n  })\\n  return (\\n    <Card title=\\\"Escape and Ctrl-z Example\\\">\\n      <Content>\\n        <pre>{modifierText}</pre>\\n      </Content>\\n    </Card>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useState,\n      useOnKeyDown,\n      Text,\n      Card,\n      Content,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const initialModifierText = \"Press escape to clear this text\";\n        const [modifierText, setModifierText] = useState(initialModifierText);\n        useOnKeyDown(() => setModifierText(\"Removed. Press Control + z to undo.\"), \"Escape\");\n        useOnKeyDown(() => setModifierText(initialModifierText), {\n          key: \"z\",\n          ctrlKey: true\n        });\n        return <Card title=\"Escape and Ctrl-z Example\" mdxType=\"Card\">\n        <Content mdxType=\"Content\">\n          <pre>{modifierText}</pre>\n        </Content>\n      </Card>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}
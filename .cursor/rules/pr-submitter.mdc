---
description: This rule creates a GitHub pull request using the description generated by the PR Description Generator rule.
globs:
alwaysApply: false
---
# PR Submitter

This rule creates a GitHub pull request using the description generated by the PR Description Generator rule.

## Behavior

1. Takes the output from the PR Description Generator rule
2. Extracts the title and the path to the description file
3. Creates a pull request using the GitHub CLI
4. Cleans up the temporary description file

## Example Usage

```
/pr-submit
```

## Implementation

```typescript
import { exec } from 'child_process';
import { promisify } from 'util';
import { readFile, unlink } from 'fs/promises';

const execAsync = promisify(exec);

async function getCurrentBranch() {
  const { stdout } = await execAsync('git rev-parse --abbrev-ref HEAD');
  return stdout.trim();
}

async function ensureBranchIsPushed(branch: string) {
  try {
    // Check if the branch exists on remote
    await execAsync(`git ls-remote --heads origin ${branch}`);
  } catch {
    throw new Error(
      'Current branch has not been pushed to remote. Please push your changes first: git push -u origin HEAD'
    );
  }
}

async function createPullRequest(title: string, descriptionFile: string) {
  try {
    // Check if gh CLI is installed
    await execAsync('gh --version');
  } catch {
    throw new Error('GitHub CLI (gh) is not installed. Please install it first: https://cli.github.com/');
  }

  try {
    // Create the PR using gh CLI with the file containing the description
    const command = [
      'gh pr create',
      '--base master',
      `--title "${title.replace(/"/g, '\\"')}"`,
      `--body-file "${descriptionFile}"`,
    ].join(' ');

    const { stdout } = await execAsync(command);
    return stdout.trim(); // Returns the PR URL
  } catch (error) {
    throw new Error(`Failed to create PR: ${error}`);
  }
}

async function cleanupDescriptionFile(filePath: string) {
  try {
    await unlink(filePath);
  } catch (error) {
    console.warn(`Warning: Failed to cleanup temporary file ${filePath}: ${error.message}`);
  }
}

export async function submitPR(prDescription: string) {
  try {
    // Split the input to extract title and description file path
    const [title, marker, filePath, ...rest] = prDescription.split('\n');

    if (marker !== '--PR_DESCRIPTION_FILE--' || !filePath) {
      throw new Error(
        'Invalid PR description format. Please run /pr-description first to generate a valid description.'
      );
    }

    // Get current branch and ensure it's pushed
    const branch = await getCurrentBranch();
    await ensureBranchIsPushed(branch);

    // Create the PR
    console.log('Creating pull request...');
    const prUrl = await createPullRequest(title, filePath);

    // Cleanup the temporary file
    await cleanupDescriptionFile(filePath);

    return `Pull request created successfully!\n\nURL: ${prUrl}`;
  } catch (error) {
    console.error('Error:', error.message);
    return `Error: ${error.message}`;
  }
}
```

## Command

```json
{
  "name": "Submit Pull Request",
  "description": "Creates a GitHub pull request using the description from PR Description Generator",
  "command": "pr-submit",
  "implementation": "submitPR",
  "example": "/pr-submit"
}
```

## Prerequisites

- [GitHub CLI (gh)](https:/cli.github.com) must be installed and authenticated
- You must have push access to the repository
- Your local branch must be pushed to the remote
- You must run `/pr-description` first to generate the PR description

## Usage Flow

1. Run `/pr-description` to generate the PR description
2. Review the generated description and make any necessary adjustments
3. Run `/pr-submit` to create the PR on GitHub
4. The command will return the URL of the created PR

Note: The temporary file containing the PR description will be automatically cleaned up after the PR is successfully created.
